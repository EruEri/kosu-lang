const EXIT_SUCCESS = 0;

enum option(wrapper) {
  some(wrapper),
  none
}

struct point { 
  x: s8,
  y: u8
}

external malloc(_: u64) anyptr;

external print(format: stringl; ...) s32 = "printf";


fn default<t>(option: option(t), default: t) t {
    $ switch (option) {
        .none => { $ default }
        .some(x) => { $ x }
    }
}

// Single line comment
fn fibonacci(n: u32) u32 {
  $ cases {
  of n == 0u32 => { $ 0u32 }
  of n == 1u32 => { $ 1u32 }
  else { $ fibonacci(n - 1u32) + fibonacci(n - 2u32) }
  }
}

fn main() s32 {
  /*
    Multiple lines comment
  */
  const message_opt = .some("Hello world");
  const message = message_opt |> default("Never");
  discard print("%s\n", message);
  $ EXIT_SUCCESS
}