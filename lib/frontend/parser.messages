modul: XOR
##
## Ends in an error in state: 471.
##
## modul' -> . modul [ # ]
##
## The known suffix of the stack is as follows:
##
##

Expecting "struct", "enum", "syscall", "fn", "const", "external", "operator"

modul: SYSCALL XOR
##
## Ends in an error in state: 472.
##
## syscall_decl -> SYSCALL . IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) EQUAL Integer_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL
##

Expecting "<syscall name>"

modul: SYSCALL IDENT XOR
##
## Ends in an error in state: 473.
##
## syscall_decl -> SYSCALL IDENT . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) EQUAL Integer_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT
##

Expecting "(" after the syscall identifier

modul: SYSCALL IDENT LPARENT XOR
##
## Ends in an error in state: 474.
##
## syscall_decl -> SYSCALL IDENT LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) EQUAL Integer_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT
##

Expecting "parameter name", "_" or ")"


modul: SYSCALL IDENT LPARENT RPARENT XOR
##
## Ends in an error in state: 476.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT . option(ctype) EQUAL Integer_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT
##

Expecting "Syscall return type" or "="


modul: SYSCALL IDENT LPARENT RPARENT EQUAL XOR
##
## Ends in an error in state: 478.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) EQUAL . Integer_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) EQUAL
##

Expecting "Syscall code"

modul: SYSCALL IDENT LPARENT RPARENT EQUAL Integer_lit XOR
##
## Ends in an error in state: 479.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) EQUAL Integer_lit . option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) EQUAL Integer_lit
##

Expecting ";" "syscall","struct" "operator","fn","external", "enum", "const" or "end of file"



modul: STRUCT XOR
##
## Ends in an error in state: 482.
##
## struct_decl -> STRUCT . IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE loption(separated_nonempty_list(COMMA,__anonymous_1)) RBRACE [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

Expecting "struct name idenfier"

modul: STRUCT IDENT XOR
##
## Ends in an error in state: 483.
##
## struct_decl -> STRUCT IDENT . option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE loption(separated_nonempty_list(COMMA,__anonymous_1)) RBRACE [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT
##

Expecting "(" or "{"





modul: STRUCT IDENT LBRACE XOR
##
## Ends in an error in state: 485.
##
## struct_decl -> STRUCT IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE . loption(separated_nonempty_list(COMMA,__anonymous_1)) RBRACE [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE
##

Expecting "Enum variant" or "}"

modul: STRUCT IDENT LBRACE IDENT XOR
##
## Ends in an error in state: 62.
##
## separated_nonempty_list(COMMA,__anonymous_1) -> IDENT . COLON ktype [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_1) -> IDENT . COLON ktype COMMA separated_nonempty_list(COMMA,__anonymous_1) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting ":"

modul: STRUCT IDENT LBRACE IDENT COLON XOR
##
## Ends in an error in state: 63.
##
## separated_nonempty_list(COMMA,__anonymous_1) -> IDENT COLON . ktype [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_1) -> IDENT COLON . ktype COMMA separated_nonempty_list(COMMA,__anonymous_1) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

Expecting "Type identifier"














modul: OPERATOR WILDCARD
##
## Ends in an error in state: 488.
##
## operator_decl -> OPERATOR . binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
## operator_decl -> OPERATOR . LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR
##

Expecting "+", "-", "*", "/", "%", "<<", ">>", "|", "&", "^" or "("

modul: OPERATOR LPARENT XOR
##
## Ends in an error in state: 489.
##
## operator_decl -> OPERATOR LPARENT . unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT
##

Expecting ".!" or ".-"

modul: OPERATOR LPARENT DOT XOR
##
## Ends in an error in state: 80.
##
## unary_operator_symbol -> DOT . NOT [ RPARENT ]
## unary_operator_symbol -> DOT . MINUS [ RPARENT ]
##
## The known suffix of the stack is as follows:
## DOT
##

Expecting "-" or "!"

modul: OPERATOR LPARENT DOT MINUS XOR
##
## Ends in an error in state: 490.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol . RPARENT LPARENT IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol
##

Expecting ")"

modul: OPERATOR LPARENT DOT MINUS RPARENT XOR
##
## Ends in an error in state: 491.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT . LPARENT IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT
##

Expecting ")"

modul: OPERATOR LPARENT DOT MINUS RPARENT LPARENT XOR
##
## Ends in an error in state: 492.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT . IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT
##

Expecting "parameter identifier"

modul: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT XOR
##
## Ends in an error in state: 493.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT . COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT
##

Expecting ":"

modul: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT COLON XOR
##
## Ends in an error in state: 494.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON . ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON
##

Expecting "Type identifier"




modul: FUNCTION IDENT LPARENT RPARENT LBRACE XOR
##
## Ends in an error in state: 498.
##
## fun_kbody -> LBRACE . list(located(statement)) option(preceded(DOLLAR,located(expr))) RBRACE [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Expecting "discard", "var", "const", "*" or "$"

modul: FUNCTION IDENT LPARENT RPARENT LBRACE MULT XOR
##
## Ends in an error in state: 92.
##
## statement -> MULT . separated_nonempty_list(DOT,located(IDENT)) EQUAL expr SEMICOLON [ VAR RBRACE MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## MULT
##

Expecting "Dereferenced identifier"

modul: FUNCTION IDENT LPARENT RPARENT LBRACE MULT IDENT XOR
##
## Ends in an error in state: 93.
##
## separated_nonempty_list(DOT,located(IDENT)) -> IDENT . [ RPARENT EQUAL ]
## separated_nonempty_list(DOT,located(IDENT)) -> IDENT . DOT separated_nonempty_list(DOT,located(IDENT)) [ RPARENT EQUAL ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting "=" or "."

modul: FUNCTION IDENT LPARENT RPARENT LBRACE MULT IDENT EQUAL XOR
##
## Ends in an error in state: 97.
##
## statement -> MULT separated_nonempty_list(DOT,located(IDENT)) EQUAL . expr SEMICOLON [ VAR RBRACE MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## MULT separated_nonempty_list(DOT,located(IDENT)) EQUAL
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH XOR
##
## Ends in an error in state: 102.
##
## expr -> SWITCH . LPARENT expr RPARENT LBRACE nonempty_list(__anonymous_17) option(__anonymous_18) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## SWITCH
##

Expecting "("

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT XOR
##
## Ends in an error in state: 103.
##
## expr -> SWITCH LPARENT . expr RPARENT LBRACE nonempty_list(__anonymous_17) option(__anonymous_18) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## SWITCH LPARENT
##

Expecting "<switch expression>"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SIZEOF XOR
##
## Ends in an error in state: 104.
##
## expr -> SIZEOF . LPARENT COLON expr RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> SIZEOF . LPARENT ktype RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## SIZEOF
##

Expecting "("

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SIZEOF LPARENT XOR
##
## Ends in an error in state: 105.
##
## expr -> SIZEOF LPARENT . COLON expr RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> SIZEOF LPARENT . ktype RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPARENT
##

Expecting ":" or "Type identifier"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SIZEOF LPARENT COLON XOR
##
## Ends in an error in state: 106.
##
## expr -> SIZEOF LPARENT COLON . expr RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPARENT COLON
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL NOT XOR
##
## Ends in an error in state: 108.
##
## expr -> NOT . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## NOT
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL MULT XOR
##
## Ends in an error in state: 109.
##
## nonempty_list(MULT) -> MULT . [ IDENT ]
## nonempty_list(MULT) -> MULT . nonempty_list(MULT) [ IDENT ]
##
## The known suffix of the stack is as follows:
## MULT
##

Expecting "*" or "variable identifier"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL MINUS XOR
##
## Ends in an error in state: 111.
##
## expr -> MINUS . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## MINUS
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL LPARENT XOR
##
## Ends in an error in state: 115.
##
## expr -> LPARENT . loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

Expecting ")" or "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IF XOR
##
## Ends in an error in state: 117.
##
## expr -> IF . LPARENT expr RPARENT kbody option(preceded(ELSE,kbody)) [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## IF
##

Expecting "("

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IF LPARENT XOR
##
## Ends in an error in state: 118.
##
## expr -> IF LPARENT . expr RPARENT kbody option(preceded(ELSE,kbody)) [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## IF LPARENT
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL CASES XOR
##
## Ends in an error in state: 126.
##
## expr -> CASES . LBRACE nonempty_list(__anonymous_15) option(preceded(ELSE,kbody)) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## CASES
##

Expecting "{"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL CASES LBRACE XOR
##
## Ends in an error in state: 127.
##
## expr -> CASES LBRACE . nonempty_list(__anonymous_15) option(preceded(ELSE,kbody)) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## CASES LBRACE
##

Expecting "of"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL CASES LBRACE OF XOR
##
## Ends in an error in state: 128.
##
## nonempty_list(__anonymous_15) -> OF . expr ARROWFUNC kbody [ RBRACE ELSE ]
## nonempty_list(__anonymous_15) -> OF . expr ARROWFUNC kbody nonempty_list(__anonymous_15) [ RBRACE ELSE ]
##
## The known suffix of the stack is as follows:
## OF
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL BUILTIN XOR
##
## Ends in an error in state: 129.
##
## expr -> BUILTIN . LPARENT loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## BUILTIN
##

Expecting "("

modul: FUNCTION IDENT LPARENT RPARENT EQUAL BUILTIN LPARENT XOR
##
## Ends in an error in state: 130.
##
## expr -> BUILTIN LPARENT . loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## BUILTIN LPARENT
##

Expecting "expression" or ")"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL AMPERSAND XOR
##
## Ends in an error in state: 131.
##
## expr -> AMPERSAND . IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## AMPERSAND
##

Expecting "variable identifier"























































modul: FUNCTION IDENT LPARENT RPARENT EQUAL DOT XOR
##
## Ends in an error in state: 221.
##
## expr -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) enum_resolver . IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(expr)),RPARENT)) [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) enum_resolver
##

Expecting "enum variant"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL DOT IDENT WILDCARD
##
## Ends in an error in state: 222.
##
## expr -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) enum_resolver IDENT . option(delimited(LPARENT,separated_nonempty_list(COMMA,located(expr)),RPARENT)) [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) enum_resolver IDENT
##

Expecting "(", "binary operator", "struct", "syscall", "enum", "struct", "fn"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL DOT IDENT LPARENT XOR
##
## Ends in an error in state: 223.
##
## option(delimited(LPARENT,separated_nonempty_list(COMMA,located(expr)),RPARENT)) -> LPARENT . separated_nonempty_list(COMMA,located(expr)) RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT LBRACE IDENT EQUAL XOR
##
## Ends in an error in state: 241.
##
## statement -> separated_nonempty_list(DOT,located(IDENT)) EQUAL . expr SEMICOLON [ VAR RBRACE MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(DOT,located(IDENT)) EQUAL
##

Expecting "Function expression"


modul: FUNCTION IDENT LPARENT RPARENT LBRACE DISCARD XOR
##
## Ends in an error in state: 235.
##
## statement -> DISCARD . expr SEMICOLON [ VAR RBRACE MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## DISCARD
##

Expecting "expression"



modul: FUNCTION IDENT LPARENT RPARENT LBRACE CONST XOR
##
## Ends in an error in state: 245.
##
## statement -> declarer . IDENT option(__anonymous_9) EQUAL expr SEMICOLON [ VAR RBRACE MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## declarer
##

Expecting "variable identifier"

modul: FUNCTION IDENT LPARENT RPARENT LBRACE CONST IDENT XOR
##
## Ends in an error in state: 246.
##
## statement -> declarer IDENT . option(__anonymous_9) EQUAL expr SEMICOLON [ VAR RBRACE MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## declarer IDENT
##

Expecting ":" or "="

modul: FUNCTION IDENT LPARENT RPARENT LBRACE CONST IDENT COLON XOR
##
## Ends in an error in state: 247.
##
## option(__anonymous_9) -> COLON . ktype [ EQUAL ]
##
## The known suffix of the stack is as follows:
## COLON
##

Expecting "Explicit Type"


modul: FUNCTION IDENT LPARENT RPARENT LBRACE CONST IDENT EQUAL XOR
##
## Ends in an error in state: 250.
##
## statement -> declarer IDENT option(__anonymous_9) EQUAL . expr SEMICOLON [ VAR RBRACE MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## declarer IDENT option(__anonymous_9) EQUAL
##

Expecting "expression"


modul: FUNCTION IDENT LPARENT RPARENT LBRACE DOLLAR XOR
##
## Ends in an error in state: 254.
##
## option(preceded(DOLLAR,located(expr))) -> DOLLAR . expr [ RBRACE ]
##
## The known suffix of the stack is as follows:
## DOLLAR
##

Expecting "expression"


modul: FUNCTION IDENT LPARENT RPARENT EQUAL XOR
##
## Ends in an error in state: 502.
##
## fun_kbody -> EQUAL . expr option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

Expecting "expression"


modul: OPERATOR AMPERSAND XOR
##
## Ends in an error in state: 506.
##
## operator_decl -> OPERATOR binary_operator_symbol . LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol
##

Expecting "("

modul: OPERATOR AMPERSAND LPARENT XOR
##
## Ends in an error in state: 507.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT . IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT
##

Expecting "identifier"

modul: OPERATOR AMPERSAND LPARENT IDENT XOR
##
## Ends in an error in state: 508.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT . COLON ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT
##

Expecting ":"

modul: OPERATOR AMPERSAND LPARENT IDENT COLON XOR
##
## Ends in an error in state: 509.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON . ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON
##

Expecting "Type identifier"








modul: FUNCTION XOR
##
## Ends in an error in state: 518.
##
## function_decl -> FUNCTION . IDENT option(__anonymous_11) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ktype) fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION
##

Expecting "Function name"

modul: FUNCTION IDENT XOR
##
## Ends in an error in state: 519.
##
## function_decl -> FUNCTION IDENT . option(__anonymous_11) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ktype) fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT
##

Expecting "<" or "("

modul: FUNCTION IDENT INF XOR
##
## Ends in an error in state: 387.
##
## option(__anonymous_11) -> INF . separated_nonempty_list(COMMA,__anonymous_10) SUP [ LPARENT ]
##
## The known suffix of the stack is as follows:
## INF
##

Expecting "Function generic identifier"

modul: FUNCTION IDENT INF IDENT XOR
##
## Ends in an error in state: 388.
##
## separated_nonempty_list(COMMA,__anonymous_10) -> IDENT . [ SUP ]
## separated_nonempty_list(COMMA,__anonymous_10) -> IDENT . COMMA separated_nonempty_list(COMMA,__anonymous_10) [ SUP ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting ">" or ","

modul: FUNCTION IDENT INF IDENT COMMA XOR
##
## Ends in an error in state: 389.
##
## separated_nonempty_list(COMMA,__anonymous_10) -> IDENT COMMA . separated_nonempty_list(COMMA,__anonymous_10) [ SUP ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

Expecting "Function generic identifier"

modul: FUNCTION IDENT INF IDENT SUP XOR
##
## Ends in an error in state: 520.
##
## function_decl -> FUNCTION IDENT option(__anonymous_11) . LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ktype) fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT option(__anonymous_11)
##

Expecting "("

modul: FUNCTION IDENT LPARENT XOR
##
## Ends in an error in state: 521.
##
## function_decl -> FUNCTION IDENT option(__anonymous_11) LPARENT . loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ktype) fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT option(__anonymous_11) LPARENT
##

Expecting ")" or "Parameter identifier"

modul: FUNCTION IDENT LPARENT IDENT XOR
##
## Ends in an error in state: 395.
##
## separated_nonempty_list(COMMA,__anonymous_12) -> IDENT . COLON ktype [ RPARENT ]
## separated_nonempty_list(COMMA,__anonymous_12) -> IDENT . COLON ktype COMMA separated_nonempty_list(COMMA,__anonymous_12) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting ":"

modul: FUNCTION IDENT LPARENT IDENT COLON XOR
##
## Ends in an error in state: 396.
##
## separated_nonempty_list(COMMA,__anonymous_12) -> IDENT COLON . ktype [ RPARENT ]
## separated_nonempty_list(COMMA,__anonymous_12) -> IDENT COLON . ktype COMMA separated_nonempty_list(COMMA,__anonymous_12) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

Expecting "Type"



modul: FUNCTION IDENT LPARENT RPARENT XOR
##
## Ends in an error in state: 523.
##
## function_decl -> FUNCTION IDENT option(__anonymous_11) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT . option(ktype) fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT option(__anonymous_11) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT
##

Expecting "Return type", "=" or "{"


modul: EXTERNAL XOR
##
## Ends in an error in state: 526.
##
## external_func_decl -> EXTERNAL . IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT option(ctype) option(__anonymous_4) option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL
##

Expecting "identifier"

modul: EXTERNAL IDENT XOR
##
## Ends in an error in state: 527.
##
## external_func_decl -> EXTERNAL IDENT . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT option(ctype) option(__anonymous_4) option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT
##

Expecting "("

modul: EXTERNAL IDENT LPARENT XOR
##
## Ends in an error in state: 528.
##
## external_func_decl -> EXTERNAL IDENT LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT option(ctype) option(__anonymous_4) option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT
##

Expecting "_" or "parameter name"

modul: EXTERNAL IDENT LPARENT SEMICOLON XOR
##
## Ends in an error in state: 410.
##
## option(__anonymous_3) -> SEMICOLON . TRIPLEDOT [ RPARENT ]
##
## The known suffix of the stack is as follows:
## SEMICOLON
##

Expecting "..."

modul: EXTERNAL IDENT LPARENT SEMICOLON TRIPLEDOT XOR
##
## Ends in an error in state: 530.
##
## external_func_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) . RPARENT option(ctype) option(__anonymous_4) option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3)
##

Expecting ")"

modul: EXTERNAL IDENT LPARENT RPARENT XOR
##
## Ends in an error in state: 531.
##
## external_func_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT . option(ctype) option(__anonymous_4) option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT
##

Expecting "Return type", ";" or "="


modul: EXTERNAL IDENT LPARENT RPARENT EQUAL XOR
##
## Ends in an error in state: 415.
##
## option(__anonymous_4) -> EQUAL . String_lit [ SYSCALL STRUCT SEMICOLON OPERATOR FUNCTION EXTERNAL EOF ENUM CONST # ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

Expecting "C function name"

modul: EXTERNAL IDENT LPARENT RPARENT EQUAL String_lit XOR
##
## Ends in an error in state: 533.
##
## external_func_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT option(ctype) option(__anonymous_4) . option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT option(ctype) option(__anonymous_4)
##

Expecting ";"



modul: ENUM XOR
##
## Ends in an error in state: 535.
##
## enum_decl -> ENUM . IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## ENUM
##

Expecting "Enum name"

modul: ENUM IDENT XOR
##
## Ends in an error in state: 536.
##
## enum_decl -> ENUM IDENT . option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT
##

Expecting "(" or "{"


modul: ENUM IDENT LBRACE XOR
##
## Ends in an error in state: 538.
##
## enum_decl -> ENUM IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE . loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE
##

Expecting "variant name" or "}"

modul: ENUM IDENT LBRACE IDENT XOR
##
## Ends in an error in state: 424.
##
## enum_assoc -> IDENT . option(__anonymous_0) [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting "(", "}" or ","

modul: ENUM IDENT LBRACE IDENT LPARENT XOR
##
## Ends in an error in state: 425.
##
## option(__anonymous_0) -> LPARENT . separated_nonempty_list(COMMA,located(ktype)) RPARENT [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

Expecting "Type"



modul: ENUM IDENT LBRACE IDENT COMMA XOR
##
## Ends in an error in state: 433.
##
## separated_nonempty_list(COMMA,enum_assoc) -> enum_assoc COMMA . separated_nonempty_list(COMMA,enum_assoc) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## enum_assoc COMMA
##

Expecting "variant name"

modul: CONST XOR
##
## Ends in an error in state: 541.
##
## const_decl -> CONST . Constant EQUAL Integer_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
## const_decl -> CONST . Constant EQUAL String_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
## const_decl -> CONST . Constant EQUAL Float_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST
##

Expecting "Constant name"

modul: CONST Constant XOR
##
## Ends in an error in state: 542.
##
## const_decl -> CONST Constant . EQUAL Integer_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
## const_decl -> CONST Constant . EQUAL String_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
## const_decl -> CONST Constant . EQUAL Float_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant
##

Expecting "="

modul: CONST Constant EQUAL XOR
##
## Ends in an error in state: 543.
##
## const_decl -> CONST Constant EQUAL . Integer_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
## const_decl -> CONST Constant EQUAL . String_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
## const_decl -> CONST Constant EQUAL . Float_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant EQUAL
##

Expecting "Integer", "Float" or "String"

modul: CONST Constant EQUAL String_lit XOR
##
## Ends in an error in state: 544.
##
## const_decl -> CONST Constant EQUAL String_lit . option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant EQUAL String_lit
##

Expecting ";"

modul: CONST Constant EQUAL Integer_lit XOR
##
## Ends in an error in state: 546.
##
## const_decl -> CONST Constant EQUAL Integer_lit . option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant EQUAL Integer_lit
##

Expecting ";"

modul: CONST Constant EQUAL Float_lit XOR
##
## Ends in an error in state: 548.
##
## const_decl -> CONST Constant EQUAL Float_lit . option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant EQUAL Float_lit
##

Expecting ";"

modul: ENUM IDENT LBRACE RBRACE XOR
##
## Ends in an error in state: 553.
##
## list(module_nodes) -> module_nodes . list(module_nodes) [ EOF ]
##
## The known suffix of the stack is as follows:
## module_nodes
##

Expecting "struct", "enum", "syscall", "fn", "const", "external", "operator"










modul: ENUM IDENT LPARENT XOR
##
## Ends in an error in state: 54.
##
## option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) -> LPARENT . separated_nonempty_list(COMMA,located(IDENT)) RPARENT [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

Expecting "identifier"

modul: ENUM IDENT LPARENT IDENT XOR
##
## Ends in an error in state: 55.
##
## separated_nonempty_list(COMMA,located(IDENT)) -> IDENT . [ RPARENT ]
## separated_nonempty_list(COMMA,located(IDENT)) -> IDENT . COMMA separated_nonempty_list(COMMA,located(IDENT)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting "(" or "."

modul: ENUM IDENT LPARENT IDENT COMMA XOR
##
## Ends in an error in state: 56.
##
## separated_nonempty_list(COMMA,located(IDENT)) -> IDENT COMMA . separated_nonempty_list(COMMA,located(IDENT)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

Expecting "bound variable"

modul: STRUCT IDENT LPARENT IDENT RPARENT XOR
##
## Ends in an error in state: 484.
##
## struct_decl -> STRUCT IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) . LBRACE loption(separated_nonempty_list(COMMA,__anonymous_1)) RBRACE [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT))
##

Expecting "{"


modul: ENUM IDENT LPARENT IDENT RPARENT XOR
##
## Ends in an error in state: 537.
##
## enum_decl -> ENUM IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) . LBRACE loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT))
##

Expecting "{"








modul: EXTERNAL IDENT LPARENT IDENT XOR
##
## Ends in an error in state: 37.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> IDENT . COLON ctype [ SEMICOLON RPARENT ]
## separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> IDENT . COLON ctype COMMA separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) [ SEMICOLON RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting ":"
Hint: Maybe you have forgotten the parameter name

modul: EXTERNAL IDENT LPARENT IDENT COLON XOR
##
## Ends in an error in state: 38.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> IDENT COLON . ctype [ SEMICOLON RPARENT ]
## separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> IDENT COLON . ctype COMMA separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) [ SEMICOLON RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

Expecting "C type"

















modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY XOR XOR
##
## Ends in an error in state: 152.
##
## expr -> expr XOR . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr XOR
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY XOR EMPTY WILDCARD
##
## Ends in an error in state: 153.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr XOR expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr XOR expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY SUPEQ XOR
##
## Ends in an error in state: 154.
##
## expr -> expr SUPEQ . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr SUPEQ
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY SUPEQ EMPTY WILDCARD
##
## Ends in an error in state: 155.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr SUPEQ expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr SUPEQ expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY SHIFTRIGHT XOR
##
## Ends in an error in state: 156.
##
## expr -> expr SHIFTRIGHT . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr SHIFTRIGHT
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY SHIFTRIGHT EMPTY WILDCARD
##
## Ends in an error in state: 157.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr SHIFTRIGHT expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr SHIFTRIGHT expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY PLUS XOR
##
## Ends in an error in state: 158.
##
## expr -> expr PLUS . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY PLUS EMPTY WILDCARD
##
## Ends in an error in state: 159.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr PLUS expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY MULT XOR
##
## Ends in an error in state: 160.
##
## expr -> expr MULT . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr MULT
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY MULT EMPTY WILDCARD
##
## Ends in an error in state: 161.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr MULT expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr MULT expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY DOT XOR
##
## Ends in an error in state: 170.
##
## expr -> expr DOT . Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr DOT . IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

Expecting "field name"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY MOD XOR
##
## Ends in an error in state: 168.
##
## expr -> expr MOD . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr MOD
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY MOD EMPTY WILDCARD
##
## Ends in an error in state: 169.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr MOD expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr MOD expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY DIV XOR
##
## Ends in an error in state: 175.
##
## expr -> expr DIV . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY DIV EMPTY WILDCARD
##
## Ends in an error in state: 176.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr DIV expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr DIV expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY MINUS XOR
##
## Ends in an error in state: 173.
##
## expr -> expr MINUS . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY MINUS EMPTY WILDCARD
##
## Ends in an error in state: 174.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr MINUS expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY SHIFTLEFT XOR
##
## Ends in an error in state: 166.
##
## expr -> expr SHIFTLEFT . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr SHIFTLEFT
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY SHIFTLEFT EMPTY WILDCARD
##
## Ends in an error in state: 167.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr SHIFTLEFT expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr SHIFTLEFT expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY SUP XOR
##
## Ends in an error in state: 164.
##
## expr -> expr SUP . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr SUP
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY SUP EMPTY WILDCARD
##
## Ends in an error in state: 165.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr SUP expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr SUP expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY INFEQ XOR
##
## Ends in an error in state: 194.
##
## expr -> expr INFEQ . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr INFEQ
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY INFEQ EMPTY WILDCARD
##
## Ends in an error in state: 195.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr INFEQ expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr INFEQ expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY INF XOR
##
## Ends in an error in state: 196.
##
## expr -> expr INF . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr INF
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY INF EMPTY WILDCARD
##
## Ends in an error in state: 197.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr INF expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr INF expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY DOUBLEQUAL XOR
##
## Ends in an error in state: 198.
##
## expr -> expr DOUBLEQUAL . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr DOUBLEQUAL
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY DOUBLEQUAL EMPTY WILDCARD
##
## Ends in an error in state: 199.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr DOUBLEQUAL expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr DOUBLEQUAL expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY DIF XOR
##
## Ends in an error in state: 200.
##
## expr -> expr DIF . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr DIF
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY DIF EMPTY WILDCARD
##
## Ends in an error in state: 201.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr DIF expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr DIF expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY AMPERSAND XOR
##
## Ends in an error in state: 202.
##
## expr -> expr AMPERSAND . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr AMPERSAND
##

Expecting "<expression>"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY AMPERSAND EMPTY WILDCARD
##
## Ends in an error in state: 203.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr AMPERSAND expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr AMPERSAND expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY PIPESUP XOR
##
## Ends in an error in state: 178.
##
## expr -> expr PIPESUP . function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr PIPESUP
##

Expecting "expression"







modul: FUNCTION IDENT LPARENT RPARENT EQUAL LPARENT EMPTY SYSCALL
##
## Ends in an error in state: 189.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . [ RSQBRACE RPARENT ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . COMMA separated_nonempty_list(COMMA,located(expr)) [ RSQBRACE RPARENT ]
##
## The known suffix of the stack is as follows:
## expr
##

Expecting "binary operator", "," or ")"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY PIPE XOR
##
## Ends in an error in state: 190.
##
## expr -> expr PIPE . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr PIPE
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY PIPE EMPTY WILDCARD
##
## Ends in an error in state: 191.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr PIPE expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr PIPE expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY OR XOR
##
## Ends in an error in state: 204.
##
## expr -> expr OR . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr OR
##

Expecting

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY OR EMPTY WILDCARD
##
## Ends in an error in state: 205.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr OR expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr OR expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY AND XOR
##
## Ends in an error in state: 208.
##
## expr -> expr AND . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr AND
##

Expecting "expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY AND EMPTY WILDCARD
##
## Ends in an error in state: 209.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr AND expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr AND expr
##

Expecting "binary operator", "new statement" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL LPARENT EMPTY COMMA XOR
##
## Ends in an error in state: 212.
##
## separated_nonempty_list(COMMA,located(expr)) -> expr COMMA . separated_nonempty_list(COMMA,located(expr)) [ RSQBRACE RPARENT ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Expecting "expression"






modul: FUNCTION IDENT LPARENT RPARENT EQUAL CASES LBRACE OF EMPTY SYSCALL
##
## Ends in an error in state: 229.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## nonempty_list(__anonymous_15) -> OF expr . ARROWFUNC kbody [ RBRACE ELSE ]
## nonempty_list(__anonymous_15) -> OF expr . ARROWFUNC kbody nonempty_list(__anonymous_15) [ RBRACE ELSE ]
##
## The known suffix of the stack is as follows:
## OF expr
##

Expecting "binary operator" or " =>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL CASES LBRACE OF EMPTY ARROWFUNC XOR
##
## Ends in an error in state: 230.
##
## nonempty_list(__anonymous_15) -> OF expr ARROWFUNC . kbody [ RBRACE ELSE ]
## nonempty_list(__anonymous_15) -> OF expr ARROWFUNC . kbody nonempty_list(__anonymous_15) [ RBRACE ELSE ]
##
## The known suffix of the stack is as follows:
## OF expr ARROWFUNC
##

Expecting "{"




modul: FUNCTION IDENT LPARENT RPARENT EQUAL IF LPARENT EMPTY SYSCALL
##
## Ends in an error in state: 265.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> IF LPARENT expr . RPARENT kbody option(preceded(ELSE,kbody)) [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## IF LPARENT expr
##

Expecting "binary operator", "." or ")"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IF LPARENT EMPTY RPARENT XOR
##
## Ends in an error in state: 266.
##
## expr -> IF LPARENT expr RPARENT . kbody option(preceded(ELSE,kbody)) [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## IF LPARENT expr RPARENT
##

Expecting "{"



modul: FUNCTION IDENT LPARENT RPARENT EQUAL MINUS EMPTY WILDCARD
##
## Ends in an error in state: 319.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> MINUS expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## MINUS expr
##

Expecting "binary operator" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL NOT EMPTY WILDCARD
##
## Ends in an error in state: 320.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> NOT expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## NOT expr
##

Expecting "binary operator" or "end of function"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SIZEOF LPARENT COLON EMPTY SYSCALL
##
## Ends in an error in state: 321.
##
## expr -> SIZEOF LPARENT COLON expr . RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPARENT COLON expr
##

Expecting "binary operator" or ")"


modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT EMPTY SYSCALL
##
## Ends in an error in state: 325.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> SWITCH LPARENT expr . RPARENT LBRACE nonempty_list(__anonymous_17) option(__anonymous_18) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## SWITCH LPARENT expr
##

Expecting "binary operator" or "("

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT EMPTY RPARENT XOR
##
## Ends in an error in state: 326.
##
## expr -> SWITCH LPARENT expr RPARENT . LBRACE nonempty_list(__anonymous_17) option(__anonymous_18) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## SWITCH LPARENT expr RPARENT
##

Expecting "("

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT EMPTY RPARENT LBRACE XOR
##
## Ends in an error in state: 327.
##
## expr -> SWITCH LPARENT expr RPARENT LBRACE . nonempty_list(__anonymous_17) option(__anonymous_18) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## SWITCH LPARENT expr RPARENT LBRACE
##

Expecting "." or "_"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT EMPTY RPARENT LBRACE DOT XOR
##
## Ends in an error in state: 328.
##
## s_case -> DOT . IDENT [ PIPE ARROWFUNC ]
## s_case -> DOT . IDENT LPARENT separated_nonempty_list(COMMA,__anonymous_21) RPARENT [ PIPE ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## DOT
##

Expecting "identifier"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT EMPTY RPARENT LBRACE DOT IDENT XOR
##
## Ends in an error in state: 329.
##
## s_case -> DOT IDENT . [ PIPE ARROWFUNC ]
## s_case -> DOT IDENT . LPARENT separated_nonempty_list(COMMA,__anonymous_21) RPARENT [ PIPE ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## DOT IDENT
##

Expecting "|" or "("

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT EMPTY RPARENT LBRACE DOT IDENT LPARENT XOR
##
## Ends in an error in state: 330.
##
## s_case -> DOT IDENT LPARENT . separated_nonempty_list(COMMA,__anonymous_21) RPARENT [ PIPE ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## DOT IDENT LPARENT
##

Expecting "identifier"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT EMPTY RPARENT LBRACE DOT IDENT LPARENT WILDCARD XOR
##
## Ends in an error in state: 331.
##
## separated_nonempty_list(COMMA,__anonymous_21) -> WILDCARD . [ RPARENT ]
## separated_nonempty_list(COMMA,__anonymous_21) -> WILDCARD . COMMA separated_nonempty_list(COMMA,__anonymous_21) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## WILDCARD
##

Expecting ")" or ","

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT EMPTY RPARENT LBRACE DOT IDENT LPARENT WILDCARD COMMA XOR
##
## Ends in an error in state: 332.
##
## separated_nonempty_list(COMMA,__anonymous_21) -> WILDCARD COMMA . separated_nonempty_list(COMMA,__anonymous_21) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## WILDCARD COMMA
##

Expecting "identifier ?? to check"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT EMPTY RPARENT LBRACE DOT IDENT LPARENT IDENT XOR
##
## Ends in an error in state: 333.
##
## separated_nonempty_list(COMMA,__anonymous_21) -> IDENT . [ RPARENT ]
## separated_nonempty_list(COMMA,__anonymous_21) -> IDENT . COMMA separated_nonempty_list(COMMA,__anonymous_21) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting ")" or ","

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT EMPTY RPARENT LBRACE DOT IDENT LPARENT IDENT COMMA XOR
##
## Ends in an error in state: 334.
##
## separated_nonempty_list(COMMA,__anonymous_21) -> IDENT COMMA . separated_nonempty_list(COMMA,__anonymous_21) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

Expecting "identifier"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT EMPTY RPARENT LBRACE DOT IDENT ARROWFUNC XOR
##
## Ends in an error in state: 340.
##
## nonempty_list(__anonymous_17) -> separated_nonempty_list(PIPE,s_case) ARROWFUNC . kbody [ WILDCARD RBRACE ]
## nonempty_list(__anonymous_17) -> separated_nonempty_list(PIPE,s_case) ARROWFUNC . kbody nonempty_list(__anonymous_17) [ WILDCARD RBRACE ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(PIPE,s_case) ARROWFUNC
##

Expecting "{"


modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT EMPTY RPARENT LBRACE DOT IDENT LPARENT IDENT RPARENT XOR
##
## Ends in an error in state: 342.
##
## separated_nonempty_list(PIPE,s_case) -> s_case . [ ARROWFUNC ]
## separated_nonempty_list(PIPE,s_case) -> s_case . PIPE separated_nonempty_list(PIPE,s_case) [ ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## s_case
##

Expecting "|" or "=>"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT EMPTY RPARENT LBRACE DOT IDENT PIPE XOR
##
## Ends in an error in state: 343.
##
## separated_nonempty_list(PIPE,s_case) -> s_case PIPE . separated_nonempty_list(PIPE,s_case) [ ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## s_case PIPE
##

Expecting ".`case name`"




modul: FUNCTION IDENT LPARENT RPARENT LBRACE MULT IDENT EQUAL EMPTY SYSCALL
##
## Ends in an error in state: 355.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## statement -> MULT separated_nonempty_list(DOT,located(IDENT)) EQUAL expr . SEMICOLON [ VAR RBRACE MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## MULT separated_nonempty_list(DOT,located(IDENT)) EQUAL expr
##

Expecting "binary operator" or ";"

modul: FUNCTION IDENT LPARENT RPARENT LBRACE IDENT EQUAL EMPTY SYSCALL
##
## Ends in an error in state: 242.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## statement -> separated_nonempty_list(DOT,located(IDENT)) EQUAL expr . SEMICOLON [ VAR RBRACE MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(DOT,located(IDENT)) EQUAL expr
##

Expecting "binary operator" or 

modul: FUNCTION IDENT LPARENT RPARENT LBRACE DISCARD EMPTY SYSCALL
##
## Ends in an error in state: 236.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## statement -> DISCARD expr . SEMICOLON [ VAR RBRACE MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## DISCARD expr
##

Expecting "binary operator" or ";"
Hint: Maybe you have forgotten the ";"

modul: FUNCTION IDENT LPARENT RPARENT LBRACE DISCARD EMPTY SEMICOLON XOR
##
## Ends in an error in state: 239.
##
## list(located(statement)) -> statement . list(located(statement)) [ RBRACE DOLLAR ]
##
## The known suffix of the stack is as follows:
## statement
##

Expecting "const", "*", "identifier" or "var


modul: FUNCTION IDENT LPARENT RPARENT LBRACE CONST IDENT EQUAL EMPTY SYSCALL
##
## Ends in an error in state: 251.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## statement -> declarer IDENT option(__anonymous_9) EQUAL expr . SEMICOLON [ VAR RBRACE MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## declarer IDENT option(__anonymous_9) EQUAL expr
##

Expecting "binary operator" or ";"
Hint: Maybe you have forgotten the ";"


modul: FUNCTION IDENT LPARENT RPARENT EQUAL EMPTY RPARENT
##
## Ends in an error in state: 503.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST AND AMPERSAND ]
## fun_kbody -> EQUAL expr . option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EQUAL expr
##

Expecting "binary operator", "new statement" or "end of function"













modul: EXTERNAL IDENT LPARENT WILDCARD XOR
##
## Ends in an error in state: 5.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> WILDCARD . COLON ctype [ SEMICOLON RPARENT ]
## separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> WILDCARD . COLON ctype COMMA separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) [ SEMICOLON RPARENT ]
##
## The known suffix of the stack is as follows:
## WILDCARD
##

Expecting ":"

modul: EXTERNAL IDENT LPARENT WILDCARD COLON XOR
##
## Ends in an error in state: 6.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> WILDCARD COLON . ctype [ SEMICOLON RPARENT ]
## separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> WILDCARD COLON . ctype COMMA separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) [ SEMICOLON RPARENT ]
##
## The known suffix of the stack is as follows:
## WILDCARD COLON
##

Expecting "<c type>"

modul: SYSCALL IDENT LPARENT RPARENT Module_IDENT XOR
##
## Ends in an error in state: 7.
##
## separated_nonempty_list(DOUBLECOLON,Module_IDENT) -> Module_IDENT . [ DOT ]
## separated_nonempty_list(DOUBLECOLON,Module_IDENT) -> Module_IDENT . DOUBLECOLON separated_nonempty_list(DOUBLECOLON,Module_IDENT) [ DOT ]
##
## The known suffix of the stack is as follows:
## Module_IDENT
##

Expecting "." or "::"

modul: SYSCALL IDENT LPARENT RPARENT Module_IDENT DOUBLECOLON XOR
##
## Ends in an error in state: 8.
##
## separated_nonempty_list(DOUBLECOLON,Module_IDENT) -> Module_IDENT DOUBLECOLON . separated_nonempty_list(DOUBLECOLON,Module_IDENT) [ DOT ]
##
## The known suffix of the stack is as follows:
## Module_IDENT DOUBLECOLON
##

Expecting "Module name"

modul: SYSCALL IDENT LPARENT RPARENT MULT XOR
##
## Ends in an error in state: 10.
##
## ctype -> MULT . ktype [ SYSCALL STRUCT SEMICOLON RPARENT OPERATOR FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
##
## The known suffix of the stack is as follows:
## MULT
##

Expecting "<type>"

modul: FUNCTION IDENT LPARENT RPARENT MULT XOR
##
## Ends in an error in state: 11.
##
## ktype -> MULT . ktype [ SYSCALL SUP STRUCT SEMICOLON RPARENT RBRACE OPERATOR LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
##
## The known suffix of the stack is as follows:
## MULT
##

Expecting "<type>"

modul: FUNCTION IDENT LPARENT RPARENT LPARENT XOR
##
## Ends in an error in state: 12.
##
## ktype -> LPARENT . separated_nonempty_list(COMMA,located(ktype)) RPARENT [ SYSCALL SUP STRUCT SEMICOLON RPARENT RBRACE OPERATOR LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

Expecting "<type>"

modul: FUNCTION IDENT LPARENT RPARENT LPARENT IDENT SUP
##
## Ends in an error in state: 29.
##
## ktype -> LPARENT separated_nonempty_list(COMMA,located(ktype)) . RPARENT [ SYSCALL SUP STRUCT SEMICOLON RPARENT RBRACE OPERATOR LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
##
## The known suffix of the stack is as follows:
## LPARENT separated_nonempty_list(COMMA,located(ktype))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
## In state 24, spurious reduction of production separated_nonempty_list(COMMA,located(ktype)) -> ktype
##

Expecting ")"

modul: FUNCTION IDENT LPARENT RPARENT Module_IDENT DOT XOR
##
## Ends in an error in state: 19.
##
## ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) . IDENT [ SYSCALL SUP STRUCT SEMICOLON RPARENT RBRACE OPERATOR LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
## ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) . IDENT LPARENT separated_nonempty_list(COMMA,located(ktype)) RPARENT [ SYSCALL SUP STRUCT SEMICOLON RPARENT RBRACE OPERATOR LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT))
##

Expecting "identifier"

modul: FUNCTION IDENT LPARENT RPARENT IDENT XOR
##
## Ends in an error in state: 20.
##
## ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT . [ SYSCALL SUP STRUCT SEMICOLON RPARENT RBRACE OPERATOR LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
## ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT . LPARENT separated_nonempty_list(COMMA,located(ktype)) RPARENT [ SYSCALL SUP STRUCT SEMICOLON RPARENT RBRACE OPERATOR LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting "end of type identifier" or "("

modul: FUNCTION IDENT LPARENT RPARENT IDENT LPARENT XOR
##
## Ends in an error in state: 21.
##
## ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT LPARENT . separated_nonempty_list(COMMA,located(ktype)) RPARENT [ SYSCALL SUP STRUCT SEMICOLON RPARENT RBRACE OPERATOR LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT LPARENT
##

Expecting "parametric type"

modul: FUNCTION IDENT LPARENT RPARENT IDENT LPARENT IDENT SUP
##
## Ends in an error in state: 22.
##
## ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT LPARENT separated_nonempty_list(COMMA,located(ktype)) . RPARENT [ SYSCALL SUP STRUCT SEMICOLON RPARENT RBRACE OPERATOR LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT LPARENT separated_nonempty_list(COMMA,located(ktype))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
## In state 24, spurious reduction of production separated_nonempty_list(COMMA,located(ktype)) -> ktype
##

Expecting ")"

modul: ENUM IDENT LBRACE IDENT LPARENT IDENT SYSCALL
##
## Ends in an error in state: 24.
##
## separated_nonempty_list(COMMA,located(ktype)) -> ktype . [ SUP RPARENT ]
## separated_nonempty_list(COMMA,located(ktype)) -> ktype . COMMA separated_nonempty_list(COMMA,located(ktype)) [ SUP RPARENT ]
##
## The known suffix of the stack is as follows:
## ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting ",", ">" or ")"

modul: ENUM IDENT LBRACE IDENT LPARENT IDENT COMMA XOR
##
## Ends in an error in state: 25.
##
## separated_nonempty_list(COMMA,located(ktype)) -> ktype COMMA . separated_nonempty_list(COMMA,located(ktype)) [ SUP RPARENT ]
##
## The known suffix of the stack is as follows:
## ktype COMMA
##

Expecting "<type>"

modul: SYSCALL IDENT LPARENT RPARENT Module_IDENT DOT XOR
##
## Ends in an error in state: 33.
##
## ctype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) . IDENT [ SYSCALL STRUCT SEMICOLON RPARENT OPERATOR FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT))
##

Expecting "<identifier>"

modul: EXTERNAL IDENT LPARENT WILDCARD COLON IDENT XOR
##
## Ends in an error in state: 35.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> WILDCARD COLON ctype . [ SEMICOLON RPARENT ]
## separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> WILDCARD COLON ctype . COMMA separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) [ SEMICOLON RPARENT ]
##
## The known suffix of the stack is as follows:
## WILDCARD COLON ctype
##

Expecting ",", ";" or ")" 

modul: EXTERNAL IDENT LPARENT WILDCARD COLON IDENT COMMA XOR
##
## Ends in an error in state: 36.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> WILDCARD COLON ctype COMMA . separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) [ SEMICOLON RPARENT ]
##
## The known suffix of the stack is as follows:
## WILDCARD COLON ctype COMMA
##

Expecting "_" or "<parameter identifier>"

modul: EXTERNAL IDENT LPARENT IDENT COLON IDENT XOR
##
## Ends in an error in state: 39.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> IDENT COLON ctype . [ SEMICOLON RPARENT ]
## separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> IDENT COLON ctype . COMMA separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) [ SEMICOLON RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT COLON ctype
##

Expecting ",", ";" or ")" 

modul: EXTERNAL IDENT LPARENT IDENT COLON IDENT COMMA XOR
##
## Ends in an error in state: 40.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> IDENT COLON ctype COMMA . separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) [ SEMICOLON RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT COLON ctype COMMA
##

Expecting "_" or "<parameter identifier>"

modul: SYSCALL IDENT LPARENT IDENT COLON IDENT SEMICOLON
##
## Ends in an error in state: 475.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) . RPARENT option(ctype) EQUAL Integer_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> IDENT COLON ctype
## In state 43, spurious reduction of production loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) -> separated_nonempty_list(COMMA,typed_parameter_loc(ctype))
##

Expecting ")"

modul: SYSCALL IDENT LPARENT RPARENT IDENT XOR
##
## Ends in an error in state: 477.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) . EQUAL Integer_lit option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype)
##

Expecting "="

modul: STRUCT IDENT LBRACE IDENT COLON IDENT SYSCALL
##
## Ends in an error in state: 64.
##
## separated_nonempty_list(COMMA,__anonymous_1) -> IDENT COLON ktype . [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_1) -> IDENT COLON ktype . COMMA separated_nonempty_list(COMMA,__anonymous_1) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting "{" or ","

modul: STRUCT IDENT LBRACE IDENT COLON IDENT COMMA XOR
##
## Ends in an error in state: 65.
##
## separated_nonempty_list(COMMA,__anonymous_1) -> IDENT COLON ktype COMMA . separated_nonempty_list(COMMA,__anonymous_1) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON ktype COMMA
##

Expecting "<identifier>"

modul: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT COLON IDENT SYSCALL
##
## Ends in an error in state: 495.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype . RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting ")"

modul: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT COLON IDENT RPARENT XOR
##
## Ends in an error in state: 496.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT . ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT
##

Expecting "<type>"

modul: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT COLON IDENT RPARENT IDENT SYSCALL
##
## Ends in an error in state: 497.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT ktype . fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting "=" or "{"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Module_IDENT DOT XOR
##
## Ends in an error in state: 140.
##
## expr -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) . IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) . Constant [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) . IDENT LBRACE loption(separated_nonempty_list(COMMA,__anonymous_14)) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) . enum_resolver IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(expr)),RPARENT)) [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## function_call -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) . IDENT option(__anonymous_7) LPARENT loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT))
##

Expecting "<identifier>", "<constant identifier>" or "<enum variant>"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT WILDCARD
##
## Ends in an error in state: 141.
##
## enum_resolver -> IDENT . DOUBLECOLON [ IDENT ]
## expr -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT . LBRACE loption(separated_nonempty_list(COMMA,__anonymous_14)) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## function_call -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT . option(__anonymous_7) LPARENT loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting "<binary operator>" "<", "{" "(" or ";"
Hint: Maybe you have forgotten the ";"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT LBRACE XOR
##
## Ends in an error in state: 142.
##
## expr -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT LBRACE . loption(separated_nonempty_list(COMMA,__anonymous_14)) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT LBRACE
##

Expecting "<enum associated expression>"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT LBRACE IDENT XOR
##
## Ends in an error in state: 143.
##
## separated_nonempty_list(COMMA,__anonymous_14) -> IDENT . option(preceded(either_color_equal,located(expr))) [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_14) -> IDENT . option(preceded(either_color_equal,located(expr))) COMMA separated_nonempty_list(COMMA,__anonymous_14) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting ":" or "="

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT LBRACE IDENT COLON XOR
##
## Ends in an error in state: 149.
##
## option(preceded(either_color_equal,located(expr))) -> either_color_equal . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## either_color_equal
##

Expecting "<expression>"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT LBRACE IDENT COLON Constant SYSCALL
##
## Ends in an error in state: 151.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## option(preceded(either_color_equal,located(expr))) -> either_color_equal expr . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## either_color_equal expr
##

Expecting "<binary operator>", "}" or ","

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant PIPESUP Module_IDENT DOT XOR
##
## Ends in an error in state: 179.
##
## function_call -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) . IDENT option(__anonymous_7) LPARENT loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT))
##

Expecting "<identifier>"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant PIPESUP IDENT XOR
##
## Ends in an error in state: 180.
##
## function_call -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT . option(__anonymous_7) LPARENT loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting "<" or "("

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant PIPESUP IDENT DOUBLECOLON XOR
##
## Ends in an error in state: 181.
##
## option(__anonymous_7) -> DOUBLECOLON . INF separated_nonempty_list(COMMA,located(ktype)) SUP [ LPARENT ]
##
## The known suffix of the stack is as follows:
## DOUBLECOLON
##

Expecting "<"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT DOUBLECOLON INF XOR
##
## Ends in an error in state: 182.
##
## option(__anonymous_7) -> DOUBLECOLON INF . separated_nonempty_list(COMMA,located(ktype)) SUP [ LPARENT ]
##
## The known suffix of the stack is as follows:
## DOUBLECOLON INF
##

Expecting "<type>"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT DOUBLECOLON INF IDENT RPARENT
##
## Ends in an error in state: 183.
##
## option(__anonymous_7) -> DOUBLECOLON INF separated_nonempty_list(COMMA,located(ktype)) . SUP [ LPARENT ]
##
## The known suffix of the stack is as follows:
## DOUBLECOLON INF separated_nonempty_list(COMMA,located(ktype))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
## In state 24, spurious reduction of production separated_nonempty_list(COMMA,located(ktype)) -> ktype
##

Expecting ">"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT DOUBLECOLON INF IDENT SUP XOR
##
## Ends in an error in state: 185.
##
## function_call -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT option(__anonymous_7) . LPARENT loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT option(__anonymous_7)
##

Expecting "(" 

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT LPARENT XOR
##
## Ends in an error in state: 186.
##
## function_call -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT option(__anonymous_7) LPARENT . loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT option(__anonymous_7) LPARENT
##

Expecting "<expression>" or ")"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT LBRACE IDENT COLON Constant COMMA XOR
##
## Ends in an error in state: 147.
##
## separated_nonempty_list(COMMA,__anonymous_14) -> IDENT option(preceded(either_color_equal,located(expr))) COMMA . separated_nonempty_list(COMMA,__anonymous_14) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT option(preceded(either_color_equal,located(expr))) COMMA
##

Expecting "<field name>"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT DOUBLECOLON XOR
##
## Ends in an error in state: 218.
##
## enum_resolver -> IDENT DOUBLECOLON . [ IDENT ]
## option(__anonymous_7) -> DOUBLECOLON . INF separated_nonempty_list(COMMA,located(ktype)) SUP [ LPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT DOUBLECOLON
##

Expecting "<identifier>" or "<"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SIZEOF LPARENT IDENT SYSCALL
##
## Ends in an error in state: 323.
##
## expr -> SIZEOF LPARENT ktype . RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPARENT ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting ")"

modul: FUNCTION IDENT LPARENT RPARENT LBRACE CONST IDENT COLON IDENT SYSCALL
##
## Ends in an error in state: 249.
##
## statement -> declarer IDENT option(__anonymous_9) . EQUAL expr SEMICOLON [ VAR RBRACE MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## declarer IDENT option(__anonymous_9)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
## In state 248, spurious reduction of production option(__anonymous_9) -> COLON ktype
##

Expecting "="

modul: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT SYSCALL
##
## Ends in an error in state: 510.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype . COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting ","

modul: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA XOR
##
## Ends in an error in state: 511.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA . IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA
##

Expecting "<identifier>"

modul: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT XOR
##
## Ends in an error in state: 512.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT . COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT
##

Expecting ":"

modul: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT COLON XOR
##
## Ends in an error in state: 513.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON . ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON
##

Expecting "<type>"

modul: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT COLON IDENT SYSCALL
##
## Ends in an error in state: 514.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype . RPARENT ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting ")"

modul: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT COLON IDENT RPARENT XOR
##
## Ends in an error in state: 515.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT . ktype fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT
##

Expecting "<type>"

modul: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT COLON IDENT RPARENT IDENT SYSCALL
##
## Ends in an error in state: 516.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype . fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting "=" or "{"
 
modul: FUNCTION IDENT LPARENT IDENT COLON IDENT SYSCALL
##
## Ends in an error in state: 397.
##
## separated_nonempty_list(COMMA,__anonymous_12) -> IDENT COLON ktype . [ RPARENT ]
## separated_nonempty_list(COMMA,__anonymous_12) -> IDENT COLON ktype . COMMA separated_nonempty_list(COMMA,__anonymous_12) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT COLON ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting "(" or ","

modul: FUNCTION IDENT LPARENT IDENT COLON IDENT COMMA XOR
##
## Ends in an error in state: 398.
##
## separated_nonempty_list(COMMA,__anonymous_12) -> IDENT COLON ktype COMMA . separated_nonempty_list(COMMA,__anonymous_12) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT COLON ktype COMMA
##

Expecting "<function parameter name>"

modul: FUNCTION IDENT LPARENT RPARENT IDENT SYSCALL
##
## Ends in an error in state: 524.
##
## function_decl -> FUNCTION IDENT option(__anonymous_11) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ktype) . fun_kbody [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT option(__anonymous_11) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ktype)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
## In state 405, spurious reduction of production option(ktype) -> ktype
##

Expecting "=" or "{"

modul: EXTERNAL IDENT LPARENT RPARENT IDENT XOR
##
## Ends in an error in state: 532.
##
## external_func_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT option(ctype) . option(__anonymous_4) option(SEMICOLON) [ SYSCALL STRUCT OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT option(ctype)
##

Expecting "=", ";" or "<end of external function>"

modul: ENUM IDENT LBRACE IDENT LPARENT IDENT SUP
##
## Ends in an error in state: 426.
##
## option(__anonymous_0) -> LPARENT separated_nonempty_list(COMMA,located(ktype)) . RPARENT [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT separated_nonempty_list(COMMA,located(ktype))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
## In state 24, spurious reduction of production separated_nonempty_list(COMMA,located(ktype)) -> ktype
##

Expecting ")"

modul: ENUM IDENT LBRACE IDENT LPARENT IDENT RPARENT XOR
##
## Ends in an error in state: 432.
##
## separated_nonempty_list(COMMA,enum_assoc) -> enum_assoc . [ RBRACE ]
## separated_nonempty_list(COMMA,enum_assoc) -> enum_assoc . COMMA separated_nonempty_list(COMMA,enum_assoc) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## enum_assoc
##

Expecting "}" or ","

modul: FUNCTION IDENT LPARENT RPARENT EQUAL WHILE XOR
##
## Ends in an error in state: 98.
##
## expr -> WHILE . LPARENT expr RPARENT kbody [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## WHILE
##

Expecting "("

modul: FUNCTION IDENT LPARENT RPARENT EQUAL WHILE LPARENT XOR
##
## Ends in an error in state: 99.
##
## expr -> WHILE LPARENT . expr RPARENT kbody [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## WHILE LPARENT
##

Expecting "boolean expression"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL WHILE LPARENT Constant SYSCALL
##
## Ends in an error in state: 352.
##
## expr -> WHILE LPARENT expr . RPARENT kbody [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## WHILE LPARENT expr
##

Expecting "<binary operator>" or ")"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL WHILE LPARENT Constant RPARENT XOR
##
## Ends in an error in state: 353.
##
## expr -> WHILE LPARENT expr RPARENT . kbody [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## WHILE LPARENT expr RPARENT
##

Expecting "{"

modul: FUNCTION IDENT LPARENT RPARENT LBRACE IDENT DOT XOR
##
## Ends in an error in state: 94.
##
## separated_nonempty_list(DOT,located(IDENT)) -> IDENT DOT . separated_nonempty_list(DOT,located(IDENT)) [ RPARENT EQUAL ]
##
## The known suffix of the stack is as follows:
## IDENT DOT
##

Expecting "<field>"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant FULLAND XOR
##
## Ends in an error in state: 206.
##
## expr -> expr FULLAND . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr FULLAND
##

Expecting "<expression>"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant FULLAND Constant WILDCARD
##
## Ends in an error in state: 207.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr FULLAND expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr FULLAND expr
##

Expecting "<binary operator>" or ")"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant FULLOR XOR
##
## Ends in an error in state: 210.
##
## expr -> expr FULLOR . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr FULLOR
##

Expecting "<expression>"

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant FULLOR Constant WILDCARD
##
## Ends in an error in state: 211.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr FULLOR expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr FULLOR expr
##

Expecting "<binary operator>" or ")"

iexpression_node: XOR
##
## Ends in an error in state: 0.
##
## iexpression_node' -> . iexpression_node [ # ]
##
## The known suffix of the stack is as follows:
##
##

Expecting "$", "*", "const", "var", "syscall", "enum", "struct", "operator"

iexpression_node: SYSCALL XOR
##
## Ends in an error in state: 2.
##
## syscall_decl -> SYSCALL . IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) EQUAL Integer_lit option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## SYSCALL
##

Expecting "<identifier>"

iexpression_node: SYSCALL IDENT XOR
##
## Ends in an error in state: 3.
##
## syscall_decl -> SYSCALL IDENT . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) EQUAL Integer_lit option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT
##

Expecting "("

iexpression_node: SYSCALL IDENT LPARENT XOR
##
## Ends in an error in state: 4.
##
## syscall_decl -> SYSCALL IDENT LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) EQUAL Integer_lit option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT
##

Expecting "<parameter name>" or ")"

iexpression_node: CONST IDENT COLON ARRAY XOR
##
## Ends in an error in state: 13.
##
## ktype -> ARRAY . LPARENT Integer_lit COLON ktype RPARENT [ SYSCALL SUP STRUCT SEMICOLON RPARENT RBRACE OPERATOR LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
##
## The known suffix of the stack is as follows:
## ARRAY
##

Expecting "("

iexpression_node: CONST IDENT COLON ARRAY LPARENT XOR
##
## Ends in an error in state: 14.
##
## ktype -> ARRAY LPARENT . Integer_lit COLON ktype RPARENT [ SYSCALL SUP STRUCT SEMICOLON RPARENT RBRACE OPERATOR LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
##
## The known suffix of the stack is as follows:
## ARRAY LPARENT
##

Expecting "<array size>"

iexpression_node: CONST IDENT COLON ARRAY LPARENT Integer_lit XOR
##
## Ends in an error in state: 15.
##
## ktype -> ARRAY LPARENT Integer_lit . COLON ktype RPARENT [ SYSCALL SUP STRUCT SEMICOLON RPARENT RBRACE OPERATOR LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
##
## The known suffix of the stack is as follows:
## ARRAY LPARENT Integer_lit
##

Expecting ":"

iexpression_node: CONST IDENT COLON ARRAY LPARENT Integer_lit COLON XOR
##
## Ends in an error in state: 16.
##
## ktype -> ARRAY LPARENT Integer_lit COLON . ktype RPARENT [ SYSCALL SUP STRUCT SEMICOLON RPARENT RBRACE OPERATOR LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
##
## The known suffix of the stack is as follows:
## ARRAY LPARENT Integer_lit COLON
##

Expecting "<type>"

iexpression_node: CONST IDENT COLON ARRAY LPARENT Integer_lit COLON IDENT SYSCALL
##
## Ends in an error in state: 27.
##
## ktype -> ARRAY LPARENT Integer_lit COLON ktype . RPARENT [ SYSCALL SUP STRUCT SEMICOLON RPARENT RBRACE OPERATOR LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA # ]
##
## The known suffix of the stack is as follows:
## ARRAY LPARENT Integer_lit COLON ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting ")"

iexpression_node: SYSCALL IDENT LPARENT IDENT COLON IDENT SEMICOLON
##
## Ends in an error in state: 44.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) . RPARENT option(ctype) EQUAL Integer_lit option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production separated_nonempty_list(COMMA,typed_parameter_loc(ctype)) -> IDENT COLON ctype
## In state 43, spurious reduction of production loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) -> separated_nonempty_list(COMMA,typed_parameter_loc(ctype))
##

Expecting ")"

iexpression_node: SYSCALL IDENT LPARENT RPARENT XOR
##
## Ends in an error in state: 45.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT . option(ctype) EQUAL Integer_lit option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT
##

Expection "<ctype>" or "="

iexpression_node: SYSCALL IDENT LPARENT RPARENT IDENT XOR
##
## Ends in an error in state: 46.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) . EQUAL Integer_lit option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype)
##

Expecting "="

iexpression_node: SYSCALL IDENT LPARENT RPARENT EQUAL XOR
##
## Ends in an error in state: 47.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) EQUAL . Integer_lit option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) EQUAL
##

Expecting "<syscall code>"

iexpression_node: SYSCALL IDENT LPARENT RPARENT EQUAL Integer_lit XOR
##
## Ends in an error in state: 48.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) EQUAL Integer_lit . option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) RPARENT option(ctype) EQUAL Integer_lit
##

Expecting ";" or "<new declaration>"

iexpression_node: STRUCT XOR
##
## Ends in an error in state: 52.
##
## struct_decl -> STRUCT . IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE loption(separated_nonempty_list(COMMA,__anonymous_1)) RBRACE [ # ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

Expecting "<struct identifier>"

iexpression_node: STRUCT IDENT XOR
##
## Ends in an error in state: 53.
##
## struct_decl -> STRUCT IDENT . option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE loption(separated_nonempty_list(COMMA,__anonymous_1)) RBRACE [ # ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT
##

Expecting "(" or "{" 

iexpression_node: STRUCT IDENT LPARENT IDENT RPARENT XOR
##
## Ends in an error in state: 60.
##
## struct_decl -> STRUCT IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) . LBRACE loption(separated_nonempty_list(COMMA,__anonymous_1)) RBRACE [ # ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT))
##

Expecting "{"

iexpression_node: STRUCT IDENT LBRACE XOR
##
## Ends in an error in state: 61.
##
## struct_decl -> STRUCT IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE . loption(separated_nonempty_list(COMMA,__anonymous_1)) RBRACE [ # ]
##
## The known suffix of the stack is as follows:
## STRUCT IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE
##

Expecting "<identifier>" or "}"

iexpression_node: OPERATOR WILDCARD
##
## Ends in an error in state: 70.
##
## operator_decl -> OPERATOR . binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ # ]
## operator_decl -> OPERATOR . LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR
##

Expecting "<binary operator>" or "(<unary operator>)"

iexpression_node: OPERATOR LPARENT XOR
##
## Ends in an error in state: 79.
##
## operator_decl -> OPERATOR LPARENT . unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT
##

Expecting "<unary operator>"

iexpression_node: OPERATOR LPARENT DOT MINUS XOR
##
## Ends in an error in state: 83.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol . RPARENT LPARENT IDENT COLON ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol
##

Expecting ")"

iexpression_node: OPERATOR LPARENT DOT MINUS RPARENT XOR
##
## Ends in an error in state: 84.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT . LPARENT IDENT COLON ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT
##

Expecting "("

iexpression_node: OPERATOR LPARENT DOT MINUS RPARENT LPARENT XOR
##
## Ends in an error in state: 85.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT . IDENT COLON ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT
##

Expecting "<identifier>"

iexpression_node: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT XOR
##
## Ends in an error in state: 86.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT . COLON ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT
##

Expecting ":"

iexpression_node: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT COLON XOR
##
## Ends in an error in state: 87.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON . ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON
##

Expecting "<type>"

iexpression_node: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT COLON IDENT SYSCALL
##
## Ends in an error in state: 88.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype . RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting ")"

iexpression_node: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT COLON IDENT RPARENT XOR
##
## Ends in an error in state: 89.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT . ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT
##

Expecting "<type>"

iexpression_node: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT COLON IDENT RPARENT IDENT SYSCALL
##
## Ends in an error in state: 90.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT ktype . fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting "=" or "{"

iexpression_node: FUNCTION IDENT LPARENT RPARENT LBRACE XOR
##
## Ends in an error in state: 91.
##
## fun_kbody -> LBRACE . list(located(statement)) option(preceded(DOLLAR,located(expr))) RBRACE [ # ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Expecting "<block expression>"

iexpression_node: FUNCTION IDENT LPARENT RPARENT LBRACE MULT IDENT RPARENT
##
## Ends in an error in state: 96.
##
## statement -> MULT separated_nonempty_list(DOT,located(IDENT)) . EQUAL expr SEMICOLON [ VAR RBRACE MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## MULT separated_nonempty_list(DOT,located(IDENT))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 93, spurious reduction of production separated_nonempty_list(DOT,located(IDENT)) -> IDENT
##

Expecting "="

iexpression_node: DISCARD MATCH XOR
##
## Ends in an error in state: 112.
##
## expr -> MATCH . LPARENT expr RPARENT LBRACE option(PIPE) loption(separated_nonempty_list(PIPE,__anonymous_19)) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## MATCH
##

Expecting "("

iexpression_node: DISCARD MATCH LPARENT XOR
##
## Ends in an error in state: 113.
##
## expr -> MATCH LPARENT . expr RPARENT LBRACE option(PIPE) loption(separated_nonempty_list(PIPE,__anonymous_19)) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## MATCH LPARENT
##

Expecting "<expression>"

iexpression_node: DISCARD LSQBRACE XOR
##
## Ends in an error in state: 114.
##
## expr -> LSQBRACE . separated_nonempty_list(COMMA,located(expr)) RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> LSQBRACE . Integer_lit COLON expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## LSQBRACE
##

Expecting "<expression>" or "<array size>"

iexpression_node: DISCARD ADDRESSOF XOR
##
## Ends in an error in state: 133.
##
## expr -> ADDRESSOF . LPARENT separated_nonempty_list(DOT,located(IDENT)) RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## ADDRESSOF
##

Expecting "("

iexpression_node: DISCARD ADDRESSOF LPARENT XOR
##
## Ends in an error in state: 134.
##
## expr -> ADDRESSOF LPARENT . separated_nonempty_list(DOT,located(IDENT)) RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## ADDRESSOF LPARENT
##

Expecting "<identifier>"

iexpression_node: DISCARD ADDRESSOF LPARENT IDENT EQUAL
##
## Ends in an error in state: 135.
##
## expr -> ADDRESSOF LPARENT separated_nonempty_list(DOT,located(IDENT)) . RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## ADDRESSOF LPARENT separated_nonempty_list(DOT,located(IDENT))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 93, spurious reduction of production separated_nonempty_list(DOT,located(IDENT)) -> IDENT
##

Expecting ")"

iexpression_node: DISCARD Constant LSQBRACE XOR
##
## Ends in an error in state: 162.
##
## expr -> expr LSQBRACE . expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr LSQBRACE
##

Expecting "<expression>"

iexpression_node: DISCARD Constant LSQBRACE Constant WILDCARD
##
## Ends in an error in state: 163.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr LSQBRACE expr . RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr LSQBRACE expr
##

Expecting "<binary operator>", ".", "[" or "]

iexpression_node: DISCARD IDENT LPARENT Constant RSQBRACE
##
## Ends in an error in state: 187.
##
## function_call -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT option(__anonymous_7) LPARENT loption(separated_nonempty_list(COMMA,located(expr))) . RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT option(__anonymous_7) LPARENT loption(separated_nonempty_list(COMMA,located(expr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production separated_nonempty_list(COMMA,located(expr)) -> expr
## In state 137, spurious reduction of production loption(separated_nonempty_list(COMMA,located(expr))) -> separated_nonempty_list(COMMA,located(expr))
##

Expecting ")"

iexpression_node: DISCARD Constant INF_EQ_SUP XOR
##
## Ends in an error in state: 192.
##
## expr -> expr INF_EQ_SUP . expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr INF_EQ_SUP
##

Expecting "<expression>"

iexpression_node: DISCARD Constant INF_EQ_SUP Constant WILDCARD
##
## Ends in an error in state: 193.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr INF_EQ_SUP expr . [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## expr INF_EQ_SUP expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

iexpression_node: DISCARD DOT IDENT LPARENT Constant RSQBRACE
##
## Ends in an error in state: 224.
##
## option(delimited(LPARENT,separated_nonempty_list(COMMA,located(expr)),RPARENT)) -> LPARENT separated_nonempty_list(COMMA,located(expr)) . RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## LPARENT separated_nonempty_list(COMMA,located(expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production separated_nonempty_list(COMMA,located(expr)) -> expr
##

Expecting ")"

iexpression_node: DISCARD BUILTIN LPARENT Constant RSQBRACE
##
## Ends in an error in state: 227.
##
## expr -> BUILTIN LPARENT loption(separated_nonempty_list(COMMA,located(expr))) . RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## BUILTIN LPARENT loption(separated_nonempty_list(COMMA,located(expr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production separated_nonempty_list(COMMA,located(expr)) -> expr
## In state 137, spurious reduction of production loption(separated_nonempty_list(COMMA,located(expr))) -> separated_nonempty_list(COMMA,located(expr))
##

Expecting ")"

iexpression_node: DISCARD IF LPARENT Constant RPARENT LPARENT XOR
##
## Ends in an error in state: 231.
##
## kbody -> LPARENT . expr RPARENT [ XOR WILDCARD SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR OF MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM ELSE DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

Expecting "<expression">

iexpression_node: DISCARD IF LPARENT Constant RPARENT LPARENT Constant WILDCARD
##
## Ends in an error in state: 232.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## kbody -> LPARENT expr . RPARENT [ XOR WILDCARD SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR OF MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM ELSE DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## LPARENT expr
##

Expecting "<binary operator>", ".", "[" or ")"

iexpression_node: DISCARD IF LPARENT Constant RPARENT LBRACE XOR
##
## Ends in an error in state: 234.
##
## kbody -> LBRACE . list(located(statement)) option(preceded(DOLLAR,located(expr))) RBRACE [ XOR WILDCARD SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR OF MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM ELSE DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Expecting "<statement>" or "<dollar expression>"

iexpression_node: FUNCTION IDENT LPARENT RPARENT LBRACE IDENT RPARENT
##
## Ends in an error in state: 240.
##
## statement -> separated_nonempty_list(DOT,located(IDENT)) . EQUAL expr SEMICOLON [ VAR RBRACE MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(DOT,located(IDENT))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 93, spurious reduction of production separated_nonempty_list(DOT,located(IDENT)) -> IDENT
##

Expecting "="

iexpression_node: FUNCTION IDENT LPARENT RPARENT LBRACE DOLLAR Constant WILDCARD
##
## Ends in an error in state: 255.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## option(preceded(DOLLAR,located(expr))) -> DOLLAR expr . [ RBRACE ]
##
## The known suffix of the stack is as follows:
## DOLLAR expr
##

Expecting "<binary operator>", ".", "[" or "}"

iexpression_node: DISCARD CASES LBRACE OF Constant ARROWFUNC LBRACE RBRACE XOR
##
## Ends in an error in state: 258.
##
## nonempty_list(__anonymous_15) -> OF expr ARROWFUNC kbody . [ RBRACE ELSE ]
## nonempty_list(__anonymous_15) -> OF expr ARROWFUNC kbody . nonempty_list(__anonymous_15) [ RBRACE ELSE ]
##
## The known suffix of the stack is as follows:
## OF expr ARROWFUNC kbody
##

Expecting "}", "else", or "of"

iexpression_node: DISCARD IF LPARENT Constant RPARENT LBRACE RBRACE ELSE XOR
##
## Ends in an error in state: 261.
##
## option(preceded(ELSE,kbody)) -> ELSE . kbody [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## ELSE
##

Expecting "<block expression>" or "(<expression>)"

iexpression_node: DISCARD CASES LBRACE OF Constant ARROWFUNC LBRACE RBRACE ELSE LBRACE RBRACE XOR
##
## Ends in an error in state: 263.
##
## expr -> CASES LBRACE nonempty_list(__anonymous_15) option(preceded(ELSE,kbody)) . RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## CASES LBRACE nonempty_list(__anonymous_15) option(preceded(ELSE,kbody))
##

Expecting "}"

iexpression_node: DISCARD IF LPARENT Constant RPARENT LBRACE RBRACE WILDCARD
##
## Ends in an error in state: 267.
##
## expr -> IF LPARENT expr RPARENT kbody . option(preceded(ELSE,kbody)) [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## IF LPARENT expr RPARENT kbody
##

Expecting "else", "<binary operator>" or "<declaration>"

iexpression_node: DISCARD LPARENT Constant RSQBRACE
##
## Ends in an error in state: 269.
##
## expr -> LPARENT loption(separated_nonempty_list(COMMA,located(expr))) . RPARENT [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## LPARENT loption(separated_nonempty_list(COMMA,located(expr)))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production separated_nonempty_list(COMMA,located(expr)) -> expr
## In state 137, spurious reduction of production loption(separated_nonempty_list(COMMA,located(expr))) -> separated_nonempty_list(COMMA,located(expr))
##

Expecting ")"

iexpression_node: DISCARD LSQBRACE Integer_lit WILDCARD
##
## Ends in an error in state: 271.
##
## expr -> Integer_lit . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> LSQBRACE Integer_lit . COLON expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## LSQBRACE Integer_lit
##

Expecting "<binary operator>" or ":"

iexpression_node: DISCARD LSQBRACE Integer_lit COLON XOR
##
## Ends in an error in state: 272.
##
## expr -> LSQBRACE Integer_lit COLON . expr RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## LSQBRACE Integer_lit COLON
##

Expecting "<expression>"

iexpression_node: DISCARD LSQBRACE Integer_lit COLON Constant WILDCARD
##
## Ends in an error in state: 273.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RSQBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> LSQBRACE Integer_lit COLON expr . RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## LSQBRACE Integer_lit COLON expr
##

Expecting "<binary operator>", ".", ";", "[", "]" or ")"

iexpression_node: DISCARD LSQBRACE Constant RPARENT
##
## Ends in an error in state: 275.
##
## expr -> LSQBRACE separated_nonempty_list(COMMA,located(expr)) . RSQBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## LSQBRACE separated_nonempty_list(COMMA,located(expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production separated_nonempty_list(COMMA,located(expr)) -> expr
##

Expecting "]"

iexpression_node: DISCARD MATCH LPARENT Constant WILDCARD
##
## Ends in an error in state: 277.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> MATCH LPARENT expr . RPARENT LBRACE option(PIPE) loption(separated_nonempty_list(PIPE,__anonymous_19)) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## MATCH LPARENT expr
##

Expecting "<binary operator>", ".", "[" or ")"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT XOR
##
## Ends in an error in state: 278.
##
## expr -> MATCH LPARENT expr RPARENT . LBRACE option(PIPE) loption(separated_nonempty_list(PIPE,__anonymous_19)) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## MATCH LPARENT expr RPARENT
##

Expecting "{"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT LBRACE XOR
##
## Ends in an error in state: 279.
##
## expr -> MATCH LPARENT expr RPARENT LBRACE . option(PIPE) loption(separated_nonempty_list(PIPE,__anonymous_19)) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## MATCH LPARENT expr RPARENT LBRACE
##

Expecting "|" or "<pattern>"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT LBRACE PIPE XOR
##
## Ends in an error in state: 281.
##
## expr -> MATCH LPARENT expr RPARENT LBRACE option(PIPE) . loption(separated_nonempty_list(PIPE,__anonymous_19)) RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## MATCH LPARENT expr RPARENT LBRACE option(PIPE)
##

Expecting "|" or "}"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT LBRACE LPARENT XOR
##
## Ends in an error in state: 286.
##
## pattern -> LPARENT . loption(separated_nonempty_list(COMMA,located(pattern))) RPARENT [ RPARENT PIPE COMMA ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

Expecting "<pattern>" or ")"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT LBRACE DOT XOR
##
## Ends in an error in state: 291.
##
## pattern -> DOT . IDENT loption(delimited(LPARENT,separated_nonempty_list(COMMA,located(pattern)),RPARENT)) [ RPARENT PIPE COMMA ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## DOT
##

Expecting "<identifier>"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT LBRACE DOT IDENT XOR
##
## Ends in an error in state: 292.
##
## pattern -> DOT IDENT . loption(delimited(LPARENT,separated_nonempty_list(COMMA,located(pattern)),RPARENT)) [ RPARENT PIPE COMMA ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## DOT IDENT
##

Expecting "(", "=>", "|" or ")"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT LBRACE DOT IDENT LPARENT XOR
##
## Ends in an error in state: 293.
##
## loption(delimited(LPARENT,separated_nonempty_list(COMMA,located(pattern)),RPARENT)) -> LPARENT . separated_nonempty_list(COMMA,located(pattern)) RPARENT [ RPARENT PIPE COMMA ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

Expecting "<pattern>" or ")"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT LBRACE LPARENT Integer_lit XOR
##
## Ends in an error in state: 300.
##
## pattern -> pattern . PIPE pattern [ RPARENT PIPE COMMA ]
## separated_nonempty_list(COMMA,located(pattern)) -> pattern . [ RPARENT ]
## separated_nonempty_list(COMMA,located(pattern)) -> pattern . COMMA separated_nonempty_list(COMMA,located(pattern)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## pattern
##

Expecting "," or ")"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT LBRACE Integer_lit PIPE XOR
##
## Ends in an error in state: 301.
##
## pattern -> pattern PIPE . pattern [ RPARENT PIPE COMMA ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## pattern PIPE
##

Expecting "<pattern>"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT LBRACE MINUS XOR
##
## Ends in an error in state: 303.
##
## pattern -> option(MINUS) . Integer_lit [ RPARENT PIPE COMMA ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## option(MINUS)
##

Expecting "<Integer>"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT LBRACE LPARENT Integer_lit COMMA XOR
##
## Ends in an error in state: 305.
##
## separated_nonempty_list(COMMA,located(pattern)) -> pattern COMMA . separated_nonempty_list(COMMA,located(pattern)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## pattern COMMA
##

Expecting "<pattern>"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT LBRACE Integer_lit XOR
##
## Ends in an error in state: 312.
##
## pattern -> pattern . PIPE pattern [ PIPE ARROWFUNC ]
## separated_nonempty_list(PIPE,__anonymous_19) -> pattern . ARROWFUNC kbody [ RBRACE ]
## separated_nonempty_list(PIPE,__anonymous_19) -> pattern . ARROWFUNC kbody PIPE separated_nonempty_list(PIPE,__anonymous_19) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## pattern
##

Expecting "=>"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT LBRACE Integer_lit ARROWFUNC XOR
##
## Ends in an error in state: 313.
##
## separated_nonempty_list(PIPE,__anonymous_19) -> pattern ARROWFUNC . kbody [ RBRACE ]
## separated_nonempty_list(PIPE,__anonymous_19) -> pattern ARROWFUNC . kbody PIPE separated_nonempty_list(PIPE,__anonymous_19) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## pattern ARROWFUNC
##

Expecting "<block expression>" or "(<expression>)"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT LBRACE Integer_lit ARROWFUNC LBRACE RBRACE XOR
##
## Ends in an error in state: 314.
##
## separated_nonempty_list(PIPE,__anonymous_19) -> pattern ARROWFUNC kbody . [ RBRACE ]
## separated_nonempty_list(PIPE,__anonymous_19) -> pattern ARROWFUNC kbody . PIPE separated_nonempty_list(PIPE,__anonymous_19) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## pattern ARROWFUNC kbody
##

Expecting "|" or "}"

iexpression_node: DISCARD MATCH LPARENT Constant RPARENT LBRACE Integer_lit ARROWFUNC LBRACE RBRACE PIPE XOR
##
## Ends in an error in state: 315.
##
## separated_nonempty_list(PIPE,__anonymous_19) -> pattern ARROWFUNC kbody PIPE . separated_nonempty_list(PIPE,__anonymous_19) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## pattern ARROWFUNC kbody PIPE
##

Expecting "<pattern>"

iexpression_node: DISCARD SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT ARROWFUNC LBRACE RBRACE XOR
##
## Ends in an error in state: 341.
##
## nonempty_list(__anonymous_17) -> separated_nonempty_list(PIPE,s_case) ARROWFUNC kbody . [ WILDCARD RBRACE ]
## nonempty_list(__anonymous_17) -> separated_nonempty_list(PIPE,s_case) ARROWFUNC kbody . nonempty_list(__anonymous_17) [ WILDCARD RBRACE ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(PIPE,s_case) ARROWFUNC kbody
##

Expecting "_" or "}"

iexpression_node: DISCARD SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT ARROWFUNC LBRACE RBRACE WILDCARD XOR
##
## Ends in an error in state: 347.
##
## option(__anonymous_18) -> WILDCARD . ARROWFUNC kbody [ RBRACE ]
##
## The known suffix of the stack is as follows:
## WILDCARD
##

Expecting "=>"

iexpression_node: DISCARD SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT ARROWFUNC LBRACE RBRACE WILDCARD ARROWFUNC XOR
##
## Ends in an error in state: 348.
##
## option(__anonymous_18) -> WILDCARD ARROWFUNC . kbody [ RBRACE ]
##
## The known suffix of the stack is as follows:
## WILDCARD ARROWFUNC
##

Expecting "<block expression>"

iexpression_node: DISCARD SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT ARROWFUNC LBRACE RBRACE WILDCARD ARROWFUNC LBRACE RBRACE XOR
##
## Ends in an error in state: 350.
##
## expr -> SWITCH LPARENT expr RPARENT LBRACE nonempty_list(__anonymous_17) option(__anonymous_18) . RBRACE [ XOR SYSCALL SUPEQ SUP STRUCT SHIFTRIGHT SHIFTLEFT SEMICOLON RSQBRACE RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FUNCTION FULLOR FULLAND EXTERNAL EOF ENUM DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND # ]
##
## The known suffix of the stack is as follows:
## SWITCH LPARENT expr RPARENT LBRACE nonempty_list(__anonymous_17) option(__anonymous_18)
##

Expecting "}"

iexpression_node: FUNCTION IDENT LPARENT RPARENT EQUAL XOR
##
## Ends in an error in state: 360.
##
## fun_kbody -> EQUAL . expr option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

Expecting "<expression>"

iexpression_node: FUNCTION IDENT LPARENT RPARENT EQUAL Constant WILDCARD
##
## Ends in an error in state: 361.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND # ]
## fun_kbody -> EQUAL expr . option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## EQUAL expr
##

Expecting "<binary operator>", ".", ";", "[" or ")"

iexpression_node: OPERATOR AMPERSAND XOR
##
## Ends in an error in state: 368.
##
## operator_decl -> OPERATOR binary_operator_symbol . LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol
##

Expecting "("

iexpression_node: OPERATOR AMPERSAND LPARENT XOR
##
## Ends in an error in state: 369.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT . IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT
##

Expecting "<identifier>"

iexpression_node: OPERATOR AMPERSAND LPARENT IDENT XOR
##
## Ends in an error in state: 370.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT . COLON ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT
##

Expecting ":"

iexpression_node: OPERATOR AMPERSAND LPARENT IDENT COLON XOR
##
## Ends in an error in state: 371.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON . ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON
##

Expecting "<type>"

iexpression_node: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT SYSCALL
##
## Ends in an error in state: 372.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype . COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting ","

iexpression_node: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA XOR
##
## Ends in an error in state: 373.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA . IDENT COLON ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA
##

Expecting "<identifier>"

iexpression_node: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT XOR
##
## Ends in an error in state: 374.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT . COLON ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT
##

Expecting ":"

iexpression_node: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT COLON XOR
##
## Ends in an error in state: 375.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON . ktype RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON
##

Expecting "<type>"

iexpression_node: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT COLON IDENT SYSCALL
##
## Ends in an error in state: 376.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype . RPARENT ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting ")"

iexpression_node: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT COLON IDENT RPARENT XOR
##
## Ends in an error in state: 377.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT . ktype fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT
##

Expecting "<type>"

iexpression_node: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT COLON IDENT RPARENT IDENT SYSCALL
##
## Ends in an error in state: 378.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype . fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
##

Expecting "=" or "{"

iexpression_node: MULT XOR
##
## Ends in an error in state: 380.
##
## statement -> MULT . separated_nonempty_list(DOT,located(IDENT)) EQUAL expr SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## MULT
##

Expecting "<identifier>"

iexpression_node: MULT IDENT RPARENT
##
## Ends in an error in state: 381.
##
## statement -> MULT separated_nonempty_list(DOT,located(IDENT)) . EQUAL expr SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## MULT separated_nonempty_list(DOT,located(IDENT))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 93, spurious reduction of production separated_nonempty_list(DOT,located(IDENT)) -> IDENT
##

Expecting "="

iexpression_node: MULT IDENT EQUAL XOR
##
## Ends in an error in state: 382.
##
## statement -> MULT separated_nonempty_list(DOT,located(IDENT)) EQUAL . expr SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## MULT separated_nonempty_list(DOT,located(IDENT)) EQUAL
##

Expecting "<expression>"

iexpression_node: MULT IDENT EQUAL Constant WILDCARD
##
## Ends in an error in state: 383.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## statement -> MULT separated_nonempty_list(DOT,located(IDENT)) EQUAL expr . SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## MULT separated_nonempty_list(DOT,located(IDENT)) EQUAL expr
##

Expecting "<binary operator>", ".", ";", "[" or ")"

iexpression_node: FUNCTION XOR
##
## Ends in an error in state: 385.
##
## function_decl -> FUNCTION . IDENT option(__anonymous_11) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ktype) fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## FUNCTION
##

Expecting "<expression>"

iexpression_node: FUNCTION IDENT XOR
##
## Ends in an error in state: 386.
##
## function_decl -> FUNCTION IDENT . option(__anonymous_11) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ktype) fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT
##

Expecting "<" or "("

iexpression_node: FUNCTION IDENT INF IDENT SUP XOR
##
## Ends in an error in state: 393.
##
## function_decl -> FUNCTION IDENT option(__anonymous_11) . LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ktype) fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT option(__anonymous_11)
##

Expecting "("

iexpression_node: FUNCTION IDENT LPARENT XOR
##
## Ends in an error in state: 394.
##
## function_decl -> FUNCTION IDENT option(__anonymous_11) LPARENT . loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ktype) fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT option(__anonymous_11) LPARENT
##

Expecting "<parameter name>" or ")"

iexpression_node: FUNCTION IDENT LPARENT RPARENT XOR
##
## Ends in an error in state: 402.
##
## function_decl -> FUNCTION IDENT option(__anonymous_11) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT . option(ktype) fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT option(__anonymous_11) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT
##

Expecting "<return type>", "=" or "{"

iexpression_node: FUNCTION IDENT LPARENT RPARENT IDENT SYSCALL
##
## Ends in an error in state: 403.
##
## function_decl -> FUNCTION IDENT option(__anonymous_11) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ktype) . fun_kbody [ # ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT option(__anonymous_11) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ktype)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
## In state 405, spurious reduction of production option(ktype) -> ktype
##

Expecting "=" or "{"

iexpression_node: EXTERNAL XOR
##
## Ends in an error in state: 406.
##
## external_func_decl -> EXTERNAL . IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT option(ctype) option(__anonymous_4) option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## EXTERNAL
##

Expecting "<identifier>"

iexpression_node: EXTERNAL IDENT XOR
##
## Ends in an error in state: 407.
##
## external_func_decl -> EXTERNAL IDENT . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT option(ctype) option(__anonymous_4) option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT
##

Expecting "("

iexpression_node: EXTERNAL IDENT LPARENT XOR
##
## Ends in an error in state: 408.
##
## external_func_decl -> EXTERNAL IDENT LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT option(ctype) option(__anonymous_4) option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT
##

Expecting "<parameter name>" or ")"

iexpression_node: EXTERNAL IDENT LPARENT SEMICOLON TRIPLEDOT XOR
##
## Ends in an error in state: 412.
##
## external_func_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) . RPARENT option(ctype) option(__anonymous_4) option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3)
##

Expecting ")"

iexpression_node: EXTERNAL IDENT LPARENT RPARENT XOR
##
## Ends in an error in state: 413.
##
## external_func_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT . option(ctype) option(__anonymous_4) option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT
##

Expecting "<ctype>", "=", ";" or <end of declaration>

iexpression_node: EXTERNAL IDENT LPARENT RPARENT IDENT XOR
##
## Ends in an error in state: 414.
##
## external_func_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT option(ctype) . option(__anonymous_4) option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT option(ctype)
##

Expecting "=", ";" or <end of declaration>

iexpression_node: EXTERNAL IDENT LPARENT RPARENT EQUAL String_lit XOR
##
## Ends in an error in state: 417.
##
## external_func_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT option(ctype) option(__anonymous_4) . option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(ctype))) option(__anonymous_3) RPARENT option(ctype) option(__anonymous_4)
##

Expecting "<semicolon>" or "<end of declaration>"

iexpression_node: ENUM XOR
##
## Ends in an error in state: 420.
##
## enum_decl -> ENUM . IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE [ # ]
##
## The known suffix of the stack is as follows:
## ENUM
##

Expecting "<identifier>"

iexpression_node: ENUM IDENT XOR
##
## Ends in an error in state: 421.
##
## enum_decl -> ENUM IDENT . option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE [ # ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT
##

Expecting "{" or "("

iexpression_node: ENUM IDENT LPARENT IDENT RPARENT XOR
##
## Ends in an error in state: 422.
##
## enum_decl -> ENUM IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) . LBRACE loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE [ # ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT))
##

Expecting "{"

iexpression_node: ENUM IDENT LBRACE XOR
##
## Ends in an error in state: 423.
##
## enum_decl -> ENUM IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE . loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE [ # ]
##
## The known suffix of the stack is as follows:
## ENUM IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(IDENT)),RPARENT)) LBRACE
##

Expecting "<enum case>" or "}"

iexpression_node: DOLLAR XOR
##
## Ends in an error in state: 435.
##
## iexpression_nodes -> DOLLAR . expr SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## DOLLAR
##

Expecting "<expression>"

iexpression_node: DOLLAR Constant WILDCARD
##
## Ends in an error in state: 436.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## iexpression_nodes -> DOLLAR expr . SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## DOLLAR expr
##

Expecting "<binary operator>", ".", ";", "[" or ")"

iexpression_node: DISCARD XOR
##
## Ends in an error in state: 438.
##
## statement -> DISCARD . expr SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## DISCARD
##

Expecting "<expression>"

iexpression_node: DISCARD Constant WILDCARD
##
## Ends in an error in state: 439.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## statement -> DISCARD expr . SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## DISCARD expr
##

Expecting "<binary operator>", ".", ";", "[" or ")"

iexpression_node: CONST XOR
##
## Ends in an error in state: 441.
##
## const_decl -> CONST . Constant EQUAL Integer_lit option(SEMICOLON) [ # ]
## const_decl -> CONST . Constant EQUAL String_lit option(SEMICOLON) [ # ]
## const_decl -> CONST . Constant EQUAL Float_lit option(SEMICOLON) [ # ]
## declarer -> CONST . [ IDENT ]
##
## The known suffix of the stack is as follows:
## CONST
##

Expecting "<constant identifier>"

iexpression_node: CONST Constant XOR
##
## Ends in an error in state: 442.
##
## const_decl -> CONST Constant . EQUAL Integer_lit option(SEMICOLON) [ # ]
## const_decl -> CONST Constant . EQUAL String_lit option(SEMICOLON) [ # ]
## const_decl -> CONST Constant . EQUAL Float_lit option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## CONST Constant
##

Expecting "="

iexpression_node: CONST Constant EQUAL XOR
##
## Ends in an error in state: 443.
##
## const_decl -> CONST Constant EQUAL . Integer_lit option(SEMICOLON) [ # ]
## const_decl -> CONST Constant EQUAL . String_lit option(SEMICOLON) [ # ]
## const_decl -> CONST Constant EQUAL . Float_lit option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## CONST Constant EQUAL
##

Expecting "<Integer>", "<Float>", or "<String>"

iexpression_node: CONST Constant EQUAL String_lit XOR
##
## Ends in an error in state: 444.
##
## const_decl -> CONST Constant EQUAL String_lit . option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## CONST Constant EQUAL String_lit
##

Expecting ";" or <declaration>

iexpression_node: CONST Constant EQUAL Integer_lit XOR
##
## Ends in an error in state: 446.
##
## const_decl -> CONST Constant EQUAL Integer_lit . option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## CONST Constant EQUAL Integer_lit
##

Expecting ";" or <declaration>

iexpression_node: CONST Constant EQUAL Float_lit XOR
##
## Ends in an error in state: 448.
##
## const_decl -> CONST Constant EQUAL Float_lit . option(SEMICOLON) [ # ]
##
## The known suffix of the stack is as follows:
## CONST Constant EQUAL Float_lit
##

Expecting ";" or "<declaration>"

iexpression_node: IDENT RPARENT
##
## Ends in an error in state: 453.
##
## statement -> separated_nonempty_list(DOT,located(IDENT)) . EQUAL expr SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(DOT,located(IDENT))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 93, spurious reduction of production separated_nonempty_list(DOT,located(IDENT)) -> IDENT
##

Expecting "="

iexpression_node: IDENT EQUAL XOR
##
## Ends in an error in state: 454.
##
## statement -> separated_nonempty_list(DOT,located(IDENT)) EQUAL . expr SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(DOT,located(IDENT)) EQUAL
##

Expecting "<expression>"

iexpression_node: IDENT EQUAL Constant WILDCARD
##
## Ends in an error in state: 455.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## statement -> separated_nonempty_list(DOT,located(IDENT)) EQUAL expr . SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(DOT,located(IDENT)) EQUAL expr
##

Expecting "<binary operator>", ".", ";", "[" or ")"

iexpression_node: VAR XOR
##
## Ends in an error in state: 464.
##
## statement -> declarer . IDENT option(__anonymous_9) EQUAL expr SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## declarer
##

Expecting "identifier"

iexpression_node: CONST IDENT XOR
##
## Ends in an error in state: 465.
##
## statement -> declarer IDENT . option(__anonymous_9) EQUAL expr SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## declarer IDENT
##

Expecting ":" or "="

iexpression_node: CONST IDENT COLON IDENT SYSCALL
##
## Ends in an error in state: 466.
##
## statement -> declarer IDENT option(__anonymous_9) . EQUAL expr SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## declarer IDENT option(__anonymous_9)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production ktype -> loption(terminated(separated_nonempty_list(DOUBLECOLON,Module_IDENT),DOT)) IDENT
## In state 248, spurious reduction of production option(__anonymous_9) -> COLON ktype
##

Expecting "="

iexpression_node: CONST IDENT EQUAL XOR
##
## Ends in an error in state: 467.
##
## statement -> declarer IDENT option(__anonymous_9) EQUAL . expr SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## declarer IDENT option(__anonymous_9) EQUAL
##

Expecting "<expression>"

iexpression_node: CONST IDENT EQUAL Constant WILDCARD
##
## Ends in an error in state: 468.
##
## expr -> expr . INF_EQ_SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . FULLOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT Integer_lit [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . LSQBRACE expr RSQBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS LSQBRACE INF_EQ_SUP INFEQ INF FULLOR FULLAND DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## statement -> declarer IDENT option(__anonymous_9) EQUAL expr . SEMICOLON [ # ]
##
## The known suffix of the stack is as follows:
## declarer IDENT option(__anonymous_9) EQUAL expr
##

Expecting "<binary operator>", ".", ";", "[" or ")"
