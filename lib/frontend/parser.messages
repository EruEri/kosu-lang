modul: XOR
##
## Ends in an error in state: 0.
##
## modul' -> . modul [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SYSCALL XOR
##
## Ends in an error in state: 1.
##
## syscall_decl -> SYSCALL . IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype) LBRACE SYSCALL LPARENT Integer_lit RPARENT RBRACE [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SYSCALL IDENT XOR
##
## Ends in an error in state: 2.
##
## syscall_decl -> SYSCALL IDENT . LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype) LBRACE SYSCALL LPARENT Integer_lit RPARENT RBRACE [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SYSCALL IDENT LPARENT XOR
##
## Ends in an error in state: 3.
##
## syscall_decl -> SYSCALL IDENT LPARENT . loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype) LBRACE SYSCALL LPARENT Integer_lit RPARENT RBRACE [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL IDENT LPARENT Module_IDENT XOR
##
## Ends in an error in state: 4.
##
## separated_nonempty_list(DOUBLECOLON,Module_IDENT) -> Module_IDENT . [ IDENT DOT Constant ]
## separated_nonempty_list(DOUBLECOLON,Module_IDENT) -> Module_IDENT . DOUBLECOLON separated_nonempty_list(DOUBLECOLON,Module_IDENT) [ IDENT DOT Constant ]
##
## The known suffix of the stack is as follows:
## Module_IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL IDENT LPARENT Module_IDENT DOUBLECOLON XOR
##
## Ends in an error in state: 5.
##
## separated_nonempty_list(DOUBLECOLON,Module_IDENT) -> Module_IDENT DOUBLECOLON . separated_nonempty_list(DOUBLECOLON,Module_IDENT) [ IDENT DOT Constant ]
##
## The known suffix of the stack is as follows:
## Module_IDENT DOUBLECOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL IDENT LPARENT MULT XOR
##
## Ends in an error in state: 7.
##
## ctype -> MULT . ktype [ SEMICOLON RPARENT LBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT LPARENT MULT XOR
##
## Ends in an error in state: 8.
##
## ktype -> MULT . ktype [ SUP SEMICOLON RPARENT RBRACE LBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT LPARENT LPARENT XOR
##
## Ends in an error in state: 9.
##
## ktype -> LPARENT . separated_nonempty_list(COMMA,located(ktype)) RPARENT loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT [ SUP SEMICOLON RPARENT RBRACE LBRACE EQUAL COMMA ]
## ktype -> LPARENT . separated_nonempty_list(COMMA,located(ktype)) RPARENT [ SUP SEMICOLON RPARENT RBRACE LBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT LPARENT LPARENT IDENT SUP
##
## Ends in an error in state: 11.
##
## ktype -> LPARENT separated_nonempty_list(COMMA,located(ktype)) . RPARENT loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT [ SUP SEMICOLON RPARENT RBRACE LBRACE EQUAL COMMA ]
## ktype -> LPARENT separated_nonempty_list(COMMA,located(ktype)) . RPARENT [ SUP SEMICOLON RPARENT RBRACE LBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT separated_nonempty_list(COMMA,located(ktype))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production separated_nonempty_list(COMMA,located(ktype)) -> ktype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT LPARENT LPARENT IDENT RPARENT XOR
##
## Ends in an error in state: 12.
##
## ktype -> LPARENT separated_nonempty_list(COMMA,located(ktype)) RPARENT . loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT [ SUP SEMICOLON RPARENT RBRACE LBRACE EQUAL COMMA ]
## ktype -> LPARENT separated_nonempty_list(COMMA,located(ktype)) RPARENT . [ SUP SEMICOLON RPARENT RBRACE LBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT separated_nonempty_list(COMMA,located(ktype)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT LPARENT LPARENT IDENT RPARENT Module_IDENT DOT
##
## Ends in an error in state: 13.
##
## ktype -> LPARENT separated_nonempty_list(COMMA,located(ktype)) RPARENT loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) . IDENT [ SUP SEMICOLON RPARENT RBRACE LBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT separated_nonempty_list(COMMA,located(ktype)) RPARENT loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 4, spurious reduction of production separated_nonempty_list(DOUBLECOLON,Module_IDENT) -> Module_IDENT
## In state 10, spurious reduction of production loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) -> separated_nonempty_list(DOUBLECOLON,Module_IDENT)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT LPARENT Module_IDENT DOT
##
## Ends in an error in state: 15.
##
## ktype -> loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) . IDENT [ SUP SEMICOLON RPARENT RBRACE LBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 4, spurious reduction of production separated_nonempty_list(DOUBLECOLON,Module_IDENT) -> Module_IDENT
## In state 10, spurious reduction of production loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) -> separated_nonempty_list(DOUBLECOLON,Module_IDENT)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM LBRACE IDENT LPARENT IDENT XOR
##
## Ends in an error in state: 17.
##
## separated_nonempty_list(COMMA,located(ktype)) -> ktype . [ SUP RPARENT ]
## separated_nonempty_list(COMMA,located(ktype)) -> ktype . COMMA separated_nonempty_list(COMMA,located(ktype)) [ SUP RPARENT ]
##
## The known suffix of the stack is as follows:
## ktype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM LBRACE IDENT LPARENT IDENT COMMA XOR
##
## Ends in an error in state: 18.
##
## separated_nonempty_list(COMMA,located(ktype)) -> ktype COMMA . separated_nonempty_list(COMMA,located(ktype)) [ SUP RPARENT ]
##
## The known suffix of the stack is as follows:
## ktype COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL IDENT LPARENT Module_IDENT DOT
##
## Ends in an error in state: 23.
##
## ctype -> loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) . IDENT [ SEMICOLON RPARENT LBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 4, spurious reduction of production separated_nonempty_list(DOUBLECOLON,Module_IDENT) -> Module_IDENT
## In state 10, spurious reduction of production loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) -> separated_nonempty_list(DOUBLECOLON,Module_IDENT)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SYSCALL IDENT LPARENT RPARENT XOR
##
## Ends in an error in state: 26.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT . option(ctype) LBRACE SYSCALL LPARENT Integer_lit RPARENT RBRACE [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SYSCALL IDENT LPARENT RPARENT IDENT XOR
##
## Ends in an error in state: 27.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype) . LBRACE SYSCALL LPARENT Integer_lit RPARENT RBRACE [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SYSCALL IDENT LPARENT RPARENT LBRACE XOR
##
## Ends in an error in state: 28.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype) LBRACE . SYSCALL LPARENT Integer_lit RPARENT RBRACE [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SYSCALL IDENT LPARENT RPARENT LBRACE SYSCALL XOR
##
## Ends in an error in state: 29.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype) LBRACE SYSCALL . LPARENT Integer_lit RPARENT RBRACE [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype) LBRACE SYSCALL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SYSCALL IDENT LPARENT RPARENT LBRACE SYSCALL LPARENT XOR
##
## Ends in an error in state: 30.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype) LBRACE SYSCALL LPARENT . Integer_lit RPARENT RBRACE [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype) LBRACE SYSCALL LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SYSCALL IDENT LPARENT RPARENT LBRACE SYSCALL LPARENT Integer_lit XOR
##
## Ends in an error in state: 31.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype) LBRACE SYSCALL LPARENT Integer_lit . RPARENT RBRACE [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype) LBRACE SYSCALL LPARENT Integer_lit
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SYSCALL IDENT LPARENT RPARENT LBRACE SYSCALL LPARENT Integer_lit RPARENT XOR
##
## Ends in an error in state: 32.
##
## syscall_decl -> SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype) LBRACE SYSCALL LPARENT Integer_lit RPARENT . RBRACE [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SYSCALL IDENT LPARENT loption(separated_nonempty_list(COMMA,__anonymous_12)) RPARENT option(ctype) LBRACE SYSCALL LPARENT Integer_lit RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SYSCALL IDENT LPARENT IDENT XOR
##
## Ends in an error in state: 35.
##
## separated_nonempty_list(COMMA,__anonymous_12) -> ctype . [ RPARENT ]
## separated_nonempty_list(COMMA,__anonymous_12) -> ctype . COMMA separated_nonempty_list(COMMA,__anonymous_12) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## ctype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SYSCALL IDENT LPARENT IDENT COMMA XOR
##
## Ends in an error in state: 36.
##
## separated_nonempty_list(COMMA,__anonymous_12) -> ctype COMMA . separated_nonempty_list(COMMA,__anonymous_12) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## ctype COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: STRUCT XOR
##
## Ends in an error in state: 38.
##
## struct_decl -> STRUCT . option(__anonymous_2) LBRACE loption(separated_nonempty_list(COMMA,__anonymous_3)) RBRACE IDENT SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: STRUCT LPARENT XOR
##
## Ends in an error in state: 39.
##
## option(__anonymous_2) -> LPARENT . separated_nonempty_list(COMMA,located(IDENT)) RPARENT [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM LPARENT IDENT XOR
##
## Ends in an error in state: 40.
##
## separated_nonempty_list(COMMA,located(IDENT)) -> IDENT . [ RPARENT ]
## separated_nonempty_list(COMMA,located(IDENT)) -> IDENT . COMMA separated_nonempty_list(COMMA,located(IDENT)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM LPARENT IDENT COMMA XOR
##
## Ends in an error in state: 41.
##
## separated_nonempty_list(COMMA,located(IDENT)) -> IDENT COMMA . separated_nonempty_list(COMMA,located(IDENT)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: STRUCT LPARENT IDENT RPARENT XOR
##
## Ends in an error in state: 45.
##
## struct_decl -> STRUCT option(__anonymous_2) . LBRACE loption(separated_nonempty_list(COMMA,__anonymous_3)) RBRACE IDENT SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## STRUCT option(__anonymous_2)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: STRUCT LBRACE XOR
##
## Ends in an error in state: 46.
##
## struct_decl -> STRUCT option(__anonymous_2) LBRACE . loption(separated_nonempty_list(COMMA,__anonymous_3)) RBRACE IDENT SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## STRUCT option(__anonymous_2) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: STRUCT LBRACE IDENT XOR
##
## Ends in an error in state: 47.
##
## separated_nonempty_list(COMMA,__anonymous_3) -> IDENT . COLON ktype [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_3) -> IDENT . COLON ktype COMMA separated_nonempty_list(COMMA,__anonymous_3) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: STRUCT LBRACE IDENT COLON XOR
##
## Ends in an error in state: 48.
##
## separated_nonempty_list(COMMA,__anonymous_3) -> IDENT COLON . ktype [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_3) -> IDENT COLON . ktype COMMA separated_nonempty_list(COMMA,__anonymous_3) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: STRUCT LBRACE IDENT COLON IDENT XOR
##
## Ends in an error in state: 49.
##
## separated_nonempty_list(COMMA,__anonymous_3) -> IDENT COLON ktype . [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_3) -> IDENT COLON ktype . COMMA separated_nonempty_list(COMMA,__anonymous_3) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON ktype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: STRUCT LBRACE IDENT COLON IDENT COMMA XOR
##
## Ends in an error in state: 50.
##
## separated_nonempty_list(COMMA,__anonymous_3) -> IDENT COLON ktype COMMA . separated_nonempty_list(COMMA,__anonymous_3) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON ktype COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: STRUCT LBRACE RBRACE XOR
##
## Ends in an error in state: 54.
##
## struct_decl -> STRUCT option(__anonymous_2) LBRACE loption(separated_nonempty_list(COMMA,__anonymous_3)) RBRACE . IDENT SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## STRUCT option(__anonymous_2) LBRACE loption(separated_nonempty_list(COMMA,__anonymous_3)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: STRUCT LBRACE RBRACE IDENT XOR
##
## Ends in an error in state: 55.
##
## struct_decl -> STRUCT option(__anonymous_2) LBRACE loption(separated_nonempty_list(COMMA,__anonymous_3)) RBRACE IDENT . SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## STRUCT option(__anonymous_2) LBRACE loption(separated_nonempty_list(COMMA,__anonymous_3)) RBRACE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG XOR
##
## Ends in an error in state: 57.
##
## sig_decl -> SIG . IDENT option(__anonymous_17) LPARENT loption(separated_nonempty_list(COMMA,ktype)) RPARENT ktype SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SIG
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT XOR
##
## Ends in an error in state: 58.
##
## sig_decl -> SIG IDENT . option(__anonymous_17) LPARENT loption(separated_nonempty_list(COMMA,ktype)) RPARENT ktype SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SIG IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT INF XOR
##
## Ends in an error in state: 59.
##
## option(__anonymous_17) -> INF . separated_nonempty_list(COMMA,__anonymous_16) SUP [ LPARENT ]
##
## The known suffix of the stack is as follows:
## INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT INF IDENT XOR
##
## Ends in an error in state: 60.
##
## separated_nonempty_list(COMMA,__anonymous_16) -> IDENT . [ SUP ]
## separated_nonempty_list(COMMA,__anonymous_16) -> IDENT . COMMA separated_nonempty_list(COMMA,__anonymous_16) [ SUP ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT INF IDENT COMMA XOR
##
## Ends in an error in state: 61.
##
## separated_nonempty_list(COMMA,__anonymous_16) -> IDENT COMMA . separated_nonempty_list(COMMA,__anonymous_16) [ SUP ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT INF IDENT SUP XOR
##
## Ends in an error in state: 65.
##
## sig_decl -> SIG IDENT option(__anonymous_17) . LPARENT loption(separated_nonempty_list(COMMA,ktype)) RPARENT ktype SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SIG IDENT option(__anonymous_17)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT LPARENT XOR
##
## Ends in an error in state: 66.
##
## sig_decl -> SIG IDENT option(__anonymous_17) LPARENT . loption(separated_nonempty_list(COMMA,ktype)) RPARENT ktype SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SIG IDENT option(__anonymous_17) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT LPARENT RPARENT XOR
##
## Ends in an error in state: 69.
##
## sig_decl -> SIG IDENT option(__anonymous_17) LPARENT loption(separated_nonempty_list(COMMA,ktype)) RPARENT . ktype SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SIG IDENT option(__anonymous_17) LPARENT loption(separated_nonempty_list(COMMA,ktype)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT LPARENT RPARENT IDENT XOR
##
## Ends in an error in state: 70.
##
## sig_decl -> SIG IDENT option(__anonymous_17) LPARENT loption(separated_nonempty_list(COMMA,ktype)) RPARENT ktype . SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## SIG IDENT option(__anonymous_17) LPARENT loption(separated_nonempty_list(COMMA,ktype)) RPARENT ktype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT LPARENT IDENT XOR
##
## Ends in an error in state: 72.
##
## separated_nonempty_list(COMMA,ktype) -> ktype . [ RPARENT ]
## separated_nonempty_list(COMMA,ktype) -> ktype . COMMA separated_nonempty_list(COMMA,ktype) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## ktype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: SIG IDENT LPARENT IDENT COMMA XOR
##
## Ends in an error in state: 73.
##
## separated_nonempty_list(COMMA,ktype) -> ktype COMMA . separated_nonempty_list(COMMA,ktype) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## ktype COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR WILDCARD
##
## Ends in an error in state: 75.
##
## operator_decl -> OPERATOR . binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
## operator_decl -> OPERATOR . LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR LPARENT XOR
##
## Ends in an error in state: 85.
##
## operator_decl -> OPERATOR LPARENT . unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR LPARENT DOT XOR
##
## Ends in an error in state: 86.
##
## unary_operator_symbol -> DOT . NOT [ RPARENT ]
## unary_operator_symbol -> DOT . MINUS [ RPARENT ]
##
## The known suffix of the stack is as follows:
## DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR LPARENT DOT MINUS XOR
##
## Ends in an error in state: 89.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol . RPARENT LPARENT IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR LPARENT DOT MINUS RPARENT XOR
##
## Ends in an error in state: 90.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT . LPARENT IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR LPARENT DOT MINUS RPARENT LPARENT XOR
##
## Ends in an error in state: 91.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT . IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT XOR
##
## Ends in an error in state: 92.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT . COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT COLON XOR
##
## Ends in an error in state: 93.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON . ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT COLON IDENT XOR
##
## Ends in an error in state: 94.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype . RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT COLON IDENT RPARENT XOR
##
## Ends in an error in state: 95.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT . ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR LPARENT DOT MINUS RPARENT LPARENT IDENT COLON IDENT RPARENT IDENT XOR
##
## Ends in an error in state: 96.
##
## operator_decl -> OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT ktype . fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR LPARENT unary_operator_symbol RPARENT LPARENT IDENT COLON ktype RPARENT ktype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE XOR
##
## Ends in an error in state: 97.
##
## kbody -> LBRACE . list(located(statement)) DOLLAR expr RBRACE [ XOR WILDCARD SYSCALL SUPEQ SUP STRUCT SIG SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR OF MULT MOD MINUS INFEQ INF FUNCTION EXTERNAL EOF ENUM ELSE DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE MULT XOR
##
## Ends in an error in state: 99.
##
## statement -> MULT . IDENT EQUAL expr SEMICOLON [ VAR MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE MULT IDENT XOR
##
## Ends in an error in state: 100.
##
## statement -> MULT IDENT . EQUAL expr SEMICOLON [ VAR MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## MULT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE MULT IDENT EQUAL XOR
##
## Ends in an error in state: 101.
##
## statement -> MULT IDENT EQUAL . expr SEMICOLON [ VAR MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## MULT IDENT EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH XOR
##
## Ends in an error in state: 104.
##
## expr -> SWITCH . LPARENT expr RPARENT LBRACE nonempty_list(__anonymous_22) option(__anonymous_23) RBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## SWITCH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT XOR
##
## Ends in an error in state: 105.
##
## expr -> SWITCH LPARENT . expr RPARENT LBRACE nonempty_list(__anonymous_22) option(__anonymous_23) RBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## SWITCH LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SIZEOF XOR
##
## Ends in an error in state: 106.
##
## expr -> SIZEOF . LPARENT COLON expr RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> SIZEOF . LPARENT ktype RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## SIZEOF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SIZEOF LPARENT XOR
##
## Ends in an error in state: 107.
##
## expr -> SIZEOF LPARENT . COLON expr RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> SIZEOF LPARENT . ktype RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SIZEOF LPARENT COLON XOR
##
## Ends in an error in state: 108.
##
## expr -> SIZEOF LPARENT COLON . expr RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPARENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL NOT XOR
##
## Ends in an error in state: 110.
##
## expr -> NOT . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL MULT XOR
##
## Ends in an error in state: 111.
##
## nonempty_list(MULT) -> MULT . [ IDENT ]
## nonempty_list(MULT) -> MULT . nonempty_list(MULT) [ IDENT ]
##
## The known suffix of the stack is as follows:
## MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL MINUS XOR
##
## Ends in an error in state: 113.
##
## expr -> MINUS . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL LPARENT XOR
##
## Ends in an error in state: 114.
##
## expr -> LPARENT . loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IF XOR
##
## Ends in an error in state: 116.
##
## expr -> IF . LPARENT expr RPARENT kbody ELSE kbody [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IF LPARENT XOR
##
## Ends in an error in state: 117.
##
## expr -> IF LPARENT . expr RPARENT kbody ELSE kbody [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL CASES XOR
##
## Ends in an error in state: 121.
##
## expr -> CASES . LBRACE nonempty_list(__anonymous_20) ELSE kbody RBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## CASES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL CASES LBRACE XOR
##
## Ends in an error in state: 122.
##
## expr -> CASES LBRACE . nonempty_list(__anonymous_20) ELSE kbody RBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## CASES LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL CASES LBRACE OF XOR
##
## Ends in an error in state: 123.
##
## nonempty_list(__anonymous_20) -> OF . expr ARROWFUNC kbody [ ELSE ]
## nonempty_list(__anonymous_20) -> OF . expr ARROWFUNC kbody nonempty_list(__anonymous_20) [ ELSE ]
##
## The known suffix of the stack is as follows:
## OF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL BUILTIN XOR
##
## Ends in an error in state: 124.
##
## expr -> BUILTIN . LPARENT loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BUILTIN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL BUILTIN LPARENT XOR
##
## Ends in an error in state: 125.
##
## expr -> BUILTIN LPARENT . loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BUILTIN LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL AMPERSAND XOR
##
## Ends in an error in state: 126.
##
## expr -> AMPERSAND . IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT WILDCARD
##
## Ends in an error in state: 132.
##
## enum_resolver -> IDENT . DOUBLECOLON [ IDENT ]
## expr -> loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT . LBRACE loption(separated_nonempty_list(COMMA,__anonymous_19)) RBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## function_call -> loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT . option(__anonymous_9) LPARENT loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT LBRACE XOR
##
## Ends in an error in state: 133.
##
## expr -> loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT LBRACE . loption(separated_nonempty_list(COMMA,__anonymous_19)) RBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT LBRACE IDENT XOR
##
## Ends in an error in state: 134.
##
## separated_nonempty_list(COMMA,__anonymous_19) -> IDENT . either_color_equal expr [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_19) -> IDENT . either_color_equal expr COMMA separated_nonempty_list(COMMA,__anonymous_19) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT LBRACE IDENT COLON XOR
##
## Ends in an error in state: 137.
##
## separated_nonempty_list(COMMA,__anonymous_19) -> IDENT either_color_equal . expr [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_19) -> IDENT either_color_equal . expr COMMA separated_nonempty_list(COMMA,__anonymous_19) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT either_color_equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT LBRACE IDENT COLON Constant SEMICOLON
##
## Ends in an error in state: 139.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## separated_nonempty_list(COMMA,__anonymous_19) -> IDENT either_color_equal expr . [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_19) -> IDENT either_color_equal expr . COMMA separated_nonempty_list(COMMA,__anonymous_19) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT either_color_equal expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant XOR XOR
##
## Ends in an error in state: 140.
##
## expr -> expr XOR . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr XOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant XOR Constant WILDCARD
##
## Ends in an error in state: 141.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr XOR expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr XOR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant SUPEQ XOR
##
## Ends in an error in state: 142.
##
## expr -> expr SUPEQ . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr SUPEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant SUPEQ Constant WILDCARD
##
## Ends in an error in state: 143.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr SUPEQ expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr SUPEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant SHIFTRIGHT XOR
##
## Ends in an error in state: 144.
##
## expr -> expr SHIFTRIGHT . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr SHIFTRIGHT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant SHIFTRIGHT Constant WILDCARD
##
## Ends in an error in state: 145.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr SHIFTRIGHT expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr SHIFTRIGHT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant PLUS XOR
##
## Ends in an error in state: 146.
##
## expr -> expr PLUS . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant PLUS Constant WILDCARD
##
## Ends in an error in state: 147.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr PLUS expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant MULT XOR
##
## Ends in an error in state: 148.
##
## expr -> expr MULT . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant MULT Constant WILDCARD
##
## Ends in an error in state: 149.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr MULT expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr MULT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant DOT XOR
##
## Ends in an error in state: 150.
##
## expr -> expr DOT . IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant MOD XOR
##
## Ends in an error in state: 152.
##
## expr -> expr MOD . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr MOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant MOD Constant WILDCARD
##
## Ends in an error in state: 153.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr MOD expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr MOD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant DIV XOR
##
## Ends in an error in state: 154.
##
## expr -> expr DIV . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant DIV Constant WILDCARD
##
## Ends in an error in state: 155.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr DIV expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr DIV expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant MINUS XOR
##
## Ends in an error in state: 156.
##
## expr -> expr MINUS . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant MINUS Constant WILDCARD
##
## Ends in an error in state: 157.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr MINUS expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant SHIFTLEFT XOR
##
## Ends in an error in state: 158.
##
## expr -> expr SHIFTLEFT . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr SHIFTLEFT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant SHIFTLEFT Constant WILDCARD
##
## Ends in an error in state: 159.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr SHIFTLEFT expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr SHIFTLEFT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant SUP XOR
##
## Ends in an error in state: 160.
##
## expr -> expr SUP . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant SUP Constant WILDCARD
##
## Ends in an error in state: 161.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr SUP expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr SUP expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant INFEQ XOR
##
## Ends in an error in state: 162.
##
## expr -> expr INFEQ . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr INFEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant INFEQ Constant WILDCARD
##
## Ends in an error in state: 163.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr INFEQ expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr INFEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant INF XOR
##
## Ends in an error in state: 164.
##
## expr -> expr INF . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant INF Constant WILDCARD
##
## Ends in an error in state: 165.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr INF expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr INF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant DOUBLEQUAL XOR
##
## Ends in an error in state: 166.
##
## expr -> expr DOUBLEQUAL . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr DOUBLEQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant DOUBLEQUAL Constant WILDCARD
##
## Ends in an error in state: 167.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr DOUBLEQUAL expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr DOUBLEQUAL expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant DIF XOR
##
## Ends in an error in state: 168.
##
## expr -> expr DIF . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr DIF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant DIF Constant WILDCARD
##
## Ends in an error in state: 169.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr DIF expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr DIF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant AMPERSAND XOR
##
## Ends in an error in state: 170.
##
## expr -> expr AMPERSAND . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant AMPERSAND Constant WILDCARD
##
## Ends in an error in state: 171.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr AMPERSAND expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr AMPERSAND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant PIPESUP XOR
##
## Ends in an error in state: 172.
##
## expr -> expr PIPESUP . function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr PIPESUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant PIPESUP Module_IDENT DOT
##
## Ends in an error in state: 173.
##
## function_call -> loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) . IDENT option(__anonymous_9) LPARENT loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 4, spurious reduction of production separated_nonempty_list(DOUBLECOLON,Module_IDENT) -> Module_IDENT
## In state 10, spurious reduction of production loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) -> separated_nonempty_list(DOUBLECOLON,Module_IDENT)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant PIPESUP IDENT XOR
##
## Ends in an error in state: 174.
##
## function_call -> loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT . option(__anonymous_9) LPARENT loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant PIPESUP IDENT DOUBLECOLON XOR
##
## Ends in an error in state: 175.
##
## option(__anonymous_9) -> DOUBLECOLON . INF separated_nonempty_list(COMMA,located(ktype)) SUP [ LPARENT ]
##
## The known suffix of the stack is as follows:
## DOUBLECOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT DOUBLECOLON INF XOR
##
## Ends in an error in state: 176.
##
## option(__anonymous_9) -> DOUBLECOLON INF . separated_nonempty_list(COMMA,located(ktype)) SUP [ LPARENT ]
##
## The known suffix of the stack is as follows:
## DOUBLECOLON INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT DOUBLECOLON INF IDENT RPARENT
##
## Ends in an error in state: 177.
##
## option(__anonymous_9) -> DOUBLECOLON INF separated_nonempty_list(COMMA,located(ktype)) . SUP [ LPARENT ]
##
## The known suffix of the stack is as follows:
## DOUBLECOLON INF separated_nonempty_list(COMMA,located(ktype))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production separated_nonempty_list(COMMA,located(ktype)) -> ktype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT DOUBLECOLON INF IDENT SUP XOR
##
## Ends in an error in state: 179.
##
## function_call -> loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT option(__anonymous_9) . LPARENT loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT option(__anonymous_9)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT LPARENT XOR
##
## Ends in an error in state: 180.
##
## function_call -> loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT option(__anonymous_9) LPARENT . loption(separated_nonempty_list(COMMA,located(expr))) RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) IDENT option(__anonymous_9) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL LPARENT Constant SEMICOLON
##
## Ends in an error in state: 183.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA AND AMPERSAND ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . [ RPARENT ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . COMMA separated_nonempty_list(COMMA,located(expr)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant PIPE XOR
##
## Ends in an error in state: 184.
##
## expr -> expr PIPE . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant PIPE Constant WILDCARD
##
## Ends in an error in state: 185.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr PIPE expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr PIPE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant OR XOR
##
## Ends in an error in state: 186.
##
## expr -> expr OR . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant OR Constant WILDCARD
##
## Ends in an error in state: 187.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr OR expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr OR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant AND XOR
##
## Ends in an error in state: 188.
##
## expr -> expr AND . expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant AND Constant WILDCARD
##
## Ends in an error in state: 189.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr AND expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr AND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL LPARENT Constant COMMA XOR
##
## Ends in an error in state: 190.
##
## separated_nonempty_list(COMMA,located(expr)) -> expr COMMA . separated_nonempty_list(COMMA,located(expr)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT LBRACE IDENT COLON Constant COMMA XOR
##
## Ends in an error in state: 193.
##
## separated_nonempty_list(COMMA,__anonymous_19) -> IDENT either_color_equal expr COMMA . separated_nonempty_list(COMMA,__anonymous_19) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT either_color_equal expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IDENT DOUBLECOLON XOR
##
## Ends in an error in state: 198.
##
## enum_resolver -> IDENT DOUBLECOLON . [ IDENT ]
## option(__anonymous_9) -> DOUBLECOLON . INF separated_nonempty_list(COMMA,located(ktype)) SUP [ LPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT DOUBLECOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL DOT XOR
##
## Ends in an error in state: 201.
##
## expr -> loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) enum_resolver . IDENT option(delimited(LPARENT,separated_nonempty_list(COMMA,located(expr)),RPARENT)) [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) enum_resolver
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL DOT IDENT WILDCARD
##
## Ends in an error in state: 202.
##
## expr -> loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) enum_resolver IDENT . option(delimited(LPARENT,separated_nonempty_list(COMMA,located(expr)),RPARENT)) [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(DOUBLECOLON,Module_IDENT)) enum_resolver IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL DOT IDENT LPARENT XOR
##
## Ends in an error in state: 203.
##
## option(delimited(LPARENT,separated_nonempty_list(COMMA,located(expr)),RPARENT)) -> LPARENT . separated_nonempty_list(COMMA,located(expr)) RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL CASES LBRACE OF Constant SEMICOLON
##
## Ends in an error in state: 209.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF ARROWFUNC AND AMPERSAND ]
## nonempty_list(__anonymous_20) -> OF expr . ARROWFUNC kbody [ ELSE ]
## nonempty_list(__anonymous_20) -> OF expr . ARROWFUNC kbody nonempty_list(__anonymous_20) [ ELSE ]
##
## The known suffix of the stack is as follows:
## OF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL CASES LBRACE OF Constant ARROWFUNC XOR
##
## Ends in an error in state: 210.
##
## nonempty_list(__anonymous_20) -> OF expr ARROWFUNC . kbody [ ELSE ]
## nonempty_list(__anonymous_20) -> OF expr ARROWFUNC . kbody nonempty_list(__anonymous_20) [ ELSE ]
##
## The known suffix of the stack is as follows:
## OF expr ARROWFUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL CASES LBRACE OF Constant ARROWFUNC LBRACE DOLLAR Constant RBRACE XOR
##
## Ends in an error in state: 211.
##
## nonempty_list(__anonymous_20) -> OF expr ARROWFUNC kbody . [ ELSE ]
## nonempty_list(__anonymous_20) -> OF expr ARROWFUNC kbody . nonempty_list(__anonymous_20) [ ELSE ]
##
## The known suffix of the stack is as follows:
## OF expr ARROWFUNC kbody
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL CASES LBRACE OF Constant ARROWFUNC LBRACE DOLLAR Constant RBRACE ELSE XOR
##
## Ends in an error in state: 214.
##
## expr -> CASES LBRACE nonempty_list(__anonymous_20) ELSE . kbody RBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## CASES LBRACE nonempty_list(__anonymous_20) ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL CASES LBRACE OF Constant ARROWFUNC LBRACE DOLLAR Constant RBRACE ELSE LBRACE DOLLAR Constant RBRACE XOR
##
## Ends in an error in state: 215.
##
## expr -> CASES LBRACE nonempty_list(__anonymous_20) ELSE kbody . RBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## CASES LBRACE nonempty_list(__anonymous_20) ELSE kbody
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IF LPARENT Constant SEMICOLON
##
## Ends in an error in state: 217.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> IF LPARENT expr . RPARENT kbody ELSE kbody [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF LPARENT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IF LPARENT Constant RPARENT XOR
##
## Ends in an error in state: 218.
##
## expr -> IF LPARENT expr RPARENT . kbody ELSE kbody [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF LPARENT expr RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IF LPARENT Constant RPARENT LBRACE DOLLAR Constant RBRACE XOR
##
## Ends in an error in state: 219.
##
## expr -> IF LPARENT expr RPARENT kbody . ELSE kbody [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF LPARENT expr RPARENT kbody
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL IF LPARENT Constant RPARENT LBRACE DOLLAR Constant RBRACE ELSE XOR
##
## Ends in an error in state: 220.
##
## expr -> IF LPARENT expr RPARENT kbody ELSE . kbody [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF LPARENT expr RPARENT kbody ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL MINUS Constant WILDCARD
##
## Ends in an error in state: 224.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> MINUS expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL NOT Constant WILDCARD
##
## Ends in an error in state: 225.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> NOT expr . [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## NOT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SIZEOF LPARENT COLON Constant SEMICOLON
##
## Ends in an error in state: 226.
##
## expr -> SIZEOF LPARENT COLON expr . RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPARENT COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SIZEOF LPARENT IDENT XOR
##
## Ends in an error in state: 228.
##
## expr -> SIZEOF LPARENT ktype . RPARENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPARENT ktype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant SEMICOLON
##
## Ends in an error in state: 230.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RPARENT PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> SWITCH LPARENT expr . RPARENT LBRACE nonempty_list(__anonymous_22) option(__anonymous_23) RBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## SWITCH LPARENT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT XOR
##
## Ends in an error in state: 231.
##
## expr -> SWITCH LPARENT expr RPARENT . LBRACE nonempty_list(__anonymous_22) option(__anonymous_23) RBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## SWITCH LPARENT expr RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE XOR
##
## Ends in an error in state: 232.
##
## expr -> SWITCH LPARENT expr RPARENT LBRACE . nonempty_list(__anonymous_22) option(__anonymous_23) RBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## SWITCH LPARENT expr RPARENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE DOT XOR
##
## Ends in an error in state: 233.
##
## s_case -> DOT . IDENT [ COMMA ARROWFUNC ]
## s_case -> DOT . IDENT LPARENT separated_nonempty_list(COMMA,__anonymous_24) RPARENT [ COMMA ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT XOR
##
## Ends in an error in state: 234.
##
## s_case -> DOT IDENT . [ COMMA ARROWFUNC ]
## s_case -> DOT IDENT . LPARENT separated_nonempty_list(COMMA,__anonymous_24) RPARENT [ COMMA ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## DOT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT LPARENT XOR
##
## Ends in an error in state: 235.
##
## s_case -> DOT IDENT LPARENT . separated_nonempty_list(COMMA,__anonymous_24) RPARENT [ COMMA ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## DOT IDENT LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT LPARENT WILDCARD XOR
##
## Ends in an error in state: 236.
##
## separated_nonempty_list(COMMA,__anonymous_24) -> WILDCARD . [ RPARENT ]
## separated_nonempty_list(COMMA,__anonymous_24) -> WILDCARD . COMMA separated_nonempty_list(COMMA,__anonymous_24) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## WILDCARD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT LPARENT WILDCARD COMMA XOR
##
## Ends in an error in state: 237.
##
## separated_nonempty_list(COMMA,__anonymous_24) -> WILDCARD COMMA . separated_nonempty_list(COMMA,__anonymous_24) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## WILDCARD COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT LPARENT IDENT XOR
##
## Ends in an error in state: 238.
##
## separated_nonempty_list(COMMA,__anonymous_24) -> IDENT . [ RPARENT ]
## separated_nonempty_list(COMMA,__anonymous_24) -> IDENT . COMMA separated_nonempty_list(COMMA,__anonymous_24) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT LPARENT IDENT COMMA XOR
##
## Ends in an error in state: 239.
##
## separated_nonempty_list(COMMA,__anonymous_24) -> IDENT COMMA . separated_nonempty_list(COMMA,__anonymous_24) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT ARROWFUNC XOR
##
## Ends in an error in state: 245.
##
## nonempty_list(__anonymous_22) -> separated_nonempty_list(COMMA,s_case) ARROWFUNC . kbody [ WILDCARD RBRACE ]
## nonempty_list(__anonymous_22) -> separated_nonempty_list(COMMA,s_case) ARROWFUNC . kbody nonempty_list(__anonymous_22) [ WILDCARD RBRACE ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(COMMA,s_case) ARROWFUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT ARROWFUNC LBRACE DOLLAR Constant RBRACE XOR
##
## Ends in an error in state: 246.
##
## nonempty_list(__anonymous_22) -> separated_nonempty_list(COMMA,s_case) ARROWFUNC kbody . [ WILDCARD RBRACE ]
## nonempty_list(__anonymous_22) -> separated_nonempty_list(COMMA,s_case) ARROWFUNC kbody . nonempty_list(__anonymous_22) [ WILDCARD RBRACE ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(COMMA,s_case) ARROWFUNC kbody
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT LPARENT IDENT RPARENT XOR
##
## Ends in an error in state: 247.
##
## separated_nonempty_list(COMMA,s_case) -> s_case . [ ARROWFUNC ]
## separated_nonempty_list(COMMA,s_case) -> s_case . COMMA separated_nonempty_list(COMMA,s_case) [ ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## s_case
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT COMMA XOR
##
## Ends in an error in state: 248.
##
## separated_nonempty_list(COMMA,s_case) -> s_case COMMA . separated_nonempty_list(COMMA,s_case) [ ARROWFUNC ]
##
## The known suffix of the stack is as follows:
## s_case COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT ARROWFUNC LBRACE DOLLAR Constant RBRACE WILDCARD XOR
##
## Ends in an error in state: 252.
##
## option(__anonymous_23) -> WILDCARD . ARROWFUNC kbody [ RBRACE ]
##
## The known suffix of the stack is as follows:
## WILDCARD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT ARROWFUNC LBRACE DOLLAR Constant RBRACE WILDCARD ARROWFUNC XOR
##
## Ends in an error in state: 253.
##
## option(__anonymous_23) -> WILDCARD ARROWFUNC . kbody [ RBRACE ]
##
## The known suffix of the stack is as follows:
## WILDCARD ARROWFUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL SWITCH LPARENT Constant RPARENT LBRACE DOT IDENT ARROWFUNC LBRACE DOLLAR Constant RBRACE WILDCARD ARROWFUNC LBRACE DOLLAR Constant RBRACE XOR
##
## Ends in an error in state: 255.
##
## expr -> SWITCH LPARENT expr RPARENT LBRACE nonempty_list(__anonymous_22) option(__anonymous_23) . RBRACE [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## SWITCH LPARENT expr RPARENT LBRACE nonempty_list(__anonymous_22) option(__anonymous_23)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE MULT IDENT EQUAL Constant RPARENT
##
## Ends in an error in state: 257.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## statement -> MULT IDENT EQUAL expr . SEMICOLON [ VAR MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## MULT IDENT EQUAL expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE IDENT XOR
##
## Ends in an error in state: 259.
##
## statement -> IDENT . EQUAL expr SEMICOLON [ VAR MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE IDENT EQUAL XOR
##
## Ends in an error in state: 260.
##
## statement -> IDENT EQUAL . expr SEMICOLON [ VAR MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## IDENT EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE IDENT EQUAL Constant RPARENT
##
## Ends in an error in state: 261.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## statement -> IDENT EQUAL expr . SEMICOLON [ VAR MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## IDENT EQUAL expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE DISCARD XOR
##
## Ends in an error in state: 263.
##
## statement -> DISCARD . expr SEMICOLON [ VAR MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## DISCARD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE DISCARD Constant RPARENT
##
## Ends in an error in state: 264.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## statement -> DISCARD expr . SEMICOLON [ VAR MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## DISCARD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE DISCARD Constant SEMICOLON XOR
##
## Ends in an error in state: 267.
##
## list(located(statement)) -> statement . list(located(statement)) [ DOLLAR ]
##
## The known suffix of the stack is as follows:
## statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE CONST XOR
##
## Ends in an error in state: 269.
##
## statement -> declarer . IDENT option(__anonymous_11) EQUAL expr SEMICOLON [ VAR MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## declarer
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE CONST IDENT XOR
##
## Ends in an error in state: 270.
##
## statement -> declarer IDENT . option(__anonymous_11) EQUAL expr SEMICOLON [ VAR MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## declarer IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE CONST IDENT COLON XOR
##
## Ends in an error in state: 271.
##
## option(__anonymous_11) -> COLON . ktype [ EQUAL ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE CONST IDENT COLON IDENT XOR
##
## Ends in an error in state: 273.
##
## statement -> declarer IDENT option(__anonymous_11) . EQUAL expr SEMICOLON [ VAR MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## declarer IDENT option(__anonymous_11)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE CONST IDENT EQUAL XOR
##
## Ends in an error in state: 274.
##
## statement -> declarer IDENT option(__anonymous_11) EQUAL . expr SEMICOLON [ VAR MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## declarer IDENT option(__anonymous_11) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE CONST IDENT EQUAL Constant RPARENT
##
## Ends in an error in state: 275.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## statement -> declarer IDENT option(__anonymous_11) EQUAL expr . SEMICOLON [ VAR MULT IDENT DOLLAR DISCARD CONST ]
##
## The known suffix of the stack is as follows:
## declarer IDENT option(__anonymous_11) EQUAL expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE DOLLAR XOR
##
## Ends in an error in state: 278.
##
## kbody -> LBRACE list(located(statement)) DOLLAR . expr RBRACE [ XOR WILDCARD SYSCALL SUPEQ SUP STRUCT SIG SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR OF MULT MOD MINUS INFEQ INF FUNCTION EXTERNAL EOF ENUM ELSE DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACE list(located(statement)) DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT LBRACE DOLLAR Constant SEMICOLON
##
## Ends in an error in state: 279.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT RBRACE PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## kbody -> LBRACE list(located(statement)) DOLLAR expr . RBRACE [ XOR WILDCARD SYSCALL SUPEQ SUP STRUCT SIG SHIFTRIGHT SHIFTLEFT SEMICOLON RPARENT RBRACE PLUS PIPESUP PIPE OR OPERATOR OF MULT MOD MINUS INFEQ INF FUNCTION EXTERNAL EOF ENUM ELSE DOUBLEQUAL DOT DIV DIF CONST COMMA ARROWFUNC AND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACE list(located(statement)) DOLLAR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL XOR
##
## Ends in an error in state: 281.
##
## fun_kbody -> EQUAL . expr SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT EQUAL Constant RPARENT
##
## Ends in an error in state: 282.
##
## expr -> expr . PLUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MINUS expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MULT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIV expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . MOD expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPE expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . XOR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AMPERSAND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTLEFT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SHIFTRIGHT expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . AND expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . OR expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUP expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . SUPEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . INFEQ expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOUBLEQUAL expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DIF expr [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . DOT IDENT [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## expr -> expr . PIPESUP function_call [ XOR SUPEQ SUP SHIFTRIGHT SHIFTLEFT SEMICOLON PLUS PIPESUP PIPE OR MULT MOD MINUS INFEQ INF DOUBLEQUAL DOT DIV DIF AND AMPERSAND ]
## fun_kbody -> EQUAL expr . SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EQUAL expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR AMPERSAND XOR
##
## Ends in an error in state: 290.
##
## operator_decl -> OPERATOR binary_operator_symbol . LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR AMPERSAND LPARENT XOR
##
## Ends in an error in state: 291.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT . IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR AMPERSAND LPARENT IDENT XOR
##
## Ends in an error in state: 292.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT . COLON ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR AMPERSAND LPARENT IDENT COLON XOR
##
## Ends in an error in state: 293.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON . ktype COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT XOR
##
## Ends in an error in state: 294.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype . COMMA IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA XOR
##
## Ends in an error in state: 295.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA . IDENT COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT XOR
##
## Ends in an error in state: 296.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT . COLON ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT COLON XOR
##
## Ends in an error in state: 297.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON . ktype RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT COLON IDENT XOR
##
## Ends in an error in state: 298.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype . RPARENT ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT COLON IDENT RPARENT XOR
##
## Ends in an error in state: 299.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT . ktype fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: OPERATOR AMPERSAND LPARENT IDENT COLON IDENT COMMA IDENT COLON IDENT RPARENT IDENT XOR
##
## Ends in an error in state: 300.
##
## operator_decl -> OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype . fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPERATOR binary_operator_symbol LPARENT IDENT COLON ktype COMMA IDENT COLON ktype RPARENT ktype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION XOR
##
## Ends in an error in state: 302.
##
## function_decl -> FUNCTION . IDENT option(__anonymous_14) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_15)) RPARENT option(ktype) fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT XOR
##
## Ends in an error in state: 303.
##
## function_decl -> FUNCTION IDENT . option(__anonymous_14) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_15)) RPARENT option(ktype) fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT INF XOR
##
## Ends in an error in state: 304.
##
## option(__anonymous_14) -> INF . separated_nonempty_list(COMMA,__anonymous_13) SUP [ LPARENT ]
##
## The known suffix of the stack is as follows:
## INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT INF IDENT XOR
##
## Ends in an error in state: 305.
##
## separated_nonempty_list(COMMA,__anonymous_13) -> IDENT . [ SUP ]
## separated_nonempty_list(COMMA,__anonymous_13) -> IDENT . COMMA separated_nonempty_list(COMMA,__anonymous_13) [ SUP ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT INF IDENT COMMA XOR
##
## Ends in an error in state: 306.
##
## separated_nonempty_list(COMMA,__anonymous_13) -> IDENT COMMA . separated_nonempty_list(COMMA,__anonymous_13) [ SUP ]
##
## The known suffix of the stack is as follows:
## IDENT COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT INF IDENT SUP XOR
##
## Ends in an error in state: 310.
##
## function_decl -> FUNCTION IDENT option(__anonymous_14) . LPARENT loption(separated_nonempty_list(COMMA,__anonymous_15)) RPARENT option(ktype) fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT option(__anonymous_14)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT XOR
##
## Ends in an error in state: 311.
##
## function_decl -> FUNCTION IDENT option(__anonymous_14) LPARENT . loption(separated_nonempty_list(COMMA,__anonymous_15)) RPARENT option(ktype) fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT option(__anonymous_14) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT IDENT XOR
##
## Ends in an error in state: 312.
##
## separated_nonempty_list(COMMA,__anonymous_15) -> IDENT . COLON ktype [ RPARENT ]
## separated_nonempty_list(COMMA,__anonymous_15) -> IDENT . COLON ktype COMMA separated_nonempty_list(COMMA,__anonymous_15) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT IDENT COLON XOR
##
## Ends in an error in state: 313.
##
## separated_nonempty_list(COMMA,__anonymous_15) -> IDENT COLON . ktype [ RPARENT ]
## separated_nonempty_list(COMMA,__anonymous_15) -> IDENT COLON . ktype COMMA separated_nonempty_list(COMMA,__anonymous_15) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT IDENT COLON IDENT XOR
##
## Ends in an error in state: 314.
##
## separated_nonempty_list(COMMA,__anonymous_15) -> IDENT COLON ktype . [ RPARENT ]
## separated_nonempty_list(COMMA,__anonymous_15) -> IDENT COLON ktype . COMMA separated_nonempty_list(COMMA,__anonymous_15) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT COLON ktype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT IDENT COLON IDENT COMMA XOR
##
## Ends in an error in state: 315.
##
## separated_nonempty_list(COMMA,__anonymous_15) -> IDENT COLON ktype COMMA . separated_nonempty_list(COMMA,__anonymous_15) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## IDENT COLON ktype COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT XOR
##
## Ends in an error in state: 319.
##
## function_decl -> FUNCTION IDENT option(__anonymous_14) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_15)) RPARENT . option(ktype) fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT option(__anonymous_14) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_15)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: FUNCTION IDENT LPARENT RPARENT IDENT XOR
##
## Ends in an error in state: 320.
##
## function_decl -> FUNCTION IDENT option(__anonymous_14) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_15)) RPARENT option(ktype) . fun_kbody [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT option(__anonymous_14) LPARENT loption(separated_nonempty_list(COMMA,__anonymous_15)) RPARENT option(ktype)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL XOR
##
## Ends in an error in state: 323.
##
## external_func_decl -> EXTERNAL . IDENT LPARENT loption(separated_nonempty_list(COMMA,located(ctype))) option(__anonymous_5) RPARENT option(ctype) option(__anonymous_6) SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL IDENT XOR
##
## Ends in an error in state: 324.
##
## external_func_decl -> EXTERNAL IDENT . LPARENT loption(separated_nonempty_list(COMMA,located(ctype))) option(__anonymous_5) RPARENT option(ctype) option(__anonymous_6) SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL IDENT LPARENT XOR
##
## Ends in an error in state: 325.
##
## external_func_decl -> EXTERNAL IDENT LPARENT . loption(separated_nonempty_list(COMMA,located(ctype))) option(__anonymous_5) RPARENT option(ctype) option(__anonymous_6) SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL IDENT LPARENT SEMICOLON XOR
##
## Ends in an error in state: 328.
##
## option(__anonymous_5) -> SEMICOLON . TRIPLEDOT [ RPARENT ]
##
## The known suffix of the stack is as follows:
## SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL IDENT LPARENT SEMICOLON TRIPLEDOT XOR
##
## Ends in an error in state: 330.
##
## external_func_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(ctype))) option(__anonymous_5) . RPARENT option(ctype) option(__anonymous_6) SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(ctype))) option(__anonymous_5)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL IDENT LPARENT RPARENT XOR
##
## Ends in an error in state: 331.
##
## external_func_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(ctype))) option(__anonymous_5) RPARENT . option(ctype) option(__anonymous_6) SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(ctype))) option(__anonymous_5) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL IDENT LPARENT RPARENT IDENT XOR
##
## Ends in an error in state: 332.
##
## external_func_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(ctype))) option(__anonymous_5) RPARENT option(ctype) . option(__anonymous_6) SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(ctype))) option(__anonymous_5) RPARENT option(ctype)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL IDENT LPARENT RPARENT EQUAL XOR
##
## Ends in an error in state: 333.
##
## option(__anonymous_6) -> EQUAL . String_lit [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL IDENT LPARENT RPARENT EQUAL String_lit XOR
##
## Ends in an error in state: 335.
##
## external_func_decl -> EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(ctype))) option(__anonymous_5) RPARENT option(ctype) option(__anonymous_6) . SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL IDENT LPARENT loption(separated_nonempty_list(COMMA,located(ctype))) option(__anonymous_5) RPARENT option(ctype) option(__anonymous_6)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL IDENT LPARENT IDENT XOR
##
## Ends in an error in state: 337.
##
## separated_nonempty_list(COMMA,located(ctype)) -> ctype . [ SEMICOLON RPARENT ]
## separated_nonempty_list(COMMA,located(ctype)) -> ctype . COMMA separated_nonempty_list(COMMA,located(ctype)) [ SEMICOLON RPARENT ]
##
## The known suffix of the stack is as follows:
## ctype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: EXTERNAL IDENT LPARENT IDENT COMMA XOR
##
## Ends in an error in state: 338.
##
## separated_nonempty_list(COMMA,located(ctype)) -> ctype COMMA . separated_nonempty_list(COMMA,located(ctype)) [ SEMICOLON RPARENT ]
##
## The known suffix of the stack is as follows:
## ctype COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM XOR
##
## Ends in an error in state: 340.
##
## enum_decl -> ENUM . option(__anonymous_0) LBRACE loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE IDENT SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM LPARENT XOR
##
## Ends in an error in state: 341.
##
## option(__anonymous_0) -> LPARENT . separated_nonempty_list(COMMA,located(IDENT)) RPARENT [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM LPARENT IDENT RPARENT XOR
##
## Ends in an error in state: 344.
##
## enum_decl -> ENUM option(__anonymous_0) . LBRACE loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE IDENT SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## ENUM option(__anonymous_0)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM LBRACE XOR
##
## Ends in an error in state: 345.
##
## enum_decl -> ENUM option(__anonymous_0) LBRACE . loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE IDENT SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## ENUM option(__anonymous_0) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM LBRACE IDENT XOR
##
## Ends in an error in state: 346.
##
## enum_assoc -> IDENT . option(__anonymous_1) [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM LBRACE IDENT LPARENT XOR
##
## Ends in an error in state: 347.
##
## option(__anonymous_1) -> LPARENT . separated_nonempty_list(COMMA,located(ktype)) RPARENT [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM LBRACE IDENT LPARENT IDENT SUP
##
## Ends in an error in state: 348.
##
## option(__anonymous_1) -> LPARENT separated_nonempty_list(COMMA,located(ktype)) . RPARENT [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT separated_nonempty_list(COMMA,located(ktype))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 17, spurious reduction of production separated_nonempty_list(COMMA,located(ktype)) -> ktype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM LBRACE RBRACE XOR
##
## Ends in an error in state: 353.
##
## enum_decl -> ENUM option(__anonymous_0) LBRACE loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE . IDENT SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## ENUM option(__anonymous_0) LBRACE loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM LBRACE RBRACE IDENT XOR
##
## Ends in an error in state: 354.
##
## enum_decl -> ENUM option(__anonymous_0) LBRACE loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE IDENT . SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## ENUM option(__anonymous_0) LBRACE loption(separated_nonempty_list(COMMA,enum_assoc)) RBRACE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM LBRACE IDENT LPARENT IDENT RPARENT XOR
##
## Ends in an error in state: 356.
##
## separated_nonempty_list(COMMA,enum_assoc) -> enum_assoc . [ RBRACE ]
## separated_nonempty_list(COMMA,enum_assoc) -> enum_assoc . COMMA separated_nonempty_list(COMMA,enum_assoc) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## enum_assoc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: ENUM LBRACE IDENT COMMA XOR
##
## Ends in an error in state: 357.
##
## separated_nonempty_list(COMMA,enum_assoc) -> enum_assoc COMMA . separated_nonempty_list(COMMA,enum_assoc) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## enum_assoc COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: CONST XOR
##
## Ends in an error in state: 359.
##
## const_decl -> CONST . Constant EQUAL Integer_lit SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
## const_decl -> CONST . Constant EQUAL String_lit SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
## const_decl -> CONST . Constant EQUAL Float_lit SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: CONST Constant XOR
##
## Ends in an error in state: 360.
##
## const_decl -> CONST Constant . EQUAL Integer_lit SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
## const_decl -> CONST Constant . EQUAL String_lit SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
## const_decl -> CONST Constant . EQUAL Float_lit SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: CONST Constant EQUAL XOR
##
## Ends in an error in state: 361.
##
## const_decl -> CONST Constant EQUAL . Integer_lit SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
## const_decl -> CONST Constant EQUAL . String_lit SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
## const_decl -> CONST Constant EQUAL . Float_lit SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: CONST Constant EQUAL String_lit XOR
##
## Ends in an error in state: 362.
##
## const_decl -> CONST Constant EQUAL String_lit . SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant EQUAL String_lit
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: CONST Constant EQUAL Integer_lit XOR
##
## Ends in an error in state: 364.
##
## const_decl -> CONST Constant EQUAL Integer_lit . SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant EQUAL Integer_lit
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: CONST Constant EQUAL Float_lit XOR
##
## Ends in an error in state: 366.
##
## const_decl -> CONST Constant EQUAL Float_lit . SEMICOLON [ SYSCALL STRUCT SIG OPERATOR FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant EQUAL Float_lit
##

<YOUR SYNTAX ERROR MESSAGE HERE>

modul: CONST Constant EQUAL Float_lit SEMICOLON XOR
##
## Ends in an error in state: 372.
##
## list(module_nodes) -> module_nodes . list(module_nodes) [ EOF ]
##
## The known suffix of the stack is as follows:
## module_nodes
##

<YOUR SYNTAX ERROR MESSAGE HERE>

