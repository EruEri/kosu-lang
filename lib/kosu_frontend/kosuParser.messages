kosu_module: WILDCARD
##
## Ends in an error in state: 0.
##
## kosu_module' -> . kosu_module [ # ]
##
## The known suffix of the stack is as follows:
##
##

Expecting "struct", "enum", "fn", "const", "external"

kosu_module: STRUCT WILDCARD
##
## Ends in an error in state: 1.
##
## kosu_struct_decl -> STRUCT . Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) LBRACE nonempty_list(terminated(__anonymous_0,COMMA)) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_struct_decl -> STRUCT . Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) LBRACE separated_nonempty_list(COMMA,__anonymous_0) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

Expecting "<identifier>"

kosu_module: STRUCT Identifier WILDCARD
##
## Ends in an error in state: 2.
##
## kosu_struct_decl -> STRUCT Identifier . loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) LBRACE nonempty_list(terminated(__anonymous_0,COMMA)) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_struct_decl -> STRUCT Identifier . loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) LBRACE separated_nonempty_list(COMMA,__anonymous_0) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## STRUCT Identifier
##

Expecting "(" or "{"

kosu_module: ENUM Identifier LPARENT WILDCARD
##
## Ends in an error in state: 3.
##
## loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) -> LPARENT . separated_nonempty_list(COMMA,loc_poly_vars) RPARENT [ LBRACE COLON ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

Expecting "<'identifier>"

kosu_module: FUNCTION PolymorphicVar WILDCARD
##
## Ends in an error in state: 4.
##
## separated_nonempty_list(COMMA,loc_poly_vars) -> PolymorphicVar . [ RPARENT DOT ]
## separated_nonempty_list(COMMA,loc_poly_vars) -> PolymorphicVar . COMMA separated_nonempty_list(COMMA,loc_poly_vars) [ RPARENT DOT ]
##
## The known suffix of the stack is as follows:
## PolymorphicVar
##

Expecting ")" or ","

kosu_module: FUNCTION PolymorphicVar COMMA WILDCARD
##
## Ends in an error in state: 5.
##
## separated_nonempty_list(COMMA,loc_poly_vars) -> PolymorphicVar COMMA . separated_nonempty_list(COMMA,loc_poly_vars) [ RPARENT DOT ]
##
## The known suffix of the stack is as follows:
## PolymorphicVar COMMA
##

Expecting "<'identifier>"

kosu_module: ENUM Identifier LPARENT PolymorphicVar DOT
##
## Ends in an error in state: 7.
##
## loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) -> LPARENT separated_nonempty_list(COMMA,loc_poly_vars) . RPARENT [ LBRACE COLON ]
##
## The known suffix of the stack is as follows:
## LPARENT separated_nonempty_list(COMMA,loc_poly_vars)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 4, spurious reduction of production separated_nonempty_list(COMMA,loc_poly_vars) -> PolymorphicVar
##

Expecting ")"

kosu_module: STRUCT Identifier LPARENT PolymorphicVar RPARENT WILDCARD
##
## Ends in an error in state: 9.
##
## kosu_struct_decl -> STRUCT Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) . LBRACE nonempty_list(terminated(__anonymous_0,COMMA)) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_struct_decl -> STRUCT Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) . LBRACE separated_nonempty_list(COMMA,__anonymous_0) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## STRUCT Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars)))
##

Expecting "{"

kosu_module: STRUCT Identifier LBRACE WILDCARD
##
## Ends in an error in state: 10.
##
## kosu_struct_decl -> STRUCT Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) LBRACE . nonempty_list(terminated(__anonymous_0,COMMA)) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_struct_decl -> STRUCT Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) LBRACE . separated_nonempty_list(COMMA,__anonymous_0) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## STRUCT Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) LBRACE
##

Expecting "<identifier>"

kosu_module: STRUCT Identifier LBRACE Identifier WILDCARD
##
## Ends in an error in state: 11.
##
## nonempty_list(terminated(__anonymous_0,COMMA)) -> Identifier . COLON kosu_type COMMA [ RBRACE ]
## nonempty_list(terminated(__anonymous_0,COMMA)) -> Identifier . COLON kosu_type COMMA nonempty_list(terminated(__anonymous_0,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> Identifier . COLON kosu_type [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> Identifier . COLON kosu_type COMMA separated_nonempty_list(COMMA,__anonymous_0) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Identifier
##

Expecting ":"

kosu_module: STRUCT Identifier LBRACE Identifier COLON WILDCARD
##
## Ends in an error in state: 12.
##
## nonempty_list(terminated(__anonymous_0,COMMA)) -> Identifier COLON . kosu_type COMMA [ RBRACE ]
## nonempty_list(terminated(__anonymous_0,COMMA)) -> Identifier COLON . kosu_type COMMA nonempty_list(terminated(__anonymous_0,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> Identifier COLON . kosu_type [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> Identifier COLON . kosu_type COMMA separated_nonempty_list(COMMA,__anonymous_0) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Identifier COLON
##

Expecting "<type identifier>"

kosu_module: CONST Constant COLON STAR WILDCARD
##
## Ends in an error in state: 13.
##
## kosu_type -> STAR . CONST kosu_type [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
## kosu_type -> STAR . MUT kosu_type [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
## kosu_type -> STAR . VAR kosu_type [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## STAR
##

Expecting "const", "mut" or "var"

kosu_module: CONST Constant COLON STAR VAR WILDCARD
##
## Ends in an error in state: 14.
##
## kosu_type -> STAR VAR . kosu_type [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## STAR VAR
##

Expecting "<type identifier>"

kosu_module: CONST Constant COLON ModuleIdentifier WILDCARD
##
## Ends in an error in state: 16.
##
## separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)) -> ModuleIdentifier . [ SEMICOLON DOT ]
## separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)) -> ModuleIdentifier . DOUBLECOLON separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)) [ SEMICOLON DOT ]
##
## The known suffix of the stack is as follows:
## ModuleIdentifier
##

Expecting "::", ";" or "."

kosu_module: CONST Constant COLON ModuleIdentifier DOUBLECOLON WILDCARD
##
## Ends in an error in state: 17.
##
## separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)) -> ModuleIdentifier DOUBLECOLON . separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)) [ SEMICOLON DOT ]
##
## The known suffix of the stack is as follows:
## ModuleIdentifier DOUBLECOLON
##

Expecting "<module identifier>"

kosu_module: CONST Constant COLON LPARENT WILDCARD
##
## Ends in an error in state: 19.
##
## kosu_type -> LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_type))) RPARENT [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

Expecting "<type identifier>" or ")"

kosu_module: CONST Constant COLON FUNCTION WILDCARD
##
## Ends in an error in state: 20.
##
## kosu_type -> FUNCTION . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_type))) RPARENT kosu_type [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION
##

Expecting "("

kosu_module: CONST Constant COLON FUNCTION LPARENT WILDCARD
##
## Ends in an error in state: 21.
##
## kosu_type -> FUNCTION LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_type))) RPARENT kosu_type [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION LPARENT
##

Expecting "<type identifier>" or ")"

kosu_module: CONST Constant COLON CLOSURE WILDCARD
##
## Ends in an error in state: 22.
##
## kosu_type -> CLOSURE . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_type))) RPARENT kosu_type [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CLOSURE
##

Expecting "("

kosu_module: CONST Constant COLON CLOSURE LPARENT WILDCARD
##
## Ends in an error in state: 23.
##
## kosu_type -> CLOSURE LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_type))) RPARENT kosu_type [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CLOSURE LPARENT
##

Expecting "<type identifier>" or ")"

kosu_module: CONST Constant COLON ARRAY WILDCARD
##
## Ends in an error in state: 24.
##
## kosu_type -> ARRAY . LPARENT IntegerLitteral COLON kosu_type RPARENT [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## ARRAY
##

Expecting "("

kosu_module: CONST Constant COLON ARRAY LPARENT WILDCARD
##
## Ends in an error in state: 25.
##
## kosu_type -> ARRAY LPARENT . IntegerLitteral COLON kosu_type RPARENT [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## ARRAY LPARENT
##

Expecting "<number>"

kosu_module: CONST Constant COLON ARRAY LPARENT IntegerLitteral WILDCARD
##
## Ends in an error in state: 26.
##
## kosu_type -> ARRAY LPARENT IntegerLitteral . COLON kosu_type RPARENT [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## ARRAY LPARENT IntegerLitteral
##

Expecting ":"

kosu_module: CONST Constant COLON ARRAY LPARENT IntegerLitteral COLON WILDCARD
##
## Ends in an error in state: 27.
##
## kosu_type -> ARRAY LPARENT IntegerLitteral COLON . kosu_type RPARENT [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## ARRAY LPARENT IntegerLitteral COLON
##

Expecting "<type identifier>"

kosu_module: CONST Constant COLON ModuleIdentifier SEMICOLON
##
## Ends in an error in state: 28.
##
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) -> separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)) . DOT [ PREFIX_TILDE PREFIX_QUESTIONMARK PREFIX_EXCLA Identifier DOT Constant CROISILLION BACKTICK ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)) -> ModuleIdentifier
##

Expecting "."

kosu_module: CONST Constant COLON ModuleIdentifier DOT WILDCARD
##
## Ends in an error in state: 30.
##
## kosu_type -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . Identifier LPARENT separated_nonempty_list(COMMA,located(kosu_type)) RPARENT [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
## kosu_type -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . Identifier [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
## kosu_type -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . CROISILLION Identifier [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT))
##

Expecting "<identifier>" or "#"

kosu_module: CONST Constant COLON Identifier WILDCARD
##
## Ends in an error in state: 31.
##
## kosu_type -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier . LPARENT separated_nonempty_list(COMMA,located(kosu_type)) RPARENT [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
## kosu_type -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier . [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier
##

Expecting "("

kosu_module: CONST Constant COLON Identifier LPARENT WILDCARD
##
## Ends in an error in state: 32.
##
## kosu_type -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier LPARENT . separated_nonempty_list(COMMA,located(kosu_type)) RPARENT [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier LPARENT
##

Expecting "<type identifier>"

kosu_module: CONST Constant COLON LPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 35.
##
## separated_nonempty_list(COMMA,located(kosu_type)) -> kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,located(kosu_type)) -> kosu_type . COMMA separated_nonempty_list(COMMA,located(kosu_type)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## kosu_type
##

Expecting ")" or ","

kosu_module: CONST Constant COLON LPARENT Identifier COMMA WILDCARD
##
## Ends in an error in state: 36.
##
## separated_nonempty_list(COMMA,located(kosu_type)) -> kosu_type COMMA . separated_nonempty_list(COMMA,located(kosu_type)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## kosu_type COMMA
##

Expecting "<type identifier>"

kosu_module: CONST Constant COLON CROISILLION WILDCARD
##
## Ends in an error in state: 38.
##
## kosu_type -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) CROISILLION . Identifier [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) CROISILLION
##

Expecting "<identifier>"

kosu_module: CONST Constant COLON ARRAY LPARENT IntegerLitteral COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 40.
##
## kosu_type -> ARRAY LPARENT IntegerLitteral COLON kosu_type . RPARENT [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## ARRAY LPARENT IntegerLitteral COLON kosu_type
##

Expecting ")"

kosu_module: CONST Constant COLON CLOSURE LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 44.
##
## kosu_type -> CLOSURE LPARENT loption(separated_nonempty_list(COMMA,located(kosu_type))) RPARENT . kosu_type [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CLOSURE LPARENT loption(separated_nonempty_list(COMMA,located(kosu_type))) RPARENT
##

Expecting "<type identifier>"

kosu_module: CONST Constant COLON FUNCTION LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 47.
##
## kosu_type -> FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kosu_type))) RPARENT . kosu_type [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION LPARENT loption(separated_nonempty_list(COMMA,located(kosu_type))) RPARENT
##

Expecting "<type identifier>"

kosu_module: CONST Constant COLON STAR MUT WILDCARD
##
## Ends in an error in state: 52.
##
## kosu_type -> STAR MUT . kosu_type [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## STAR MUT
##

Expecting "<type identifier>"

kosu_module: CONST Constant COLON STAR CONST WILDCARD
##
## Ends in an error in state: 54.
##
## kosu_type -> STAR CONST . kosu_type [ STRUCT RSQBRACE RPARENT RBRACE OPAQUE MINUS_SUP LBRACE FUNCTION EXTERNAL EQUAL EOF ENUM CONST COMMA ]
##
## The known suffix of the stack is as follows:
## STAR CONST
##

Expecting "<type identifier>"

kosu_module: STRUCT Identifier LBRACE Identifier COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 56.
##
## nonempty_list(terminated(__anonymous_0,COMMA)) -> Identifier COLON kosu_type . COMMA [ RBRACE ]
## nonempty_list(terminated(__anonymous_0,COMMA)) -> Identifier COLON kosu_type . COMMA nonempty_list(terminated(__anonymous_0,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> Identifier COLON kosu_type . [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> Identifier COLON kosu_type . COMMA separated_nonempty_list(COMMA,__anonymous_0) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Identifier COLON kosu_type
##

Expecting "," or "}"

kosu_module: STRUCT Identifier LBRACE Identifier COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 57.
##
## nonempty_list(terminated(__anonymous_0,COMMA)) -> Identifier COLON kosu_type COMMA . [ RBRACE ]
## nonempty_list(terminated(__anonymous_0,COMMA)) -> Identifier COLON kosu_type COMMA . nonempty_list(terminated(__anonymous_0,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> Identifier COLON kosu_type COMMA . separated_nonempty_list(COMMA,__anonymous_0) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Identifier COLON kosu_type COMMA
##

Expecting "<identifier>" or "}"

kosu_module: OPAQUE WILDCARD
##
## Ends in an error in state: 64.
##
## kosu_opaque_decl -> OPAQUE . TYPE Identifier [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPAQUE
##

Expecting "type"

kosu_module: OPAQUE TYPE WILDCARD
##
## Ends in an error in state: 65.
##
## kosu_opaque_decl -> OPAQUE TYPE . Identifier [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## OPAQUE TYPE
##

Expecting "identifier>"

kosu_module: FUNCTION WILDCARD
##
## Ends in an error in state: 67.
##
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) Identifier LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_TILDE LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK STAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION . loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION
##

Expecting "~", "!", "?", "`", "<'identifier>" or "<identifier>"

kosu_module: FUNCTION PolymorphicVar RPARENT
##
## Ends in an error in state: 68.
##
## loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) -> separated_nonempty_list(COMMA,loc_poly_vars) . DOT [ PREFIX_TILDE PREFIX_QUESTIONMARK PREFIX_EXCLA Identifier BACKTICK ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(COMMA,loc_poly_vars)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 4, spurious reduction of production separated_nonempty_list(COMMA,loc_poly_vars) -> PolymorphicVar
##

Expecting "."

kosu_module: FUNCTION PolymorphicVar DOT WILDCARD
##
## Ends in an error in state: 70.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . Identifier LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . PREFIX_TILDE LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK STAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) . BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT))
##

Expecting "~", "!", "?", "`" or "<identifier>"

kosu_module: FUNCTION PREFIX_TILDE WILDCARD
##
## Ends in an error in state: 71.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_TILDE . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_TILDE
##

Expecting "("

kosu_module: FUNCTION PREFIX_TILDE LPARENT WILDCARD
##
## Ends in an error in state: 72.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_TILDE LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_TILDE LPARENT
##

Expecting ")" or "<identifier>"

kosu_module: FUNCTION PREFIX_TILDE LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 76.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_TILDE LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_TILDE LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

Expecting "<type identifier>"

kosu_module: FUNCTION PREFIX_TILDE LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 77.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_TILDE LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_TILDE LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

Expecting "=" or "{"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE WILDCARD
##
## Ends in an error in state: 78.
##
## kosu_block -> LBRACE . kosu_block_base RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE OF MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM ELSE DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Expecting "const", "var", "mut", "discard" or "<expression>"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE VAR WHILE
##
## Ends in an error in state: 79.
##
## kosu_statement_base -> VAR . kosu_pattern option(preceded(COLON,located(kosu_type))) EQUAL kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## VAR
##

Expecting "<pattern>"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT WHILE
##
## Ends in an error in state: 84.
##
## kosu_pattern -> LPARENT . kosu_pattern AS Identifier RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS PREFIX_TILDE RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS PREFIX_EXCLA RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS PREFIX_QUESTIONMARK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK STAR BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK MINUS BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK PIPE BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK INFIX_PIPE BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK INFIX_AMPERSAND BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK INFIX_EQUAL BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK INFIX_INF BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK INFIX_SUP BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK INFIX_CARET BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK INFIX_PLUS BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK INFIX_MINUS BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK INFIX_MULT BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK INFIX_DIV BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK INFIX_DOLLAR BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . kosu_pattern AS BACKTICK INFIX_PERCENT BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_pattern))) RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

Expecting ")" or "<pattern>"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST ModuleIdentifier DOT WILDCARD
##
## Ends in an error in state: 93.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . Identifier [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . PREFIX_TILDE [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . PREFIX_EXCLA [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . PREFIX_QUESTIONMARK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK STAR BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK MINUS BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK PIPE BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_PIPE BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_AMPERSAND BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_EQUAL BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_INF BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_SUP BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_CARET BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_PLUS BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_MINUS BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_MULT BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_DIV BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_DOLLAR BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_PERCENT BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . DOT Identifier loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_pattern)))) [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . Identifier DOUBLECOLON Identifier loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_pattern)))) [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . Identifier LBRACE nonempty_list(terminated(__anonymous_3,COMMA)) RBRACE [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . Identifier LBRACE separated_nonempty_list(COMMA,__anonymous_3) RBRACE [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT))
##

Expecting "~", "?", "!", "`", "." or "<identifier>"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST Identifier WILDCARD
##
## Ends in an error in state: 97.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier . [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier . DOUBLECOLON Identifier loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_pattern)))) [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier . LBRACE nonempty_list(terminated(__anonymous_3,COMMA)) RBRACE [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier . LBRACE separated_nonempty_list(COMMA,__anonymous_3) RBRACE [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier
##

Expecting "::", "{"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST Identifier LBRACE WILDCARD
##
## Ends in an error in state: 98.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier LBRACE . nonempty_list(terminated(__anonymous_3,COMMA)) RBRACE [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier LBRACE . separated_nonempty_list(COMMA,__anonymous_3) RBRACE [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier LBRACE
##

Expecting "<identifier>"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST Identifier LBRACE Identifier WILDCARD
##
## Ends in an error in state: 99.
##
## nonempty_list(terminated(__anonymous_3,COMMA)) -> Identifier . option(preceded(EQUAL,located(kosu_pattern))) COMMA [ RBRACE ]
## nonempty_list(terminated(__anonymous_3,COMMA)) -> Identifier . option(preceded(EQUAL,located(kosu_pattern))) COMMA nonempty_list(terminated(__anonymous_3,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_3) -> Identifier . option(preceded(EQUAL,located(kosu_pattern))) [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_3) -> Identifier . option(preceded(EQUAL,located(kosu_pattern))) COMMA separated_nonempty_list(COMMA,__anonymous_3) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Identifier
##

Expecting "=", "," or "}"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST Identifier LBRACE Identifier EQUAL WHILE
##
## Ends in an error in state: 100.
##
## option(preceded(EQUAL,located(kosu_pattern))) -> EQUAL . kosu_pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

Expecting "<pattern>"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST Identifier LBRACE Identifier EQUAL IntegerLitteral WILDCARD
##
## Ends in an error in state: 101.
##
## kosu_pattern -> kosu_pattern . PIPE kosu_pattern [ RBRACE PIPE COMMA ]
## option(preceded(EQUAL,located(kosu_pattern))) -> EQUAL kosu_pattern . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## EQUAL kosu_pattern
##

Expecting "|", "}" or ","

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST IntegerLitteral PIPE WHILE
##
## Ends in an error in state: 102.
##
## kosu_pattern -> kosu_pattern PIPE . kosu_pattern [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## kosu_pattern PIPE
##

Expecting "<pattern>"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST MINUS WILDCARD
##
## Ends in an error in state: 104.
##
## kosu_pattern -> boption(MINUS) . IntegerLitteral [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## boption(MINUS)
##

Expecting "<number>"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST Identifier LBRACE Identifier COMMA WILDCARD
##
## Ends in an error in state: 107.
##
## nonempty_list(terminated(__anonymous_3,COMMA)) -> Identifier option(preceded(EQUAL,located(kosu_pattern))) COMMA . [ RBRACE ]
## nonempty_list(terminated(__anonymous_3,COMMA)) -> Identifier option(preceded(EQUAL,located(kosu_pattern))) COMMA . nonempty_list(terminated(__anonymous_3,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_3) -> Identifier option(preceded(EQUAL,located(kosu_pattern))) COMMA . separated_nonempty_list(COMMA,__anonymous_3) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Identifier option(preceded(EQUAL,located(kosu_pattern))) COMMA
##

Expecting "}", or "<identifier>"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST Identifier DOUBLECOLON WILDCARD
##
## Ends in an error in state: 114.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier DOUBLECOLON . Identifier loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_pattern)))) [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier DOUBLECOLON
##

Expecting "<identifier>"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST Identifier DOUBLECOLON Identifier WILDCARD
##
## Ends in an error in state: 115.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier DOUBLECOLON Identifier . loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_pattern)))) [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier DOUBLECOLON Identifier
##

Expecting "(", ")", "}", "|", "->", "=", ",", ":" or "as"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST DOT Identifier LPARENT WHILE
##
## Ends in an error in state: 116.
##
## loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_pattern)))) -> LPARENT . separated_nonempty_list(COMMA,located(kosu_pattern)) RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

Expecting "<pattern>"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral COMMA IntegerLitteral WILDCARD
##
## Ends in an error in state: 119.
##
## kosu_pattern -> kosu_pattern . PIPE kosu_pattern [ RPARENT PIPE COMMA ]
## separated_nonempty_list(COMMA,located(kosu_pattern)) -> kosu_pattern . [ RPARENT ]
## separated_nonempty_list(COMMA,located(kosu_pattern)) -> kosu_pattern . COMMA separated_nonempty_list(COMMA,located(kosu_pattern)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## kosu_pattern
##

Expecting "|", ")" or ","

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral COMMA WHILE
##
## Ends in an error in state: 120.
##
## separated_nonempty_list(COMMA,located(kosu_pattern)) -> kosu_pattern COMMA . separated_nonempty_list(COMMA,located(kosu_pattern)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## kosu_pattern COMMA
##

Expecting "<pattern>"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST DOT WILDCARD
##
## Ends in an error in state: 123.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) DOT . Identifier loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_pattern)))) [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) DOT
##

Expecting "<identifier>"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST DOT Identifier WILDCARD
##
## Ends in an error in state: 124.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) DOT Identifier . loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_pattern)))) [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) DOT Identifier
##

Expecting "(", ")", "}", "|", "->", "=", ",", ":" or "as"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK WILDCARD
##
## Ends in an error in state: 126.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . STAR BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . MINUS BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . PIPE BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_PIPE BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_AMPERSAND BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_EQUAL BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_INF BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_SUP BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_CARET BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_PLUS BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_MINUS BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_MULT BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_DIV BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_DOLLAR BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_PERCENT BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK
##

Expecting "*", "-", "|", "&", "=", "<", ">", "^", "+", "-", "/", "$" or "%"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK STAR WILDCARD
##
## Ends in an error in state: 127.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK PIPE WILDCARD
##
## Ends in an error in state: 129.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK MINUS WILDCARD
##
## Ends in an error in state: 131.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK INFIX_SUP WILDCARD
##
## Ends in an error in state: 133.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK INFIX_PLUS WILDCARD
##
## Ends in an error in state: 135.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK INFIX_PIPE WILDCARD
##
## Ends in an error in state: 137.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK INFIX_PERCENT WILDCARD
##
## Ends in an error in state: 139.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK INFIX_MULT WILDCARD
##
## Ends in an error in state: 141.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK INFIX_MINUS WILDCARD
##
## Ends in an error in state: 143.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK INFIX_INF WILDCARD
##
## Ends in an error in state: 145.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK INFIX_EQUAL WILDCARD
##
## Ends in an error in state: 147.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK INFIX_DOLLAR WILDCARD
##
## Ends in an error in state: 149.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK INFIX_DIV WILDCARD
##
## Ends in an error in state: 151.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK INFIX_CARET WILDCARD
##
## Ends in an error in state: 153.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST BACKTICK INFIX_AMPERSAND WILDCARD
##
## Ends in an error in state: 155.
##
## kosu_pattern -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND . BACKTICK [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral WILDCARD
##
## Ends in an error in state: 159.
##
## kosu_pattern -> kosu_pattern . PIPE kosu_pattern [ RPARENT PIPE COMMA AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS Identifier RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS PREFIX_TILDE RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS PREFIX_EXCLA RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS PREFIX_QUESTIONMARK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK STAR BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK MINUS BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK PIPE BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK INFIX_PIPE BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK INFIX_AMPERSAND BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK INFIX_EQUAL BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK INFIX_INF BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK INFIX_SUP BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK INFIX_CARET BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK INFIX_PLUS BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK INFIX_MINUS BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK INFIX_MULT BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK INFIX_DIV BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK INFIX_DOLLAR BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern . AS BACKTICK INFIX_PERCENT BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## separated_nonempty_list(COMMA,located(kosu_pattern)) -> kosu_pattern . [ RPARENT ]
## separated_nonempty_list(COMMA,located(kosu_pattern)) -> kosu_pattern . COMMA separated_nonempty_list(COMMA,located(kosu_pattern)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern
##

Expecting "|", ",", ")" or "as"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS WILDCARD
##
## Ends in an error in state: 160.
##
## kosu_pattern -> LPARENT kosu_pattern AS . Identifier RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . PREFIX_TILDE RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . PREFIX_EXCLA RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . PREFIX_QUESTIONMARK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK STAR BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK MINUS BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK PIPE BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK INFIX_PIPE BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK INFIX_AMPERSAND BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK INFIX_EQUAL BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK INFIX_INF BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK INFIX_SUP BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK INFIX_CARET BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK INFIX_PLUS BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK INFIX_MINUS BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK INFIX_MULT BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK INFIX_DIV BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK INFIX_DOLLAR BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS . BACKTICK INFIX_PERCENT BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS
##

Expecting "`", "<identifier>", "~", "!", "?"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS PREFIX_TILDE WILDCARD
##
## Ends in an error in state: 161.
##
## kosu_pattern -> LPARENT kosu_pattern AS PREFIX_TILDE . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS PREFIX_TILDE
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS PREFIX_QUESTIONMARK WILDCARD
##
## Ends in an error in state: 163.
##
## kosu_pattern -> LPARENT kosu_pattern AS PREFIX_QUESTIONMARK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS PREFIX_QUESTIONMARK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS PREFIX_EXCLA WILDCARD
##
## Ends in an error in state: 165.
##
## kosu_pattern -> LPARENT kosu_pattern AS PREFIX_EXCLA . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS PREFIX_EXCLA
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS Identifier WILDCARD
##
## Ends in an error in state: 167.
##
## kosu_pattern -> LPARENT kosu_pattern AS Identifier . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS Identifier
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK WILDCARD
##
## Ends in an error in state: 169.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . STAR BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . MINUS BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . PIPE BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . INFIX_PIPE BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . INFIX_AMPERSAND BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . INFIX_EQUAL BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . INFIX_INF BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . INFIX_SUP BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . INFIX_CARET BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . INFIX_PLUS BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . INFIX_MINUS BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . INFIX_MULT BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . INFIX_DIV BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . INFIX_DOLLAR BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK . INFIX_PERCENT BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK
##

Expecting "*", "-", "|", "&", "=", "<", ">", "^", "+", "-", "/", "$" or "%"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK STAR WILDCARD
##
## Ends in an error in state: 170.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK STAR . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK STAR
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK STAR BACKTICK WILDCARD
##
## Ends in an error in state: 171.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK STAR BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK STAR BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK PIPE WILDCARD
##
## Ends in an error in state: 173.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK PIPE . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK PIPE
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 174.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK PIPE BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK PIPE BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK MINUS WILDCARD
##
## Ends in an error in state: 176.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK MINUS . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK MINUS
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 177.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK MINUS BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK MINUS BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_SUP WILDCARD
##
## Ends in an error in state: 179.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_SUP . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_SUP
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_SUP BACKTICK WILDCARD
##
## Ends in an error in state: 180.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_SUP BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_SUP BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_PLUS WILDCARD
##
## Ends in an error in state: 182.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_PLUS . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_PLUS
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_PLUS BACKTICK WILDCARD
##
## Ends in an error in state: 183.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_PLUS BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_PLUS BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_PIPE WILDCARD
##
## Ends in an error in state: 185.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_PIPE . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_PIPE
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 186.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_PIPE BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_PIPE BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_PERCENT WILDCARD
##
## Ends in an error in state: 188.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_PERCENT . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_PERCENT
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_PERCENT BACKTICK WILDCARD
##
## Ends in an error in state: 189.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_PERCENT BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_PERCENT BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_MULT WILDCARD
##
## Ends in an error in state: 191.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_MULT . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_MULT
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_MULT BACKTICK WILDCARD
##
## Ends in an error in state: 192.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_MULT BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_MULT BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_MINUS WILDCARD
##
## Ends in an error in state: 194.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_MINUS . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_MINUS
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 195.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_MINUS BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_MINUS BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_INF WILDCARD
##
## Ends in an error in state: 197.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_INF . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_INF
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_INF BACKTICK WILDCARD
##
## Ends in an error in state: 198.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_INF BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_INF BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_EQUAL WILDCARD
##
## Ends in an error in state: 200.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_EQUAL . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_EQUAL
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_EQUAL BACKTICK WILDCARD
##
## Ends in an error in state: 201.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_EQUAL BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_EQUAL BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_DOLLAR WILDCARD
##
## Ends in an error in state: 203.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_DOLLAR . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_DOLLAR
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_DOLLAR BACKTICK WILDCARD
##
## Ends in an error in state: 204.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_DOLLAR BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_DOLLAR BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_DIV WILDCARD
##
## Ends in an error in state: 206.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_DIV . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_DIV
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_DIV BACKTICK WILDCARD
##
## Ends in an error in state: 207.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_DIV BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_DIV BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_CARET WILDCARD
##
## Ends in an error in state: 209.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_CARET . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_CARET
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_CARET BACKTICK WILDCARD
##
## Ends in an error in state: 210.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_CARET BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_CARET BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_AMPERSAND WILDCARD
##
## Ends in an error in state: 212.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_AMPERSAND . BACKTICK RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_AMPERSAND
##

Expecting "`"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST LPARENT IntegerLitteral AS BACKTICK INFIX_AMPERSAND BACKTICK WILDCARD
##
## Ends in an error in state: 213.
##
## kosu_pattern -> LPARENT kosu_pattern AS BACKTICK INFIX_AMPERSAND BACKTICK . RPARENT [ RPARENT RBRACE PIPE MINUS_SUP EQUAL COMMA COLON AS ]
##
## The known suffix of the stack is as follows:
## LPARENT kosu_pattern AS BACKTICK INFIX_AMPERSAND BACKTICK
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE VAR IntegerLitteral WILDCARD
##
## Ends in an error in state: 215.
##
## kosu_pattern -> kosu_pattern . PIPE kosu_pattern [ PIPE EQUAL COLON ]
## kosu_statement_base -> VAR kosu_pattern . option(preceded(COLON,located(kosu_type))) EQUAL kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## VAR kosu_pattern
##

Expecting "|", ":" or "="

kosu_module: ENUM Identifier COLON WILDCARD
##
## Ends in an error in state: 216.
##
## option(preceded(COLON,located(kosu_type))) -> COLON . kosu_type [ RPARENT MINUS_SUP LBRACE EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## COLON
##

Expecting "<type identifier>"

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE VAR IntegerLitteral COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 218.
##
## kosu_statement_base -> VAR kosu_pattern option(preceded(COLON,located(kosu_type))) . EQUAL kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## VAR kosu_pattern option(preceded(COLON,located(kosu_type)))
##

Expecting "="

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE VAR IntegerLitteral EQUAL WILDCARD
##
## Ends in an error in state: 219.
##
## kosu_statement_base -> VAR kosu_pattern option(preceded(COLON,located(kosu_type))) EQUAL . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## VAR kosu_pattern option(preceded(COLON,located(kosu_type))) EQUAL
##

Expecting "<expression>"

kosu_module: CONST Constant COLON Identifier EQUAL WHILE WILDCARD
##
## Ends in an error in state: 220.
##
## kosu_expression -> WHILE . kosu_expression kosu_block [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## WHILE
##

Expecting "<expression>"

kosu_module: CONST Constant COLON Identifier EQUAL SIZEOF WILDCARD
##
## Ends in an error in state: 223.
##
## kosu_expression -> SIZEOF . LPARENT COLON kosu_expression RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> SIZEOF . LPARENT kosu_type RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## SIZEOF
##

Expecting "("

kosu_module: CONST Constant COLON Identifier EQUAL SIZEOF LPARENT WILDCARD
##
## Ends in an error in state: 224.
##
## kosu_expression -> SIZEOF LPARENT . COLON kosu_expression RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> SIZEOF LPARENT . kosu_type RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPARENT
##

Expecting ":" or "<type identifier>"

kosu_module: CONST Constant COLON Identifier EQUAL SIZEOF LPARENT COLON WILDCARD
##
## Ends in an error in state: 225.
##
## kosu_expression -> SIZEOF LPARENT COLON . kosu_expression RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPARENT COLON
##

Expecting "<expression>"

kosu_module: CONST Constant COLON Identifier EQUAL MATCH WILDCARD
##
## Ends in an error in state: 228.
##
## kosu_expression -> MATCH . kosu_expression LBRACE nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## MATCH
##

Expecting "<expression>"

kosu_module: CONST Constant COLON Identifier EQUAL LPARENT WILDCARD
##
## Ends in an error in state: 230.
##
## kosu_expression -> LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

Expecting ")" or "<expression>"

kosu_module: CONST Constant COLON Identifier EQUAL IF WILDCARD
##
## Ends in an error in state: 232.
##
## kosu_expression -> IF . kosu_expression kosu_block option(preceded(ELSE,kosu_block)) [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## IF
##

Expecting "<expression>"

kosu_module: CONST Constant COLON Identifier EQUAL FUNCTION WILDCARD
##
## Ends in an error in state: 234.
##
## kosu_expression -> FUNCTION . LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT MINUS_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> FUNCTION . loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) MINUS_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION
##

Expecting "(", "->" or "<identifier>"

kosu_module: CONST Constant COLON Identifier EQUAL FUNCTION LPARENT WILDCARD
##
## Ends in an error in state: 235.
##
## kosu_expression -> FUNCTION LPARENT . loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT MINUS_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION LPARENT
##

Expecting "<identifier>"

kosu_module: CONST Constant COLON Identifier EQUAL FUNCTION LPARENT Identifier MINUS_SUP
##
## Ends in an error in state: 237.
##
## kosu_expression -> FUNCTION LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) . RPARENT MINUS_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 581, spurious reduction of production option(preceded(COLON,located(kosu_type))) ->
## In state 582, spurious reduction of production separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) Identifier option(preceded(COLON,located(kosu_type)))
## In state 236, spurious reduction of production loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) -> separated_nonempty_list(COMMA,kosu_anon_parameter)
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL FUNCTION LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 238.
##
## kosu_expression -> FUNCTION LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT . MINUS_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT
##

Expecting "->"

kosu_module: CONST Constant COLON Identifier EQUAL FUNCTION LPARENT RPARENT MINUS_SUP WILDCARD
##
## Ends in an error in state: 239.
##
## kosu_expression -> FUNCTION LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT MINUS_SUP . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT MINUS_SUP
##

Expecting "<expression>"

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE WILDCARD
##
## Ends in an error in state: 245.
##
## kosu_expression -> CLOSURE . LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT MINUS_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> CLOSURE . loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) MINUS_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CLOSURE
##

Expecting "(", "->" or "<identifier>"

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE LPARENT WILDCARD
##
## Ends in an error in state: 246.
##
## kosu_expression -> CLOSURE LPARENT . loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT MINUS_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CLOSURE LPARENT
##

Expecting ")" or "<identifier>"

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE LPARENT Identifier MINUS_SUP
##
## Ends in an error in state: 247.
##
## kosu_expression -> CLOSURE LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) . RPARENT MINUS_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CLOSURE LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 581, spurious reduction of production option(preceded(COLON,located(kosu_type))) ->
## In state 582, spurious reduction of production separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) Identifier option(preceded(COLON,located(kosu_type)))
## In state 236, spurious reduction of production loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) -> separated_nonempty_list(COMMA,kosu_anon_parameter)
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 248.
##
## kosu_expression -> CLOSURE LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT . MINUS_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CLOSURE LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT
##

Expecting "->"

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE LPARENT RPARENT MINUS_SUP WILDCARD
##
## Ends in an error in state: 249.
##
## kosu_expression -> CLOSURE LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT MINUS_SUP . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CLOSURE LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT MINUS_SUP
##

Expecting "<expression>"

kosu_module: CONST Constant COLON Identifier EQUAL CASES WILDCARD
##
## Ends in an error in state: 250.
##
## kosu_expression -> CASES . LBRACE nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) option(preceded(ELSE,kosu_block)) RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CASES
##

Expecting "{"

kosu_module: CONST Constant COLON Identifier EQUAL CASES LBRACE WILDCARD
##
## Ends in an error in state: 251.
##
## kosu_expression -> CASES LBRACE . nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) option(preceded(ELSE,kosu_block)) RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CASES LBRACE
##

Expecting "of"

kosu_module: CONST Constant COLON Identifier EQUAL CASES LBRACE OF WILDCARD
##
## Ends in an error in state: 252.
##
## nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) -> OF . kosu_expression MINUS_SUP kosu_block [ RBRACE ELSE ]
## nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) -> OF . kosu_expression MINUS_SUP kosu_block nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) [ RBRACE ELSE ]
##
## The known suffix of the stack is as follows:
## OF
##

Expecting "<expression>"

kosu_module: CONST Constant COLON Identifier EQUAL Builtin WILDCARD
##
## Ends in an error in state: 253.
##
## kosu_expression -> Builtin . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## Builtin
##

Expecting ")"

kosu_module: CONST Constant COLON Identifier EQUAL Builtin LPARENT WILDCARD
##
## Ends in an error in state: 254.
##
## kosu_expression -> Builtin LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## Builtin LPARENT
##

Expecting ")" or "<expression>"

kosu_module: CONST Constant COLON Identifier EQUAL ModuleIdentifier DOT WILDCARD
##
## Ends in an error in state: 256.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . Constant [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . PREFIX_TILDE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . PREFIX_EXCLA [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . PREFIX_QUESTIONMARK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK STAR BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK MINUS BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK PIPE BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_PIPE BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_AMPERSAND BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_EQUAL BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_INF BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_SUP BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_CARET BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_PLUS BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_MINUS BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_MULT BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_DIV BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_DOLLAR BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_PERCENT BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . Identifier COLON LBRACE nonempty_list(terminated(__anonymous_1,COMMA)) RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . Identifier COLON LBRACE separated_nonempty_list(COMMA,__anonymous_1) RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . DOT Identifier loption(parenthesis(trailing_separated_list(COMMA,located(kosu_expression)))) [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . Identifier DOUBLECOLON Identifier loption(parenthesis(trailing_separated_list(COMMA,located(kosu_expression)))) [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT))
##

Expecting "`", ".", "?", "~", "!", "<constant identifier>" or "<identifier>"

kosu_module: CONST Constant COLON Identifier EQUAL PREFIX_TILDE WILDCARD
##
## Ends in an error in state: 257.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE
##

Expecting "[", ...

kosu_module: CONST Constant COLON Identifier EQUAL Identifier LSQBRACE WILDCARD
##
## Ends in an error in state: 258.
##
## option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) -> LSQBRACE . nonempty_list(terminated(located(kosu_type),COMMA)) RSQBRACE [ LPARENT ]
## option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) -> LSQBRACE . separated_nonempty_list(COMMA,located(kosu_type)) RSQBRACE [ LPARENT ]
##
## The known suffix of the stack is as follows:
## LSQBRACE
##

Expecting "<type identifier>"

kosu_module: CONST Constant COLON Identifier EQUAL Identifier LSQBRACE PolymorphicVar WILDCARD
##
## Ends in an error in state: 263.
##
## nonempty_list(terminated(located(kosu_type),COMMA)) -> kosu_type . COMMA [ RSQBRACE ]
## nonempty_list(terminated(located(kosu_type),COMMA)) -> kosu_type . COMMA nonempty_list(terminated(located(kosu_type),COMMA)) [ RSQBRACE ]
## separated_nonempty_list(COMMA,located(kosu_type)) -> kosu_type . [ RSQBRACE ]
## separated_nonempty_list(COMMA,located(kosu_type)) -> kosu_type . COMMA separated_nonempty_list(COMMA,located(kosu_type)) [ RSQBRACE ]
##
## The known suffix of the stack is as follows:
## kosu_type
##

Expecting "," or "]"

kosu_module: CONST Constant COLON Identifier EQUAL Identifier LSQBRACE Identifier COMMA WILDCARD
##
## Ends in an error in state: 264.
##
## nonempty_list(terminated(located(kosu_type),COMMA)) -> kosu_type COMMA . [ RSQBRACE ]
## nonempty_list(terminated(located(kosu_type),COMMA)) -> kosu_type COMMA . nonempty_list(terminated(located(kosu_type),COMMA)) [ RSQBRACE ]
## separated_nonempty_list(COMMA,located(kosu_type)) -> kosu_type COMMA . separated_nonempty_list(COMMA,located(kosu_type)) [ RSQBRACE ]
##
## The known suffix of the stack is as follows:
## kosu_type COMMA
##

Expecting "]" or "<type identifier>"

kosu_module: CONST Constant COLON Identifier EQUAL PREFIX_TILDE LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 266.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

Expecting "("

kosu_module: CONST Constant COLON Identifier EQUAL PREFIX_TILDE LPARENT WILDCARD
##
## Ends in an error in state: 267.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

Expecting "<expression>" or ")"

kosu_module: CONST Constant COLON Identifier EQUAL LPARENT Constant WILDCARD
##
## Ends in an error in state: 270.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## separated_nonempty_list(COMMA,located(kosu_expression)) -> kosu_expression . [ RPARENT ]
## separated_nonempty_list(COMMA,located(kosu_expression)) -> kosu_expression . COMMA separated_nonempty_list(COMMA,located(kosu_expression)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## kosu_expression
##

Expecting ")", ",", "*", "-", "|", "&", "=", "<", ">", "^", "+", "-", "*", "/", "%" or "."

kosu_module: CONST Constant COLON Identifier EQUAL Constant STAR WILDCARD
##
## Ends in an error in state: 271.
##
## kosu_expression -> kosu_expression STAR . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression STAR
##

Expecting "<expression>"

kosu_module: CONST Constant COLON Identifier EQUAL Constant STAR Constant WILDCARD
##
## Ends in an error in state: 272.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression STAR kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression STAR kosu_expression
##

Expecting ")", ",", "*", "-", "|", "&", "=", "<", ">", "^", "+", "-", "*", "/", "%", ".", "struct", "enum", "external", "fn" or "opaque"

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_DOLLAR WILDCARD
##
## Ends in an error in state: 273.
##
## kosu_expression -> kosu_expression INFIX_DOLLAR . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_DOLLAR
##

Expecting "<expression>"

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_DOLLAR Constant WILDCARD
##
## Ends in an error in state: 274.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression INFIX_DOLLAR kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_DOLLAR kosu_expression
##

Expecting ")", ",", "*", "-", "|", "&", "=", "<", ">", "^", "+", "-", "*", "/", "%", ".", "struct", "enum", "external", "fn" or "opaque"

kosu_module: CONST Constant COLON Identifier EQUAL Constant DOT WILDCARD
##
## Ends in an error in state: 275.
##
## kosu_expression -> kosu_expression DOT . Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression DOT . LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression DOT
##

Expecting "<identifier>"












































































kosu_module: EXTERNAL BACKTICK INFIX_INF WILDCARD
##
## Ends in an error in state: 1156.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_INF . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_INF
##

Expecting "`"

kosu_module: EXTERNAL BACKTICK INFIX_INF BACKTICK WILDCARD
##
## Ends in an error in state: 1157.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_INF BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_INF BACKTICK
##

Expecting "("

kosu_module: EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1158.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT
##

Expecting "(", "_" or "<identifier>"

kosu_module: EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1160.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

Expecting "<type identifier>"

kosu_module: EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1161.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

Expecting "=", "struct", "opaque", "fn", "external", "enum" or "const"

kosu_module: EXTERNAL BACKTICK INFIX_EQUAL WILDCARD
##
## Ends in an error in state: 1163.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_EQUAL . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_EQUAL
##

Expecting "`"

kosu_module: EXTERNAL BACKTICK INFIX_EQUAL BACKTICK WILDCARD
##
## Ends in an error in state: 1164.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_EQUAL BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_EQUAL BACKTICK
##

Expecting "("

kosu_module: EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1165.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT
##

Expecting ")", "_" or "<identifier>"

kosu_module: EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1167.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

Expecting "<type identifier>"

kosu_module: EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1168.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

Expecting "=", "struct", "opaque", "fn", "external", "enum" or "const"

kosu_module: EXTERNAL BACKTICK INFIX_DOLLAR WILDCARD
##
## Ends in an error in state: 1170.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_DOLLAR . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DOLLAR
##

Expecting "`"

kosu_module: EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK WILDCARD
##
## Ends in an error in state: 1171.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK
##

Expecting "("

kosu_module: EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1172.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT
##

Expecting ")", "_" or "<identifier>"

kosu_module: EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1174.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

Expecting "<type identifier>"

kosu_module: EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1175.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

Expecting "=", "struct", "opaque", "fn", "external", "enum" or "const"

kosu_module: EXTERNAL BACKTICK INFIX_DIV WILDCARD
##
## Ends in an error in state: 1177.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_DIV . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DIV
##

Expecting ")", "_" or "<identifier>"

kosu_module: EXTERNAL BACKTICK INFIX_DIV BACKTICK WILDCARD
##
## Ends in an error in state: 1178.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_DIV BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DIV BACKTICK
##

Expecting ")", "_" or "<identifier>"

kosu_module: EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1179.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT
##

Expecting ")", "_" or "<identifier>"

kosu_module: EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1181.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

Expecting "<type identifier>"

kosu_module: EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1182.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

Expecting "=", "struct", "opaque", "fn", "external", "enum" or "const"

kosu_module: EXTERNAL BACKTICK INFIX_CARET WILDCARD
##
## Ends in an error in state: 1184.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_CARET . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_CARET
##

Expecting "`"

kosu_module: EXTERNAL BACKTICK INFIX_CARET BACKTICK WILDCARD
##
## Ends in an error in state: 1185.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_CARET BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_CARET BACKTICK
##

Expecting "("

kosu_module: EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1186.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT
##

Expecting ")", "_" or "<identifier>"

kosu_module: EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1188.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

Expecting "<type identifier>"

kosu_module: EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1189.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

Expecting "=", "struct", "enum", "fn", "opaque" or "external"

kosu_module: EXTERNAL BACKTICK INFIX_AMPERSAND WILDCARD
##
## Ends in an error in state: 1191.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_AMPERSAND . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_AMPERSAND
##

Expecting "`"

kosu_module: EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK WILDCARD
##
## Ends in an error in state: 1192.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK
##

Expecting ")"

kosu_module: EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1193.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT
##

Expecting ")", "_" or "<identifier>" 

kosu_module: EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1195.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

Expecting "<type identifier>"

kosu_module: EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1196.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

Expecting "=", "struct", "enum", "fn", "opaque", "external"

kosu_module: ENUM WILDCARD
##
## Ends in an error in state: 1198.
##
## kosu_enum_decl -> ENUM . Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) option(preceded(COLON,located(kosu_type))) LBRACE nonempty_list(terminated(kosu_enum_decl_case,COMMA)) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_enum_decl -> ENUM . Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) option(preceded(COLON,located(kosu_type))) LBRACE separated_nonempty_list(COMMA,kosu_enum_decl_case) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## ENUM
##

Expecting "<identifier>"

kosu_module: ENUM Identifier WILDCARD
##
## Ends in an error in state: 1199.
##
## kosu_enum_decl -> ENUM Identifier . loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) option(preceded(COLON,located(kosu_type))) LBRACE nonempty_list(terminated(kosu_enum_decl_case,COMMA)) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_enum_decl -> ENUM Identifier . loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) option(preceded(COLON,located(kosu_type))) LBRACE separated_nonempty_list(COMMA,kosu_enum_decl_case) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## ENUM Identifier
##

Expecting "(", ":" or "}"

kosu_module: ENUM Identifier LPARENT PolymorphicVar RPARENT WILDCARD
##
## Ends in an error in state: 1200.
##
## kosu_enum_decl -> ENUM Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) . option(preceded(COLON,located(kosu_type))) LBRACE nonempty_list(terminated(kosu_enum_decl_case,COMMA)) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_enum_decl -> ENUM Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) . option(preceded(COLON,located(kosu_type))) LBRACE separated_nonempty_list(COMMA,kosu_enum_decl_case) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## ENUM Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars)))
##

Expecting ":" or "}"

kosu_module: ENUM Identifier COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 1201.
##
## kosu_enum_decl -> ENUM Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) option(preceded(COLON,located(kosu_type))) . LBRACE nonempty_list(terminated(kosu_enum_decl_case,COMMA)) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_enum_decl -> ENUM Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) option(preceded(COLON,located(kosu_type))) . LBRACE separated_nonempty_list(COMMA,kosu_enum_decl_case) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## ENUM Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) option(preceded(COLON,located(kosu_type)))
##

Expecting "{"

kosu_module: ENUM Identifier LBRACE WILDCARD
##
## Ends in an error in state: 1202.
##
## kosu_enum_decl -> ENUM Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) option(preceded(COLON,located(kosu_type))) LBRACE . nonempty_list(terminated(kosu_enum_decl_case,COMMA)) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_enum_decl -> ENUM Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) option(preceded(COLON,located(kosu_type))) LBRACE . separated_nonempty_list(COMMA,kosu_enum_decl_case) RBRACE [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## ENUM Identifier loption(parenthesis(separated_nonempty_list(COMMA,loc_poly_vars))) option(preceded(COLON,located(kosu_type))) LBRACE
##

Expecting "<identifier>"

kosu_module: ENUM Identifier LBRACE Identifier WILDCARD
##
## Ends in an error in state: 1203.
##
## nonempty_list(terminated(kosu_enum_decl_case,COMMA)) -> Identifier . loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_type)))) COMMA [ RBRACE ]
## nonempty_list(terminated(kosu_enum_decl_case,COMMA)) -> Identifier . loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_type)))) COMMA nonempty_list(terminated(kosu_enum_decl_case,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,kosu_enum_decl_case) -> Identifier . loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_type)))) [ RBRACE ]
## separated_nonempty_list(COMMA,kosu_enum_decl_case) -> Identifier . loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_type)))) COMMA separated_nonempty_list(COMMA,kosu_enum_decl_case) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Identifier
##

Expecting "(", "<type identifier>"

kosu_module: ENUM Identifier LBRACE Identifier LPARENT WILDCARD
##
## Ends in an error in state: 1204.
##
## loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_type)))) -> LPARENT . separated_nonempty_list(COMMA,located(kosu_type)) RPARENT [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

Expecting "<type identifier>"

kosu_module: ENUM Identifier LBRACE Identifier LPARENT Identifier RPARENT WILDCARD
##
## Ends in an error in state: 1207.
##
## nonempty_list(terminated(kosu_enum_decl_case,COMMA)) -> Identifier loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_type)))) . COMMA [ RBRACE ]
## nonempty_list(terminated(kosu_enum_decl_case,COMMA)) -> Identifier loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_type)))) . COMMA nonempty_list(terminated(kosu_enum_decl_case,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,kosu_enum_decl_case) -> Identifier loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_type)))) . [ RBRACE ]
## separated_nonempty_list(COMMA,kosu_enum_decl_case) -> Identifier loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_type)))) . COMMA separated_nonempty_list(COMMA,kosu_enum_decl_case) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Identifier loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_type))))
##

Expecting ",", "}"

kosu_module: ENUM Identifier LBRACE Identifier COMMA WILDCARD
##
## Ends in an error in state: 1208.
##
## nonempty_list(terminated(kosu_enum_decl_case,COMMA)) -> Identifier loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_type)))) COMMA . [ RBRACE ]
## nonempty_list(terminated(kosu_enum_decl_case,COMMA)) -> Identifier loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_type)))) COMMA . nonempty_list(terminated(kosu_enum_decl_case,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,kosu_enum_decl_case) -> Identifier loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_type)))) COMMA . separated_nonempty_list(COMMA,kosu_enum_decl_case) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Identifier loption(parenthesis(separated_nonempty_list(COMMA,located(kosu_type)))) COMMA
##

Expecting "<identifier>", "}" 

kosu_module: CONST WILDCARD
##
## Ends in an error in state: 1215.
##
## kosu_const_decl -> CONST . Constant COLON kosu_type EQUAL kosu_expression [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST
##

Expecting "<constant identifier>"

kosu_module: CONST Constant WILDCARD
##
## Ends in an error in state: 1216.
##
## kosu_const_decl -> CONST Constant . COLON kosu_type EQUAL kosu_expression [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant
##

Expecting ":"

kosu_module: CONST Constant COLON WILDCARD
##
## Ends in an error in state: 1217.
##
## kosu_const_decl -> CONST Constant COLON . kosu_type EQUAL kosu_expression [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant COLON
##

Expecting "<type identifier>"

kosu_module: CONST Constant COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 1218.
##
## kosu_const_decl -> CONST Constant COLON kosu_type . EQUAL kosu_expression [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant COLON kosu_type
##

Expecting "="

kosu_module: CONST Constant COLON Identifier EQUAL WILDCARD
##
## Ends in an error in state: 1219.
##
## kosu_const_decl -> CONST Constant COLON kosu_type EQUAL . kosu_expression [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant COLON kosu_type EQUAL
##

Expecting "<expression>"

kosu_module: CONST Constant COLON Identifier EQUAL Constant WILDCARD
##
## Ends in an error in state: 1220.
##
## kosu_const_decl -> CONST Constant COLON kosu_type EQUAL kosu_expression . [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
##
## The known suffix of the stack is as follows:
## CONST Constant COLON kosu_type EQUAL kosu_expression
##

Expecting "struct", "opaque", "fn", "external", "enum", "const", ".", "|>", "*", "-", "|", "&", "=", "<", ">", "^", "+", "-", "/", "$" or "%"

kosu_module: OPAQUE TYPE Identifier WILDCARD
##
## Ends in an error in state: 1225.
##
## list(kosu_module_node) -> kosu_module_node . list(kosu_module_node) [ EOF ]
##
## The known suffix of the stack is as follows:
## kosu_module_node
##

Expecting "struct", "enum", "fn", "const", "external"

kosu_module: CONST Constant COLON Identifier EQUAL LSQBRACE WILDCARD
##
## Ends in an error in state: 229.
##
## kosu_expression -> LSQBRACE . nonempty_list(terminated(located(kosu_expression),COMMA)) RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> LSQBRACE . separated_nonempty_list(COMMA,located(kosu_expression)) RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> LSQBRACE . IntegerLitteral COLON kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## LSQBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant DOT LSQBRACE WILDCARD
##
## Ends in an error in state: 276.
##
## kosu_expression -> kosu_expression DOT LSQBRACE . kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression DOT LSQBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant DOT LSQBRACE Constant WILDCARD
##
## Ends in an error in state: 277.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression DOT LSQBRACE kosu_expression . RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression DOT LSQBRACE kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant PIPE WILDCARD
##
## Ends in an error in state: 279.
##
## kosu_expression -> kosu_expression PIPE . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant PIPE Constant WILDCARD
##
## Ends in an error in state: 280.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression PIPE kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression PIPE kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS WILDCARD
##
## Ends in an error in state: 281.
##
## kosu_expression -> kosu_expression MINUS . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS Constant WILDCARD
##
## Ends in an error in state: 282.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_PERCENT WILDCARD
##
## Ends in an error in state: 283.
##
## kosu_expression -> kosu_expression INFIX_PERCENT . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_PERCENT Constant WILDCARD
##
## Ends in an error in state: 284.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression INFIX_PERCENT kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_PERCENT kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_MULT WILDCARD
##
## Ends in an error in state: 286.
##
## kosu_expression -> kosu_expression INFIX_MULT . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_MULT Constant WILDCARD
##
## Ends in an error in state: 287.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression INFIX_MULT kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_MULT kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_DIV WILDCARD
##
## Ends in an error in state: 288.
##
## kosu_expression -> kosu_expression INFIX_DIV . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_DIV Constant WILDCARD
##
## Ends in an error in state: 289.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression INFIX_DIV kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_DIV kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_SUP WILDCARD
##
## Ends in an error in state: 290.
##
## kosu_expression -> kosu_expression INFIX_SUP . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_SUP Constant WILDCARD
##
## Ends in an error in state: 291.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression INFIX_SUP kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_SUP kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_PLUS WILDCARD
##
## Ends in an error in state: 292.
##
## kosu_expression -> kosu_expression INFIX_PLUS . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_PLUS Constant WILDCARD
##
## Ends in an error in state: 293.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression INFIX_PLUS kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_PLUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_MINUS WILDCARD
##
## Ends in an error in state: 294.
##
## kosu_expression -> kosu_expression INFIX_MINUS . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_MINUS Constant WILDCARD
##
## Ends in an error in state: 295.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression INFIX_MINUS kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_INF WILDCARD
##
## Ends in an error in state: 296.
##
## kosu_expression -> kosu_expression INFIX_INF . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_INF Constant WILDCARD
##
## Ends in an error in state: 297.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression INFIX_INF kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_INF kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_EQUAL WILDCARD
##
## Ends in an error in state: 298.
##
## kosu_expression -> kosu_expression INFIX_EQUAL . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_EQUAL Constant WILDCARD
##
## Ends in an error in state: 299.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression INFIX_EQUAL kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_EQUAL kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_CARET WILDCARD
##
## Ends in an error in state: 300.
##
## kosu_expression -> kosu_expression INFIX_CARET . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_CARET Constant WILDCARD
##
## Ends in an error in state: 301.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression INFIX_CARET kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_CARET kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP WILDCARD
##
## Ends in an error in state: 302.
##
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP ModuleIdentifier DOT WILDCARD
##
## Ends in an error in state: 303.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) . BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP PREFIX_TILDE WILDCARD
##
## Ends in an error in state: 304.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP PREFIX_TILDE LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 305.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP PREFIX_TILDE LPARENT WILDCARD
##
## Ends in an error in state: 306.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP PREFIX_QUESTIONMARK WILDCARD
##
## Ends in an error in state: 309.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP PREFIX_QUESTIONMARK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 310.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP PREFIX_QUESTIONMARK LPARENT WILDCARD
##
## Ends in an error in state: 311.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP PREFIX_EXCLA WILDCARD
##
## Ends in an error in state: 314.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP PREFIX_EXCLA LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 315.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP PREFIX_EXCLA LPARENT WILDCARD
##
## Ends in an error in state: 316.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP Identifier WILDCARD
##
## Ends in an error in state: 319.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP Identifier LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 320.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP Identifier LPARENT WILDCARD
##
## Ends in an error in state: 321.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK WILDCARD
##
## Ends in an error in state: 324.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK STAR WILDCARD
##
## Ends in an error in state: 325.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK STAR BACKTICK WILDCARD
##
## Ends in an error in state: 326.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK STAR BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 327.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK STAR BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 328.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK PIPE WILDCARD
##
## Ends in an error in state: 331.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 332.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK PIPE BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 333.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK PIPE BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 334.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK MINUS WILDCARD
##
## Ends in an error in state: 337.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 338.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK MINUS BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 339.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK MINUS BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 340.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_SUP WILDCARD
##
## Ends in an error in state: 343.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_SUP BACKTICK WILDCARD
##
## Ends in an error in state: 344.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_SUP BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 345.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_SUP BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 346.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_PLUS WILDCARD
##
## Ends in an error in state: 349.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_PLUS BACKTICK WILDCARD
##
## Ends in an error in state: 350.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_PLUS BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 351.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_PLUS BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 352.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_PIPE WILDCARD
##
## Ends in an error in state: 355.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 356.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_PIPE BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 357.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_PIPE BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 358.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_PERCENT WILDCARD
##
## Ends in an error in state: 361.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_PERCENT BACKTICK WILDCARD
##
## Ends in an error in state: 362.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_PERCENT BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 363.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_PERCENT BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 364.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_MULT WILDCARD
##
## Ends in an error in state: 367.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_MULT BACKTICK WILDCARD
##
## Ends in an error in state: 368.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_MULT BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 369.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_MULT BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 370.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_MINUS WILDCARD
##
## Ends in an error in state: 373.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 374.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_MINUS BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 375.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_MINUS BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 376.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_INF WILDCARD
##
## Ends in an error in state: 379.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_INF BACKTICK WILDCARD
##
## Ends in an error in state: 380.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_INF BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 381.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_INF BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 382.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_EQUAL WILDCARD
##
## Ends in an error in state: 385.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_EQUAL BACKTICK WILDCARD
##
## Ends in an error in state: 386.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_EQUAL BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 387.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_EQUAL BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 388.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_DOLLAR WILDCARD
##
## Ends in an error in state: 391.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_DOLLAR BACKTICK WILDCARD
##
## Ends in an error in state: 392.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_DOLLAR BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 393.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_DOLLAR BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 394.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_DIV WILDCARD
##
## Ends in an error in state: 397.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_DIV BACKTICK WILDCARD
##
## Ends in an error in state: 398.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_DIV BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 399.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_DIV BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 400.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_CARET WILDCARD
##
## Ends in an error in state: 403.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_CARET BACKTICK WILDCARD
##
## Ends in an error in state: 404.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_CARET BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 405.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_CARET BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 406.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_AMPERSAND WILDCARD
##
## Ends in an error in state: 409.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_AMPERSAND BACKTICK WILDCARD
##
## Ends in an error in state: 410.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_AMPERSAND BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 411.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant MINUS_SUP BACKTICK INFIX_AMPERSAND BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 412.
##
## kosu_expression -> kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_PIPE WILDCARD
##
## Ends in an error in state: 415.
##
## kosu_expression -> kosu_expression INFIX_PIPE . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_PIPE Constant WILDCARD
##
## Ends in an error in state: 416.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression INFIX_PIPE kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_PIPE kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_AMPERSAND WILDCARD
##
## Ends in an error in state: 417.
##
## kosu_expression -> kosu_expression INFIX_AMPERSAND . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Constant INFIX_AMPERSAND Constant WILDCARD
##
## Ends in an error in state: 418.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression INFIX_AMPERSAND kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## kosu_expression INFIX_AMPERSAND kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LPARENT Constant COMMA WILDCARD
##
## Ends in an error in state: 420.
##
## separated_nonempty_list(COMMA,located(kosu_expression)) -> kosu_expression COMMA . separated_nonempty_list(COMMA,located(kosu_expression)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## kosu_expression COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL PREFIX_QUESTIONMARK WILDCARD
##
## Ends in an error in state: 422.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL PREFIX_QUESTIONMARK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 423.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL PREFIX_QUESTIONMARK LPARENT WILDCARD
##
## Ends in an error in state: 424.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL PREFIX_EXCLA WILDCARD
##
## Ends in an error in state: 427.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL PREFIX_EXCLA LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 428.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL PREFIX_EXCLA LPARENT WILDCARD
##
## Ends in an error in state: 429.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Identifier WILDCARD
##
## Ends in an error in state: 432.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier . COLON LBRACE nonempty_list(terminated(__anonymous_1,COMMA)) RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier . COLON LBRACE separated_nonempty_list(COMMA,__anonymous_1) RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier . DOUBLECOLON Identifier loption(parenthesis(trailing_separated_list(COMMA,located(kosu_expression)))) [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Identifier DOUBLECOLON WILDCARD
##
## Ends in an error in state: 433.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier DOUBLECOLON . Identifier loption(parenthesis(trailing_separated_list(COMMA,located(kosu_expression)))) [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier DOUBLECOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Identifier DOUBLECOLON Identifier WILDCARD
##
## Ends in an error in state: 434.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier DOUBLECOLON Identifier . loption(parenthesis(trailing_separated_list(COMMA,located(kosu_expression)))) [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier DOUBLECOLON Identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL DOT Identifier LPARENT WILDCARD
##
## Ends in an error in state: 435.
##
## loption(parenthesis(trailing_separated_list(COMMA,located(kosu_expression)))) -> LPARENT . nonempty_list(terminated(located(kosu_expression),COMMA)) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## loption(parenthesis(trailing_separated_list(COMMA,located(kosu_expression)))) -> LPARENT . separated_nonempty_list(COMMA,located(kosu_expression)) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL DOT Identifier LPARENT Constant RSQBRACE
##
## Ends in an error in state: 436.
##
## loption(parenthesis(trailing_separated_list(COMMA,located(kosu_expression)))) -> LPARENT separated_nonempty_list(COMMA,located(kosu_expression)) . RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT separated_nonempty_list(COMMA,located(kosu_expression))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 440, spurious reduction of production separated_nonempty_list(COMMA,located(kosu_expression)) -> kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL DOT Identifier LPARENT Constant COMMA RSQBRACE
##
## Ends in an error in state: 438.
##
## loption(parenthesis(trailing_separated_list(COMMA,located(kosu_expression)))) -> LPARENT nonempty_list(terminated(located(kosu_expression),COMMA)) . RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## LPARENT nonempty_list(terminated(located(kosu_expression),COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 441, spurious reduction of production nonempty_list(terminated(located(kosu_expression),COMMA)) -> kosu_expression COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LSQBRACE Constant WILDCARD
##
## Ends in an error in state: 440.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR RSQBRACE RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## nonempty_list(terminated(located(kosu_expression),COMMA)) -> kosu_expression . COMMA [ RSQBRACE RPARENT ]
## nonempty_list(terminated(located(kosu_expression),COMMA)) -> kosu_expression . COMMA nonempty_list(terminated(located(kosu_expression),COMMA)) [ RSQBRACE RPARENT ]
## separated_nonempty_list(COMMA,located(kosu_expression)) -> kosu_expression . [ RSQBRACE RPARENT ]
## separated_nonempty_list(COMMA,located(kosu_expression)) -> kosu_expression . COMMA separated_nonempty_list(COMMA,located(kosu_expression)) [ RSQBRACE RPARENT ]
##
## The known suffix of the stack is as follows:
## kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LSQBRACE IntegerLitteral COMMA WILDCARD
##
## Ends in an error in state: 441.
##
## nonempty_list(terminated(located(kosu_expression),COMMA)) -> kosu_expression COMMA . [ RSQBRACE RPARENT ]
## nonempty_list(terminated(located(kosu_expression),COMMA)) -> kosu_expression COMMA . nonempty_list(terminated(located(kosu_expression),COMMA)) [ RSQBRACE RPARENT ]
## separated_nonempty_list(COMMA,located(kosu_expression)) -> kosu_expression COMMA . separated_nonempty_list(COMMA,located(kosu_expression)) [ RSQBRACE RPARENT ]
##
## The known suffix of the stack is as follows:
## kosu_expression COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Identifier COLON WILDCARD
##
## Ends in an error in state: 444.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier COLON . LBRACE nonempty_list(terminated(__anonymous_1,COMMA)) RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier COLON . LBRACE separated_nonempty_list(COMMA,__anonymous_1) RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Identifier COLON LBRACE WILDCARD
##
## Ends in an error in state: 445.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier COLON LBRACE . nonempty_list(terminated(__anonymous_1,COMMA)) RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier COLON LBRACE . separated_nonempty_list(COMMA,__anonymous_1) RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier COLON LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Identifier COLON LBRACE Identifier WILDCARD
##
## Ends in an error in state: 446.
##
## nonempty_list(terminated(__anonymous_1,COMMA)) -> Identifier . option(preceded(EQUAL,located(kosu_expression))) COMMA [ RBRACE ]
## nonempty_list(terminated(__anonymous_1,COMMA)) -> Identifier . option(preceded(EQUAL,located(kosu_expression))) COMMA nonempty_list(terminated(__anonymous_1,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_1) -> Identifier . option(preceded(EQUAL,located(kosu_expression))) [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_1) -> Identifier . option(preceded(EQUAL,located(kosu_expression))) COMMA separated_nonempty_list(COMMA,__anonymous_1) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Identifier COLON LBRACE Identifier EQUAL WILDCARD
##
## Ends in an error in state: 447.
##
## option(preceded(EQUAL,located(kosu_expression))) -> EQUAL . kosu_expression [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Identifier COLON LBRACE Identifier EQUAL Constant WILDCARD
##
## Ends in an error in state: 448.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## option(preceded(EQUAL,located(kosu_expression))) -> EQUAL kosu_expression . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## EQUAL kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Identifier COLON LBRACE Identifier COMMA WILDCARD
##
## Ends in an error in state: 450.
##
## nonempty_list(terminated(__anonymous_1,COMMA)) -> Identifier option(preceded(EQUAL,located(kosu_expression))) COMMA . [ RBRACE ]
## nonempty_list(terminated(__anonymous_1,COMMA)) -> Identifier option(preceded(EQUAL,located(kosu_expression))) COMMA . nonempty_list(terminated(__anonymous_1,COMMA)) [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_1) -> Identifier option(preceded(EQUAL,located(kosu_expression))) COMMA . separated_nonempty_list(COMMA,__anonymous_1) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Identifier option(preceded(EQUAL,located(kosu_expression))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Identifier LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 457.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL Identifier LPARENT WILDCARD
##
## Ends in an error in state: 458.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL DOT WILDCARD
##
## Ends in an error in state: 461.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) DOT . Identifier loption(parenthesis(trailing_separated_list(COMMA,located(kosu_expression)))) [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL DOT Identifier WILDCARD
##
## Ends in an error in state: 462.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) DOT Identifier . loption(parenthesis(trailing_separated_list(COMMA,located(kosu_expression)))) [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) DOT Identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK WILDCARD
##
## Ends in an error in state: 465.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . STAR BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . MINUS BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . PIPE BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_PIPE BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_AMPERSAND BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_EQUAL BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_INF BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_SUP BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_CARET BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_PLUS BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_MINUS BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_MULT BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_DIV BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_DOLLAR BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK . INFIX_PERCENT BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK STAR WILDCARD
##
## Ends in an error in state: 466.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK STAR BACKTICK WILDCARD
##
## Ends in an error in state: 467.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK STAR BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 468.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK STAR BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 469.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK PIPE WILDCARD
##
## Ends in an error in state: 472.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 473.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK PIPE BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 474.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK PIPE BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 475.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK MINUS WILDCARD
##
## Ends in an error in state: 478.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 479.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK MINUS BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 480.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK MINUS BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 481.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_SUP WILDCARD
##
## Ends in an error in state: 484.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_SUP BACKTICK WILDCARD
##
## Ends in an error in state: 485.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_SUP BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 486.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_SUP BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 487.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_PLUS WILDCARD
##
## Ends in an error in state: 490.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_PLUS BACKTICK WILDCARD
##
## Ends in an error in state: 491.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_PLUS BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 492.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_PLUS BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 493.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_PIPE WILDCARD
##
## Ends in an error in state: 496.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 497.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_PIPE BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 498.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_PIPE BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 499.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_PERCENT WILDCARD
##
## Ends in an error in state: 502.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_PERCENT BACKTICK WILDCARD
##
## Ends in an error in state: 503.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_PERCENT BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 504.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_PERCENT BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 505.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_MULT WILDCARD
##
## Ends in an error in state: 508.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_MULT BACKTICK WILDCARD
##
## Ends in an error in state: 509.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_MULT BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 510.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_MULT BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 511.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_MINUS WILDCARD
##
## Ends in an error in state: 514.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 515.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_MINUS BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 516.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_MINUS BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 517.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_INF WILDCARD
##
## Ends in an error in state: 520.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_INF BACKTICK WILDCARD
##
## Ends in an error in state: 521.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_INF BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 522.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_INF BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 523.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_EQUAL WILDCARD
##
## Ends in an error in state: 526.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_EQUAL BACKTICK WILDCARD
##
## Ends in an error in state: 527.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_EQUAL BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 528.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_EQUAL BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 529.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_DOLLAR WILDCARD
##
## Ends in an error in state: 532.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_DOLLAR BACKTICK WILDCARD
##
## Ends in an error in state: 533.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_DOLLAR BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 534.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_DOLLAR BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 535.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_DIV WILDCARD
##
## Ends in an error in state: 538.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_DIV BACKTICK WILDCARD
##
## Ends in an error in state: 539.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_DIV BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 540.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_DIV BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 541.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_CARET WILDCARD
##
## Ends in an error in state: 544.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_CARET BACKTICK WILDCARD
##
## Ends in an error in state: 545.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_CARET BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 546.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_CARET BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 547.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_AMPERSAND WILDCARD
##
## Ends in an error in state: 550.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND . BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND . BACKTICK [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_AMPERSAND BACKTICK WILDCARD
##
## Ends in an error in state: 551.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK . option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_AMPERSAND BACKTICK LSQBRACE Identifier RSQBRACE WILDCARD
##
## Ends in an error in state: 552.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) . LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL BACKTICK INFIX_AMPERSAND BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 553.
##
## kosu_expression -> loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT . loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CASES LBRACE OF Constant WILDCARD
##
## Ends in an error in state: 558.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) -> OF kosu_expression . MINUS_SUP kosu_block [ RBRACE ELSE ]
## nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) -> OF kosu_expression . MINUS_SUP kosu_block nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) [ RBRACE ELSE ]
##
## The known suffix of the stack is as follows:
## OF kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CASES LBRACE OF Constant MINUS_SUP WILDCARD
##
## Ends in an error in state: 559.
##
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression MINUS_SUP . loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) -> OF kosu_expression MINUS_SUP . kosu_block [ RBRACE ELSE ]
## nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) -> OF kosu_expression MINUS_SUP . kosu_block nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) [ RBRACE ELSE ]
##
## The known suffix of the stack is as follows:
## OF kosu_expression MINUS_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CASES LBRACE OF Constant MINUS_SUP LBRACE Constant RBRACE WILDCARD
##
## Ends in an error in state: 560.
##
## nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) -> OF kosu_expression MINUS_SUP kosu_block . [ RBRACE ELSE ]
## nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) -> OF kosu_expression MINUS_SUP kosu_block . nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) [ RBRACE ELSE ]
##
## The known suffix of the stack is as follows:
## OF kosu_expression MINUS_SUP kosu_block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL IF Constant LBRACE Constant RBRACE ELSE WILDCARD
##
## Ends in an error in state: 563.
##
## option(preceded(ELSE,kosu_block)) -> ELSE . kosu_block [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CASES LBRACE OF Constant MINUS_SUP LBRACE Constant RBRACE ELSE LBRACE Constant RBRACE WILDCARD
##
## Ends in an error in state: 565.
##
## kosu_expression -> CASES LBRACE nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) option(preceded(ELSE,kosu_block)) . RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CASES LBRACE nonempty_list(preceded(OF,splitted(located(kosu_expression),MINUS_SUP,kosu_block))) option(preceded(ELSE,kosu_block))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE LPARENT RPARENT MINUS_SUP Constant WILDCARD
##
## Ends in an error in state: 567.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> CLOSURE LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT MINUS_SUP kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CLOSURE LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT MINUS_SUP kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE VAR WILDCARD
##
## Ends in an error in state: 568.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . Identifier option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . PREFIX_TILDE option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . PREFIX_EXCLA option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . PREFIX_QUESTIONMARK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK STAR BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK MINUS BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK PIPE BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . Identifier option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . PREFIX_TILDE option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . PREFIX_EXCLA option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . PREFIX_QUESTIONMARK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK STAR BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK MINUS BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK PIPE BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) . BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE PREFIX_TILDE WILDCARD
##
## Ends in an error in state: 569.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_TILDE . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_TILDE . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE PREFIX_TILDE COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 570.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_TILDE option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_TILDE option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_TILDE option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE PREFIX_TILDE COMMA WILDCARD
##
## Ends in an error in state: 571.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_TILDE option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_TILDE option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE PREFIX_QUESTIONMARK WILDCARD
##
## Ends in an error in state: 573.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_QUESTIONMARK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_QUESTIONMARK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_QUESTIONMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE PREFIX_QUESTIONMARK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 574.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_QUESTIONMARK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_QUESTIONMARK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_QUESTIONMARK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE PREFIX_QUESTIONMARK COMMA WILDCARD
##
## Ends in an error in state: 575.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_QUESTIONMARK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_QUESTIONMARK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE PREFIX_EXCLA WILDCARD
##
## Ends in an error in state: 577.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_EXCLA . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_EXCLA . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_EXCLA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE PREFIX_EXCLA COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 578.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_EXCLA option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_EXCLA option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_EXCLA option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE PREFIX_EXCLA COMMA WILDCARD
##
## Ends in an error in state: 579.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) PREFIX_EXCLA option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_EXCLA option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE Identifier WILDCARD
##
## Ends in an error in state: 581.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) Identifier . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) Identifier . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) Identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE Identifier COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 582.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) Identifier option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) Identifier option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) Identifier option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE Identifier COMMA WILDCARD
##
## Ends in an error in state: 583.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) Identifier option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) Identifier option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK WILDCARD
##
## Ends in an error in state: 585.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . STAR BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . MINUS BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . PIPE BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_PIPE BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_EQUAL BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_INF BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_SUP BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_CARET BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_PLUS BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_MINUS BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_MULT BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_DIV BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_PERCENT BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . STAR BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . MINUS BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . PIPE BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_PIPE BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_EQUAL BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_INF BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_SUP BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_CARET BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_PLUS BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_MINUS BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_MULT BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_DIV BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK . INFIX_PERCENT BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK STAR WILDCARD
##
## Ends in an error in state: 586.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK STAR . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK STAR . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK STAR BACKTICK WILDCARD
##
## Ends in an error in state: 587.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK STAR BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK STAR BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK STAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK STAR BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 588.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK STAR BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK STAR BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK STAR BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK STAR BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 589.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK STAR BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK STAR BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK PIPE WILDCARD
##
## Ends in an error in state: 591.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK PIPE . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK PIPE . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 592.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK PIPE BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK PIPE BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK PIPE BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 593.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK PIPE BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK PIPE BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK PIPE BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK PIPE BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 594.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK PIPE BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK PIPE BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK MINUS WILDCARD
##
## Ends in an error in state: 596.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK MINUS . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK MINUS . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 597.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK MINUS BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK MINUS BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK MINUS BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 598.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK MINUS BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK MINUS BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK MINUS BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK MINUS BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 599.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK MINUS BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK MINUS BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_SUP WILDCARD
##
## Ends in an error in state: 601.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_SUP . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_SUP . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_SUP BACKTICK WILDCARD
##
## Ends in an error in state: 602.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_SUP BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_SUP BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_SUP BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_SUP BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 603.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_SUP BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 604.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_SUP BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_PLUS WILDCARD
##
## Ends in an error in state: 606.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PLUS . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PLUS . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_PLUS BACKTICK WILDCARD
##
## Ends in an error in state: 607.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PLUS BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PLUS BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PLUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_PLUS BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 608.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_PLUS BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 609.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PLUS BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_PIPE WILDCARD
##
## Ends in an error in state: 611.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PIPE . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PIPE . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 612.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PIPE BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PIPE BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_PIPE BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 613.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_PIPE BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 614.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PIPE BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_PERCENT WILDCARD
##
## Ends in an error in state: 616.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_PERCENT BACKTICK WILDCARD
##
## Ends in an error in state: 617.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PERCENT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_PERCENT BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 618.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_PERCENT BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 619.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PERCENT BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_MULT WILDCARD
##
## Ends in an error in state: 621.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_MULT . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_MULT . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_MULT BACKTICK WILDCARD
##
## Ends in an error in state: 622.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_MULT BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_MULT BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MULT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_MULT BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 623.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_MULT BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 624.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MULT BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_MINUS WILDCARD
##
## Ends in an error in state: 626.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_MINUS . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_MINUS . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 627.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_MINUS BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_MINUS BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_MINUS BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 628.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_MINUS BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 629.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MINUS BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_INF WILDCARD
##
## Ends in an error in state: 631.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_INF . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_INF . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_INF BACKTICK WILDCARD
##
## Ends in an error in state: 632.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_INF BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_INF BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_INF BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_INF BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 633.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_INF BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 634.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_INF BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_EQUAL WILDCARD
##
## Ends in an error in state: 636.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_EQUAL BACKTICK WILDCARD
##
## Ends in an error in state: 637.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_EQUAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_EQUAL BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 638.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_EQUAL BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 639.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_EQUAL BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_DOLLAR WILDCARD
##
## Ends in an error in state: 641.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_DOLLAR BACKTICK WILDCARD
##
## Ends in an error in state: 642.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_DOLLAR BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 643.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_DOLLAR BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 644.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_DIV WILDCARD
##
## Ends in an error in state: 646.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_DIV . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_DIV . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_DIV BACKTICK WILDCARD
##
## Ends in an error in state: 647.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_DIV BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_DIV BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DIV BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_DIV BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 648.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_DIV BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 649.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DIV BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_CARET WILDCARD
##
## Ends in an error in state: 651.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_CARET . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_CARET . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_CARET BACKTICK WILDCARD
##
## Ends in an error in state: 652.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_CARET BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_CARET BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_CARET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_CARET BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 653.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_CARET BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 654.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_CARET BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_AMPERSAND WILDCARD
##
## Ends in an error in state: 656.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND . BACKTICK option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND . BACKTICK option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_AMPERSAND BACKTICK WILDCARD
##
## Ends in an error in state: 657.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK . option(preceded(COLON,located(kosu_type))) [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK . option(preceded(COLON,located(kosu_type))) COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_AMPERSAND BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 658.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kosu_type))) . [ RPARENT MINUS_SUP ]
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kosu_type))) . COMMA separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE BACKTICK INFIX_AMPERSAND BACKTICK COMMA WILDCARD
##
## Ends in an error in state: 659.
##
## separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kosu_type))) COMMA . separated_nonempty_list(COMMA,kosu_anon_parameter) [ RPARENT MINUS_SUP ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK option(preceded(COLON,located(kosu_type))) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE Identifier RPARENT
##
## Ends in an error in state: 661.
##
## kosu_expression -> CLOSURE loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) . MINUS_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CLOSURE loption(separated_nonempty_list(COMMA,kosu_anon_parameter))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 581, spurious reduction of production option(preceded(COLON,located(kosu_type))) ->
## In state 582, spurious reduction of production separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) Identifier option(preceded(COLON,located(kosu_type)))
## In state 236, spurious reduction of production loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) -> separated_nonempty_list(COMMA,kosu_anon_parameter)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE MINUS_SUP WILDCARD
##
## Ends in an error in state: 662.
##
## kosu_expression -> CLOSURE loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) MINUS_SUP . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CLOSURE loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) MINUS_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL CLOSURE MINUS_SUP Constant WILDCARD
##
## Ends in an error in state: 663.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> CLOSURE loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) MINUS_SUP kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## CLOSURE loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) MINUS_SUP kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL FUNCTION LPARENT RPARENT MINUS_SUP Constant WILDCARD
##
## Ends in an error in state: 664.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> FUNCTION LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT MINUS_SUP kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION LPARENT loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) RPARENT MINUS_SUP kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL FUNCTION Identifier RPARENT
##
## Ends in an error in state: 665.
##
## kosu_expression -> FUNCTION loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) . MINUS_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(separated_nonempty_list(COMMA,kosu_anon_parameter))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 581, spurious reduction of production option(preceded(COLON,located(kosu_type))) ->
## In state 582, spurious reduction of production separated_nonempty_list(COMMA,kosu_anon_parameter) -> boption(VAR) Identifier option(preceded(COLON,located(kosu_type)))
## In state 236, spurious reduction of production loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) -> separated_nonempty_list(COMMA,kosu_anon_parameter)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL FUNCTION MINUS_SUP WILDCARD
##
## Ends in an error in state: 666.
##
## kosu_expression -> FUNCTION loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) MINUS_SUP . kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) MINUS_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL FUNCTION MINUS_SUP Constant WILDCARD
##
## Ends in an error in state: 667.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> FUNCTION loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) MINUS_SUP kosu_expression . [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(separated_nonempty_list(COMMA,kosu_anon_parameter)) MINUS_SUP kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL IF Constant WILDCARD
##
## Ends in an error in state: 668.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> IF kosu_expression . kosu_block option(preceded(ELSE,kosu_block)) [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## IF kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL IF Constant LBRACE Constant RBRACE WILDCARD
##
## Ends in an error in state: 669.
##
## kosu_expression -> IF kosu_expression kosu_block . option(preceded(ELSE,kosu_block)) [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## IF kosu_expression kosu_block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LSQBRACE IntegerLitteral WILDCARD
##
## Ends in an error in state: 673.
##
## kosu_expression -> IntegerLitteral . [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT COMMA ]
## kosu_expression -> LSQBRACE IntegerLitteral . COLON kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## LSQBRACE IntegerLitteral
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LSQBRACE IntegerLitteral COLON WILDCARD
##
## Ends in an error in state: 674.
##
## kosu_expression -> LSQBRACE IntegerLitteral COLON . kosu_expression RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## LSQBRACE IntegerLitteral COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LSQBRACE IntegerLitteral COLON Constant WILDCARD
##
## Ends in an error in state: 675.
##
## kosu_expression -> LSQBRACE IntegerLitteral COLON kosu_expression . RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR RSQBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
##
## The known suffix of the stack is as follows:
## LSQBRACE IntegerLitteral COLON kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LSQBRACE Constant RPARENT
##
## Ends in an error in state: 677.
##
## kosu_expression -> LSQBRACE separated_nonempty_list(COMMA,located(kosu_expression)) . RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## LSQBRACE separated_nonempty_list(COMMA,located(kosu_expression))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 440, spurious reduction of production separated_nonempty_list(COMMA,located(kosu_expression)) -> kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LSQBRACE IntegerLitteral COMMA RPARENT
##
## Ends in an error in state: 679.
##
## kosu_expression -> LSQBRACE nonempty_list(terminated(located(kosu_expression),COMMA)) . RSQBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## LSQBRACE nonempty_list(terminated(located(kosu_expression),COMMA))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 441, spurious reduction of production nonempty_list(terminated(located(kosu_expression),COMMA)) -> kosu_expression COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL MATCH Constant WILDCARD
##
## Ends in an error in state: 681.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> MATCH kosu_expression . LBRACE nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## MATCH kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL MATCH Constant LBRACE WILDCARD
##
## Ends in an error in state: 682.
##
## kosu_expression -> MATCH kosu_expression LBRACE . nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) RBRACE [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## MATCH kosu_expression LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL MATCH Constant LBRACE PIPE WHILE
##
## Ends in an error in state: 683.
##
## nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) -> PIPE . kosu_pattern MINUS_SUP kosu_block [ RBRACE ]
## nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) -> PIPE . kosu_pattern MINUS_SUP kosu_block nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL MATCH Constant LBRACE PIPE IntegerLitteral WILDCARD
##
## Ends in an error in state: 684.
##
## kosu_pattern -> kosu_pattern . PIPE kosu_pattern [ PIPE MINUS_SUP ]
## nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) -> PIPE kosu_pattern . MINUS_SUP kosu_block [ RBRACE ]
## nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) -> PIPE kosu_pattern . MINUS_SUP kosu_block nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## PIPE kosu_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL MATCH Constant LBRACE PIPE IntegerLitteral MINUS_SUP WILDCARD
##
## Ends in an error in state: 685.
##
## nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) -> PIPE kosu_pattern MINUS_SUP . kosu_block [ RBRACE ]
## nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) -> PIPE kosu_pattern MINUS_SUP . kosu_block nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## PIPE kosu_pattern MINUS_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL MATCH Constant LBRACE PIPE IntegerLitteral MINUS_SUP LBRACE Constant RBRACE WILDCARD
##
## Ends in an error in state: 686.
##
## nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) -> PIPE kosu_pattern MINUS_SUP kosu_block . [ RBRACE ]
## nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) -> PIPE kosu_pattern MINUS_SUP kosu_block . nonempty_list(preceded(PIPE,splitted(located(kosu_pattern),MINUS_SUP,kosu_block))) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## PIPE kosu_pattern MINUS_SUP kosu_block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL SIZEOF LPARENT COLON Constant WILDCARD
##
## Ends in an error in state: 690.
##
## kosu_expression -> SIZEOF LPARENT COLON kosu_expression . RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR RPARENT PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPARENT COLON kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL SIZEOF LPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 692.
##
## kosu_expression -> SIZEOF LPARENT kosu_type . RPARENT [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## SIZEOF LPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL WHILE Constant WILDCARD
##
## Ends in an error in state: 694.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR PIPE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> WHILE kosu_expression . kosu_block [ STRUCT STAR SEMICOLON RSQBRACE RPARENT RBRACE PIPE OPAQUE MINUS_SUP MINUS LBRACE INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST COMMA ]
##
## The known suffix of the stack is as follows:
## WHILE kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE VAR IntegerLitteral EQUAL Constant WILDCARD
##
## Ends in an error in state: 696.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> VAR kosu_pattern option(preceded(COLON,located(kosu_type))) EQUAL kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## VAR kosu_pattern option(preceded(COLON,located(kosu_type))) EQUAL kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE OPEN WILDCARD
##
## Ends in an error in state: 697.
##
## kosu_statement_base -> OPEN . separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)) [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## OPEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT WILDCARD
##
## Ends in an error in state: 699.
##
## kosu_statement_base -> MUT . boption(STAR) Identifier loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) PREFIX_TILDE loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) PREFIX_EXCLA loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) PREFIX_QUESTIONMARK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK STAR BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK MINUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK PIPE BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK INFIX_PIPE BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK INFIX_AMPERSAND BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK INFIX_EQUAL BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK INFIX_INF BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK INFIX_SUP BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK INFIX_CARET BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK INFIX_PLUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK INFIX_MINUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK INFIX_MULT BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK INFIX_DIV BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK INFIX_DOLLAR BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT . boption(STAR) BACKTICK INFIX_PERCENT BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT STAR WILDCARD
##
## Ends in an error in state: 701.
##
## kosu_statement_base -> MUT boption(STAR) . Identifier loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . PREFIX_TILDE loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . PREFIX_EXCLA loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . PREFIX_QUESTIONMARK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK STAR BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK MINUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK PIPE BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK INFIX_PIPE BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK INFIX_AMPERSAND BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK INFIX_EQUAL BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK INFIX_INF BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK INFIX_SUP BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK INFIX_CARET BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK INFIX_PLUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK INFIX_MINUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK INFIX_MULT BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK INFIX_DIV BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK INFIX_DOLLAR BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) . BACKTICK INFIX_PERCENT BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT PREFIX_TILDE WILDCARD
##
## Ends in an error in state: 702.
##
## kosu_statement_base -> MUT boption(STAR) PREFIX_TILDE . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) PREFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT Identifier DOT WILDCARD
##
## Ends in an error in state: 703.
##
## loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) -> DOT . separated_nonempty_list(DOT,located(Identifier)) [ INF_MINUS ]
##
## The known suffix of the stack is as follows:
## DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT Identifier DOT Identifier WILDCARD
##
## Ends in an error in state: 704.
##
## separated_nonempty_list(DOT,located(Identifier)) -> Identifier . [ INF_MINUS ]
## separated_nonempty_list(DOT,located(Identifier)) -> Identifier . DOT separated_nonempty_list(DOT,located(Identifier)) [ INF_MINUS ]
##
## The known suffix of the stack is as follows:
## Identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT Identifier DOT Identifier DOT WILDCARD
##
## Ends in an error in state: 705.
##
## separated_nonempty_list(DOT,located(Identifier)) -> Identifier DOT . separated_nonempty_list(DOT,located(Identifier)) [ INF_MINUS ]
##
## The known suffix of the stack is as follows:
## Identifier DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT PREFIX_TILDE INF_MINUS WILDCARD
##
## Ends in an error in state: 709.
##
## kosu_statement_base -> MUT boption(STAR) PREFIX_TILDE loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) PREFIX_TILDE loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT PREFIX_TILDE INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 710.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) PREFIX_TILDE loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) PREFIX_TILDE loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT PREFIX_QUESTIONMARK WILDCARD
##
## Ends in an error in state: 711.
##
## kosu_statement_base -> MUT boption(STAR) PREFIX_QUESTIONMARK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) PREFIX_QUESTIONMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT PREFIX_QUESTIONMARK INF_MINUS WILDCARD
##
## Ends in an error in state: 713.
##
## kosu_statement_base -> MUT boption(STAR) PREFIX_QUESTIONMARK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) PREFIX_QUESTIONMARK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT PREFIX_QUESTIONMARK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 714.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) PREFIX_QUESTIONMARK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) PREFIX_QUESTIONMARK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT PREFIX_EXCLA WILDCARD
##
## Ends in an error in state: 715.
##
## kosu_statement_base -> MUT boption(STAR) PREFIX_EXCLA . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) PREFIX_EXCLA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT PREFIX_EXCLA INF_MINUS WILDCARD
##
## Ends in an error in state: 717.
##
## kosu_statement_base -> MUT boption(STAR) PREFIX_EXCLA loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) PREFIX_EXCLA loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT PREFIX_EXCLA INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 718.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) PREFIX_EXCLA loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) PREFIX_EXCLA loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT Identifier WILDCARD
##
## Ends in an error in state: 719.
##
## kosu_statement_base -> MUT boption(STAR) Identifier . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) Identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT Identifier INF_MINUS WILDCARD
##
## Ends in an error in state: 721.
##
## kosu_statement_base -> MUT boption(STAR) Identifier loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) Identifier loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT Identifier INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 722.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) Identifier loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) Identifier loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK WILDCARD
##
## Ends in an error in state: 723.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK . STAR BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK . MINUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK . PIPE BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK . INFIX_PIPE BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK . INFIX_AMPERSAND BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK . INFIX_EQUAL BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK . INFIX_INF BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK . INFIX_SUP BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK . INFIX_CARET BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK . INFIX_PLUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK . INFIX_MINUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK . INFIX_MULT BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK . INFIX_DIV BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK . INFIX_DOLLAR BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK . INFIX_PERCENT BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK STAR WILDCARD
##
## Ends in an error in state: 724.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK STAR . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK STAR BACKTICK WILDCARD
##
## Ends in an error in state: 725.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK STAR BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK STAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK STAR BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 727.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK STAR BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK STAR BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK STAR BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 728.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK STAR BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK STAR BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK PIPE WILDCARD
##
## Ends in an error in state: 729.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK PIPE . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 730.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK PIPE BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK PIPE BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 732.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK PIPE BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK PIPE BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK PIPE BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 733.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK PIPE BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK PIPE BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK MINUS WILDCARD
##
## Ends in an error in state: 734.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK MINUS . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 735.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK MINUS BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK MINUS BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 737.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK MINUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK MINUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK MINUS BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 738.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK MINUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK MINUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_SUP WILDCARD
##
## Ends in an error in state: 739.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_SUP . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_SUP BACKTICK WILDCARD
##
## Ends in an error in state: 740.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_SUP BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_SUP BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_SUP BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 742.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_SUP BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_SUP BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_SUP BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 743.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_SUP BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_SUP BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_PLUS WILDCARD
##
## Ends in an error in state: 744.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_PLUS . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_PLUS BACKTICK WILDCARD
##
## Ends in an error in state: 745.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_PLUS BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_PLUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_PLUS BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 747.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_PLUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_PLUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_PLUS BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 748.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_PLUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_PLUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_PIPE WILDCARD
##
## Ends in an error in state: 749.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_PIPE . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 750.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_PIPE BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_PIPE BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 752.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_PIPE BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_PIPE BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_PIPE BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 753.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_PIPE BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_PIPE BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_PERCENT WILDCARD
##
## Ends in an error in state: 754.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_PERCENT . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_PERCENT BACKTICK WILDCARD
##
## Ends in an error in state: 755.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_PERCENT BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_PERCENT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_PERCENT BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 757.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_PERCENT BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_PERCENT BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_PERCENT BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 758.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_PERCENT BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_PERCENT BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_MULT WILDCARD
##
## Ends in an error in state: 759.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_MULT . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_MULT BACKTICK WILDCARD
##
## Ends in an error in state: 760.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_MULT BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_MULT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_MULT BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 762.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_MULT BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_MULT BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_MULT BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 763.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_MULT BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_MULT BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_MINUS WILDCARD
##
## Ends in an error in state: 764.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_MINUS . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 765.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_MINUS BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_MINUS BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 767.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_MINUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_MINUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_MINUS BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 768.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_MINUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_MINUS BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_INF WILDCARD
##
## Ends in an error in state: 769.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_INF . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_INF BACKTICK WILDCARD
##
## Ends in an error in state: 770.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_INF BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_INF BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_INF BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 772.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_INF BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_INF BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_INF BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 773.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_INF BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_INF BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_EQUAL WILDCARD
##
## Ends in an error in state: 774.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_EQUAL . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_EQUAL BACKTICK WILDCARD
##
## Ends in an error in state: 775.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_EQUAL BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_EQUAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_EQUAL BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 777.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_EQUAL BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_EQUAL BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_EQUAL BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 778.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_EQUAL BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_EQUAL BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_DOLLAR WILDCARD
##
## Ends in an error in state: 779.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_DOLLAR . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_DOLLAR BACKTICK WILDCARD
##
## Ends in an error in state: 780.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_DOLLAR BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_DOLLAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_DOLLAR BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 782.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_DOLLAR BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_DOLLAR BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_DOLLAR BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 783.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_DOLLAR BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_DOLLAR BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_DIV WILDCARD
##
## Ends in an error in state: 784.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_DIV . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_DIV BACKTICK WILDCARD
##
## Ends in an error in state: 785.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_DIV BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_DIV BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_DIV BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 787.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_DIV BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_DIV BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_DIV BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 788.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_DIV BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_DIV BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_CARET WILDCARD
##
## Ends in an error in state: 789.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_CARET . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_CARET BACKTICK WILDCARD
##
## Ends in an error in state: 790.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_CARET BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_CARET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_CARET BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 792.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_CARET BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_CARET BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_CARET BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 793.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_CARET BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_CARET BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_AMPERSAND WILDCARD
##
## Ends in an error in state: 794.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_AMPERSAND . BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_AMPERSAND BACKTICK WILDCARD
##
## Ends in an error in state: 795.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_AMPERSAND BACKTICK . loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_AMPERSAND BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_AMPERSAND BACKTICK INF_MINUS WILDCARD
##
## Ends in an error in state: 797.
##
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_AMPERSAND BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_AMPERSAND BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE MUT BACKTICK INFIX_AMPERSAND BACKTICK INF_MINUS Constant WILDCARD
##
## Ends in an error in state: 798.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> MUT boption(STAR) BACKTICK INFIX_AMPERSAND BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MUT boption(STAR) BACKTICK INFIX_AMPERSAND BACKTICK loption(preceded(DOT,separated_nonempty_list(DOT,located(Identifier)))) INF_MINUS kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE DISCARD WILDCARD
##
## Ends in an error in state: 799.
##
## kosu_statement_base -> DISCARD . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## DISCARD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE DISCARD Constant WILDCARD
##
## Ends in an error in state: 800.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> DISCARD kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## DISCARD kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST WHILE
##
## Ends in an error in state: 801.
##
## kosu_statement_base -> CONST . kosu_pattern option(preceded(COLON,located(kosu_type))) EQUAL kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST IntegerLitteral WILDCARD
##
## Ends in an error in state: 802.
##
## kosu_pattern -> kosu_pattern . PIPE kosu_pattern [ PIPE EQUAL COLON ]
## kosu_statement_base -> CONST kosu_pattern . option(preceded(COLON,located(kosu_type))) EQUAL kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## CONST kosu_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST IntegerLitteral COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 803.
##
## kosu_statement_base -> CONST kosu_pattern option(preceded(COLON,located(kosu_type))) . EQUAL kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## CONST kosu_pattern option(preceded(COLON,located(kosu_type)))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST IntegerLitteral EQUAL WILDCARD
##
## Ends in an error in state: 804.
##
## kosu_statement_base -> CONST kosu_pattern option(preceded(COLON,located(kosu_type))) EQUAL . kosu_expression [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## CONST kosu_pattern option(preceded(COLON,located(kosu_type))) EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE CONST IntegerLitteral EQUAL Constant WILDCARD
##
## Ends in an error in state: 805.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR SEMICOLON PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_statement_base -> CONST kosu_pattern option(preceded(COLON,located(kosu_type))) EQUAL kosu_expression . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## CONST kosu_pattern option(preceded(COLON,located(kosu_type))) EQUAL kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE Constant WILDCARD
##
## Ends in an error in state: 807.
##
## kosu_block_base -> list(kosu_statement) kosu_expression . [ RBRACE ]
## kosu_expression -> kosu_expression . STAR kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT Identifier [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STAR RBRACE PIPE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND DOT ]
##
## The known suffix of the stack is as follows:
## list(kosu_statement) kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE OPEN ModuleIdentifier DOT
##
## Ends in an error in state: 808.
##
## kosu_statement -> kosu_statement_base . SEMICOLON [ WHILE VAR TRUE StringLitteral SIZEOF PREFIX_TILDE PREFIX_QUESTIONMARK PREFIX_EXCLA OPEN NULLPTR NULLMUTPTR ModuleIdentifier MUT MATCH LSQBRACE LPARENT LBRACE IntegerLitteral Identifier IF FloatLitteral FUNCTION FALSE DOT DISCARD Constant CharLitteral CONST CMP_LESS CMP_GREATER CMP_EQUAL CLOSURE CASES Builtin BACKTICK ]
##
## The known suffix of the stack is as follows:
## kosu_statement_base
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)) -> ModuleIdentifier
## In state 698, spurious reduction of production kosu_statement_base -> OPEN separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: CONST Constant COLON Identifier EQUAL LBRACE DISCARD Constant SEMICOLON WILDCARD
##
## Ends in an error in state: 810.
##
## list(kosu_statement) -> kosu_statement . list(kosu_statement) [ WHILE TRUE StringLitteral SIZEOF PREFIX_TILDE PREFIX_QUESTIONMARK PREFIX_EXCLA NULLPTR NULLMUTPTR ModuleIdentifier MATCH LSQBRACE LPARENT LBRACE IntegerLitteral Identifier IF FloatLitteral FUNCTION FALSE DOT Constant CharLitteral CMP_LESS CMP_GREATER CMP_EQUAL CLOSURE CASES Builtin BACKTICK ]
##
## The known suffix of the stack is as follows:
## kosu_statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT RPARENT Identifier EQUAL WILDCARD
##
## Ends in an error in state: 814.
##
## kosu_function_block -> EQUAL . kosu_expression [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT RPARENT Identifier EQUAL Constant WILDCARD
##
## Ends in an error in state: 815.
##
## kosu_expression -> kosu_expression . STAR kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . PIPE kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_PIPE kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_AMPERSAND kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_EQUAL kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_INF kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_SUP kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_CARET kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_PLUS kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_MINUS kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_MULT kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_DIV kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_DOLLAR kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . INFIX_PERCENT kosu_expression [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) Identifier option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_TILDE option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_EXCLA option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) PREFIX_QUESTIONMARK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK STAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PIPE BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_EQUAL BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_INF BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_SUP BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_CARET BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PLUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MINUS BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_MULT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DIV BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_DOLLAR BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . MINUS_SUP loption(terminated(separated_nonempty_list(DOUBLECOLON,located(ModuleIdentifier)),DOT)) BACKTICK INFIX_PERCENT BACKTICK option(delimited(LSQBRACE,trailing_separated_list(COMMA,located(kosu_type)),RSQBRACE)) LPARENT loption(separated_nonempty_list(COMMA,located(kosu_expression))) RPARENT [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . DOT Identifier [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_expression -> kosu_expression . DOT LSQBRACE kosu_expression RSQBRACE [ STRUCT STAR PIPE OPAQUE MINUS_SUP MINUS INFIX_SUP INFIX_PLUS INFIX_PIPE INFIX_PERCENT INFIX_MULT INFIX_MINUS INFIX_INF INFIX_EQUAL INFIX_DOLLAR INFIX_DIV INFIX_CARET INFIX_AMPERSAND FUNCTION EXTERNAL EOF ENUM DOT CONST ]
## kosu_function_block -> EQUAL kosu_expression . [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EQUAL kosu_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT VAR WILDCARD
##
## Ends in an error in state: 818.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . Identifier COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . PREFIX_TILDE COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . PREFIX_EXCLA COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . PREFIX_QUESTIONMARK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK STAR BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK MINUS BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK PIPE BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_PIPE BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_AMPERSAND BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_EQUAL BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_INF BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_SUP BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_CARET BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_PLUS BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_MINUS BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_MULT BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_DIV BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_DOLLAR BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_PERCENT BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . Identifier COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . PREFIX_TILDE COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . PREFIX_EXCLA COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . PREFIX_QUESTIONMARK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK STAR BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK MINUS BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK PIPE BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_PIPE BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_AMPERSAND BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_EQUAL BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_INF BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_SUP BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_CARET BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_PLUS BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_MINUS BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_MULT BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_DIV BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_DOLLAR BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) . BACKTICK INFIX_PERCENT BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT PREFIX_TILDE WILDCARD
##
## Ends in an error in state: 819.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_TILDE . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_TILDE . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT PREFIX_TILDE COLON WILDCARD
##
## Ends in an error in state: 820.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_TILDE COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_TILDE COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_TILDE COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT PREFIX_TILDE COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 821.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_TILDE COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_TILDE COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_TILDE COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT PREFIX_TILDE COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 822.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_TILDE COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_TILDE COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT PREFIX_QUESTIONMARK WILDCARD
##
## Ends in an error in state: 824.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_QUESTIONMARK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_QUESTIONMARK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_QUESTIONMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT PREFIX_QUESTIONMARK COLON WILDCARD
##
## Ends in an error in state: 825.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_QUESTIONMARK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_QUESTIONMARK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_QUESTIONMARK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT PREFIX_QUESTIONMARK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 826.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_QUESTIONMARK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_QUESTIONMARK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_QUESTIONMARK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT PREFIX_QUESTIONMARK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 827.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_QUESTIONMARK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_QUESTIONMARK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT PREFIX_EXCLA WILDCARD
##
## Ends in an error in state: 829.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_EXCLA . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_EXCLA . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_EXCLA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT PREFIX_EXCLA COLON WILDCARD
##
## Ends in an error in state: 830.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_EXCLA COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_EXCLA COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_EXCLA COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT PREFIX_EXCLA COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 831.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_EXCLA COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_EXCLA COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_EXCLA COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT PREFIX_EXCLA COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 832.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) PREFIX_EXCLA COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) PREFIX_EXCLA COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT Identifier WILDCARD
##
## Ends in an error in state: 834.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) Identifier . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) Identifier . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) Identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT Identifier COLON WILDCARD
##
## Ends in an error in state: 835.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) Identifier COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) Identifier COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) Identifier COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT Identifier COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 836.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) Identifier COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) Identifier COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) Identifier COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT Identifier COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 837.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) Identifier COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) Identifier COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK WILDCARD
##
## Ends in an error in state: 839.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . STAR BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . MINUS BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . PIPE BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_PIPE BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_AMPERSAND BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_EQUAL BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_INF BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_SUP BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_CARET BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_PLUS BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_MINUS BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_MULT BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_DIV BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_DOLLAR BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_PERCENT BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . STAR BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . MINUS BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . PIPE BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_PIPE BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_AMPERSAND BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_EQUAL BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_INF BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_SUP BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_CARET BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_PLUS BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_MINUS BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_MULT BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_DIV BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_DOLLAR BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK . INFIX_PERCENT BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK STAR WILDCARD
##
## Ends in an error in state: 840.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK STAR . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK STAR . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK STAR BACKTICK WILDCARD
##
## Ends in an error in state: 841.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK STAR BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK STAR BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK STAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK STAR BACKTICK COLON WILDCARD
##
## Ends in an error in state: 842.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK STAR BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK STAR BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK STAR BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK STAR BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 843.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK STAR BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK STAR BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK STAR BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK STAR BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 844.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK STAR BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK STAR BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK PIPE WILDCARD
##
## Ends in an error in state: 846.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK PIPE . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK PIPE . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 847.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK PIPE BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK PIPE BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK PIPE BACKTICK COLON WILDCARD
##
## Ends in an error in state: 848.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK PIPE BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK PIPE BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK PIPE BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK PIPE BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 849.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK PIPE BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK PIPE BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK PIPE BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK PIPE BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 850.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK PIPE BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK PIPE BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK MINUS WILDCARD
##
## Ends in an error in state: 852.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK MINUS . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK MINUS . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 853.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK MINUS BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK MINUS BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK MINUS BACKTICK COLON WILDCARD
##
## Ends in an error in state: 854.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK MINUS BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK MINUS BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK MINUS BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK MINUS BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 855.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK MINUS BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK MINUS BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK MINUS BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK MINUS BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 856.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK MINUS BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK MINUS BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_SUP WILDCARD
##
## Ends in an error in state: 858.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_SUP . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_SUP . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_SUP BACKTICK WILDCARD
##
## Ends in an error in state: 859.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_SUP BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_SUP BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_SUP BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_SUP BACKTICK COLON WILDCARD
##
## Ends in an error in state: 860.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_SUP BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_SUP BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_SUP BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_SUP BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 861.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_SUP BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_SUP BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_SUP BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_SUP BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 862.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_SUP BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_SUP BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PLUS WILDCARD
##
## Ends in an error in state: 864.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PLUS . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PLUS . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PLUS BACKTICK WILDCARD
##
## Ends in an error in state: 865.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PLUS BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PLUS BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PLUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PLUS BACKTICK COLON WILDCARD
##
## Ends in an error in state: 866.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PLUS BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PLUS BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PLUS BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PLUS BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 867.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PLUS BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PLUS BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PLUS BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PLUS BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 868.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PLUS BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PLUS BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PIPE WILDCARD
##
## Ends in an error in state: 870.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PIPE . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PIPE . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 871.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PIPE BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PIPE BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PIPE BACKTICK COLON WILDCARD
##
## Ends in an error in state: 872.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PIPE BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PIPE BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PIPE BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PIPE BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 873.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PIPE BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PIPE BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PIPE BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PIPE BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 874.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PIPE BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PIPE BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PERCENT WILDCARD
##
## Ends in an error in state: 876.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PERCENT BACKTICK WILDCARD
##
## Ends in an error in state: 877.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PERCENT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PERCENT BACKTICK COLON WILDCARD
##
## Ends in an error in state: 878.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PERCENT BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PERCENT BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 879.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PERCENT BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_PERCENT BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 880.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_PERCENT BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_PERCENT BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_MULT WILDCARD
##
## Ends in an error in state: 882.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MULT . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MULT . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_MULT BACKTICK WILDCARD
##
## Ends in an error in state: 883.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MULT BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MULT BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MULT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_MULT BACKTICK COLON WILDCARD
##
## Ends in an error in state: 884.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MULT BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MULT BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MULT BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_MULT BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 885.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MULT BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MULT BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MULT BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_MULT BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 886.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MULT BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MULT BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_MINUS WILDCARD
##
## Ends in an error in state: 888.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MINUS . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MINUS . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 889.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MINUS BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MINUS BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_MINUS BACKTICK COLON WILDCARD
##
## Ends in an error in state: 890.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MINUS BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MINUS BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MINUS BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_MINUS BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 891.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MINUS BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MINUS BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MINUS BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_MINUS BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 892.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_MINUS BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_MINUS BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_INF WILDCARD
##
## Ends in an error in state: 894.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_INF . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_INF . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_INF BACKTICK WILDCARD
##
## Ends in an error in state: 895.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_INF BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_INF BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_INF BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_INF BACKTICK COLON WILDCARD
##
## Ends in an error in state: 896.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_INF BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_INF BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_INF BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_INF BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 897.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_INF BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_INF BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_INF BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_INF BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 898.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_INF BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_INF BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_EQUAL WILDCARD
##
## Ends in an error in state: 900.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_EQUAL BACKTICK WILDCARD
##
## Ends in an error in state: 901.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_EQUAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_EQUAL BACKTICK COLON WILDCARD
##
## Ends in an error in state: 902.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_EQUAL BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_EQUAL BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 903.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_EQUAL BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_EQUAL BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 904.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_EQUAL BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_EQUAL BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_DOLLAR WILDCARD
##
## Ends in an error in state: 906.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_DOLLAR BACKTICK WILDCARD
##
## Ends in an error in state: 907.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_DOLLAR BACKTICK COLON WILDCARD
##
## Ends in an error in state: 908.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_DOLLAR BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 909.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_DOLLAR BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 910.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DOLLAR BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_DIV WILDCARD
##
## Ends in an error in state: 912.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DIV . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DIV . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_DIV BACKTICK WILDCARD
##
## Ends in an error in state: 913.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DIV BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DIV BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DIV BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_DIV BACKTICK COLON WILDCARD
##
## Ends in an error in state: 914.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DIV BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DIV BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DIV BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_DIV BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 915.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DIV BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DIV BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DIV BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_DIV BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 916.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_DIV BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_DIV BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_CARET WILDCARD
##
## Ends in an error in state: 918.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_CARET . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_CARET . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_CARET BACKTICK WILDCARD
##
## Ends in an error in state: 919.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_CARET BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_CARET BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_CARET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_CARET BACKTICK COLON WILDCARD
##
## Ends in an error in state: 920.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_CARET BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_CARET BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_CARET BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_CARET BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 921.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_CARET BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_CARET BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_CARET BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_CARET BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 922.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_CARET BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_CARET BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_AMPERSAND WILDCARD
##
## Ends in an error in state: 924.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND . BACKTICK COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND . BACKTICK COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_AMPERSAND BACKTICK WILDCARD
##
## Ends in an error in state: 925.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK . COLON kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_AMPERSAND BACKTICK COLON WILDCARD
##
## Ends in an error in state: 926.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK COLON . kosu_type COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_AMPERSAND BACKTICK COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 927.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK COLON kosu_type . COMMA separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT BACKTICK INFIX_AMPERSAND BACKTICK COLON Identifier COMMA WILDCARD
##
## Ends in an error in state: 928.
##
## separated_nonempty_list(COMMA,kosu_function_parameter) -> boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK COLON kosu_type COMMA . separated_nonempty_list(COMMA,kosu_function_parameter) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## boption(VAR) BACKTICK INFIX_AMPERSAND BACKTICK COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION PREFIX_QUESTIONMARK WILDCARD
##
## Ends in an error in state: 930.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_QUESTIONMARK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_QUESTIONMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION PREFIX_QUESTIONMARK LPARENT WILDCARD
##
## Ends in an error in state: 931.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_QUESTIONMARK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_QUESTIONMARK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION PREFIX_QUESTIONMARK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 933.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION PREFIX_QUESTIONMARK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 934.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION PREFIX_EXCLA WILDCARD
##
## Ends in an error in state: 936.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_EXCLA . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_EXCLA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION PREFIX_EXCLA LPARENT WILDCARD
##
## Ends in an error in state: 937.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_EXCLA LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_EXCLA LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION PREFIX_EXCLA LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 939.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION PREFIX_EXCLA LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 940.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier WILDCARD
##
## Ends in an error in state: 942.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) Identifier . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) Identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT WILDCARD
##
## Ends in an error in state: 943.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) Identifier LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) Identifier LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 945.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) Identifier LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) Identifier LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION Identifier LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 946.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) Identifier LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) Identifier LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK WILDCARD
##
## Ends in an error in state: 948.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . STAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK . INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK STAR WILDCARD
##
## Ends in an error in state: 949.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK STAR . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK STAR BACKTICK WILDCARD
##
## Ends in an error in state: 950.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK STAR BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK STAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK STAR BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 951.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK STAR BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK STAR BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK STAR BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 953.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK STAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK STAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK STAR BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 954.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK STAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK STAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK PIPE WILDCARD
##
## Ends in an error in state: 956.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK PIPE . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 957.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK PIPE BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK PIPE BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 958.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK PIPE BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK PIPE BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK PIPE BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 960.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK PIPE BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 961.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK MINUS WILDCARD
##
## Ends in an error in state: 963.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK MINUS . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 964.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK MINUS BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK MINUS BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 965.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK MINUS BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK MINUS BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK MINUS BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 967.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK MINUS BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 968.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_SUP WILDCARD
##
## Ends in an error in state: 970.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_SUP . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_SUP BACKTICK WILDCARD
##
## Ends in an error in state: 971.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_SUP BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_SUP BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_SUP BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 972.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_SUP BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_SUP BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_SUP BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 974.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_SUP BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 975.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PLUS WILDCARD
##
## Ends in an error in state: 977.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PLUS . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PLUS BACKTICK WILDCARD
##
## Ends in an error in state: 978.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PLUS BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PLUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PLUS BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 979.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PLUS BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PLUS BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PLUS BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 981.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PLUS BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 982.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PIPE WILDCARD
##
## Ends in an error in state: 984.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PIPE . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 985.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PIPE BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PIPE BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 986.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PIPE BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PIPE BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PIPE BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 988.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PIPE BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 989.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PERCENT WILDCARD
##
## Ends in an error in state: 991.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PERCENT . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PERCENT BACKTICK WILDCARD
##
## Ends in an error in state: 992.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PERCENT BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PERCENT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PERCENT BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 993.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PERCENT BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PERCENT BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PERCENT BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 995.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_PERCENT BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 996.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_MULT WILDCARD
##
## Ends in an error in state: 998.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MULT . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_MULT BACKTICK WILDCARD
##
## Ends in an error in state: 999.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MULT BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MULT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_MULT BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 1000.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MULT BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MULT BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_MULT BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1002.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_MULT BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1003.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_MINUS WILDCARD
##
## Ends in an error in state: 1005.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MINUS . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 1006.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MINUS BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_MINUS BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 1007.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MINUS BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MINUS BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_MINUS BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1009.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_MINUS BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1010.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_INF WILDCARD
##
## Ends in an error in state: 1012.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_INF . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_INF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_INF BACKTICK WILDCARD
##
## Ends in an error in state: 1013.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_INF BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_INF BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_INF BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 1014.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_INF BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_INF BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_INF BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1016.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_INF BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1017.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_EQUAL WILDCARD
##
## Ends in an error in state: 1019.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_EQUAL . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_EQUAL BACKTICK WILDCARD
##
## Ends in an error in state: 1020.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_EQUAL BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_EQUAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_EQUAL BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 1021.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_EQUAL BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_EQUAL BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_EQUAL BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1023.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_EQUAL BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1024.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_DOLLAR WILDCARD
##
## Ends in an error in state: 1026.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DOLLAR . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DOLLAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_DOLLAR BACKTICK WILDCARD
##
## Ends in an error in state: 1027.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DOLLAR BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DOLLAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_DOLLAR BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 1028.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DOLLAR BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DOLLAR BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_DOLLAR BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1030.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_DOLLAR BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1031.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_DIV WILDCARD
##
## Ends in an error in state: 1033.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DIV . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_DIV BACKTICK WILDCARD
##
## Ends in an error in state: 1034.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DIV BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DIV BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_DIV BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 1035.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DIV BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DIV BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_DIV BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1037.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_DIV BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1038.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_CARET WILDCARD
##
## Ends in an error in state: 1040.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_CARET . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_CARET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_CARET BACKTICK WILDCARD
##
## Ends in an error in state: 1041.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_CARET BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_CARET BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_CARET BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 1042.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_CARET BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_CARET BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_CARET BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1044.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_CARET BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1045.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_AMPERSAND WILDCARD
##
## Ends in an error in state: 1047.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_AMPERSAND . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_AMPERSAND BACKTICK WILDCARD
##
## Ends in an error in state: 1048.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_AMPERSAND BACKTICK LPARENT WILDCARD
##
## Ends in an error in state: 1049.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_AMPERSAND BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1051.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT . kosu_type kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: FUNCTION BACKTICK INFIX_AMPERSAND BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1052.
##
## kosu_function_decl -> FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type . kosu_function_block [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION loption(terminated(separated_nonempty_list(COMMA,loc_poly_vars),DOT)) BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,kosu_function_parameter)) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL WILDCARD
##
## Ends in an error in state: 1054.
##
## kosu_external_func_decl -> EXTERNAL . Identifier LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . PREFIX_TILDE LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK STAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL . BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL PREFIX_TILDE WILDCARD
##
## Ends in an error in state: 1055.
##
## kosu_external_func_decl -> EXTERNAL PREFIX_TILDE . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_TILDE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL PREFIX_TILDE LPARENT WHILE
##
## Ends in an error in state: 1056.
##
## kosu_external_func_decl -> EXTERNAL PREFIX_TILDE LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_TILDE LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL Identifier LPARENT WILDCARD WILDCARD
##
## Ends in an error in state: 1057.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) -> WILDCARD . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) -> WILDCARD . COLON kosu_type COMMA separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## WILDCARD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL Identifier LPARENT WILDCARD COLON WILDCARD
##
## Ends in an error in state: 1058.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) -> WILDCARD COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) -> WILDCARD COLON . kosu_type COMMA separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## WILDCARD COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL Identifier LPARENT WILDCARD COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 1059.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) -> WILDCARD COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) -> WILDCARD COLON kosu_type . COMMA separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## WILDCARD COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL Identifier LPARENT WILDCARD COLON Identifier COMMA WHILE
##
## Ends in an error in state: 1060.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) -> WILDCARD COLON kosu_type COMMA . separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## WILDCARD COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL Identifier LPARENT Identifier WILDCARD
##
## Ends in an error in state: 1061.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) -> Identifier . COLON kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) -> Identifier . COLON kosu_type COMMA separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## Identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL Identifier LPARENT Identifier COLON WILDCARD
##
## Ends in an error in state: 1062.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) -> Identifier COLON . kosu_type [ RPARENT ]
## separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) -> Identifier COLON . kosu_type COMMA separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## Identifier COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL Identifier LPARENT Identifier COLON PolymorphicVar WILDCARD
##
## Ends in an error in state: 1063.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) -> Identifier COLON kosu_type . [ RPARENT ]
## separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) -> Identifier COLON kosu_type . COMMA separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## Identifier COLON kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL Identifier LPARENT Identifier COLON Identifier COMMA WHILE
##
## Ends in an error in state: 1064.
##
## separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) -> Identifier COLON kosu_type COMMA . separated_nonempty_list(COMMA,typed_parameter_loc(c_type)) [ RPARENT ]
##
## The known suffix of the stack is as follows:
## Identifier COLON kosu_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL PREFIX_TILDE LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1069.
##
## kosu_external_func_decl -> EXTERNAL PREFIX_TILDE LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_TILDE LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL PREFIX_TILDE LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1070.
##
## kosu_external_func_decl -> EXTERNAL PREFIX_TILDE LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_TILDE LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL Identifier LPARENT RPARENT Identifier EQUAL WILDCARD
##
## Ends in an error in state: 1071.
##
## option(preceded(EQUAL,StringLitteral)) -> EQUAL . StringLitteral [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL PREFIX_QUESTIONMARK WILDCARD
##
## Ends in an error in state: 1074.
##
## kosu_external_func_decl -> EXTERNAL PREFIX_QUESTIONMARK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_QUESTIONMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL PREFIX_QUESTIONMARK LPARENT WHILE
##
## Ends in an error in state: 1075.
##
## kosu_external_func_decl -> EXTERNAL PREFIX_QUESTIONMARK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_QUESTIONMARK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL PREFIX_QUESTIONMARK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1077.
##
## kosu_external_func_decl -> EXTERNAL PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL PREFIX_QUESTIONMARK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1078.
##
## kosu_external_func_decl -> EXTERNAL PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_QUESTIONMARK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL PREFIX_EXCLA WILDCARD
##
## Ends in an error in state: 1080.
##
## kosu_external_func_decl -> EXTERNAL PREFIX_EXCLA . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_EXCLA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL PREFIX_EXCLA LPARENT WHILE
##
## Ends in an error in state: 1081.
##
## kosu_external_func_decl -> EXTERNAL PREFIX_EXCLA LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_EXCLA LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL PREFIX_EXCLA LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1083.
##
## kosu_external_func_decl -> EXTERNAL PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL PREFIX_EXCLA LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1084.
##
## kosu_external_func_decl -> EXTERNAL PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL PREFIX_EXCLA LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL Identifier WILDCARD
##
## Ends in an error in state: 1086.
##
## kosu_external_func_decl -> EXTERNAL Identifier . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL Identifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL Identifier LPARENT WHILE
##
## Ends in an error in state: 1087.
##
## kosu_external_func_decl -> EXTERNAL Identifier LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL Identifier LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL Identifier LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1089.
##
## kosu_external_func_decl -> EXTERNAL Identifier LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL Identifier LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL Identifier LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1090.
##
## kosu_external_func_decl -> EXTERNAL Identifier LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL Identifier LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK WILDCARD
##
## Ends in an error in state: 1092.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK . STAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL BACKTICK . MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL BACKTICK . PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL BACKTICK . INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL BACKTICK . INFIX_AMPERSAND BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL BACKTICK . INFIX_EQUAL BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL BACKTICK . INFIX_INF BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL BACKTICK . INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL BACKTICK . INFIX_CARET BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL BACKTICK . INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL BACKTICK . INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL BACKTICK . INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL BACKTICK . INFIX_DIV BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL BACKTICK . INFIX_DOLLAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
## kosu_external_func_decl -> EXTERNAL BACKTICK . INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK STAR WILDCARD
##
## Ends in an error in state: 1093.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK STAR . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK STAR BACKTICK WILDCARD
##
## Ends in an error in state: 1094.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK STAR BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK STAR BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK STAR BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1095.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK STAR BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK STAR BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK STAR BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1097.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK STAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK STAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK STAR BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1098.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK STAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK STAR BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK PIPE WILDCARD
##
## Ends in an error in state: 1100.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK PIPE . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 1101.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK PIPE BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK PIPE BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1102.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK PIPE BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK PIPE BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK PIPE BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1104.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK PIPE BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1105.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK MINUS WILDCARD
##
## Ends in an error in state: 1107.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK MINUS . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 1108.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK MINUS BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK MINUS BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1109.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK MINUS BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK MINUS BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK MINUS BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1111.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK MINUS BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1112.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_SUP WILDCARD
##
## Ends in an error in state: 1114.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_SUP . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_SUP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_SUP BACKTICK WILDCARD
##
## Ends in an error in state: 1115.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_SUP BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_SUP BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1116.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1118.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1119.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_SUP BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PLUS WILDCARD
##
## Ends in an error in state: 1121.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PLUS . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PLUS BACKTICK WILDCARD
##
## Ends in an error in state: 1122.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PLUS BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PLUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1123.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1125.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1126.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PLUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PIPE WILDCARD
##
## Ends in an error in state: 1128.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PIPE . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PIPE BACKTICK WILDCARD
##
## Ends in an error in state: 1129.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PIPE BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PIPE BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1130.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1132.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1133.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PIPE BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PERCENT WILDCARD
##
## Ends in an error in state: 1135.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PERCENT . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PERCENT BACKTICK WILDCARD
##
## Ends in an error in state: 1136.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PERCENT BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PERCENT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1137.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1139.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1140.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_PERCENT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_MULT WILDCARD
##
## Ends in an error in state: 1142.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_MULT . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_MULT BACKTICK WILDCARD
##
## Ends in an error in state: 1143.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_MULT BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MULT BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1144.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1146.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1147.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MULT BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_MINUS WILDCARD
##
## Ends in an error in state: 1149.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_MINUS . BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_MINUS BACKTICK WILDCARD
##
## Ends in an error in state: 1150.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_MINUS BACKTICK . LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MINUS BACKTICK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT WHILE
##
## Ends in an error in state: 1151.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT . loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT RPARENT WILDCARD
##
## Ends in an error in state: 1153.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT . kosu_type option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

kosu_module: EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT RPARENT PolymorphicVar WILDCARD
##
## Ends in an error in state: 1154.
##
## kosu_external_func_decl -> EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type . option(preceded(EQUAL,StringLitteral)) [ STRUCT OPAQUE FUNCTION EXTERNAL EOF ENUM CONST ]
##
## The known suffix of the stack is as follows:
## EXTERNAL BACKTICK INFIX_MINUS BACKTICK LPARENT loption(separated_nonempty_list(COMMA,typed_parameter_loc(c_type))) RPARENT kosu_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>
